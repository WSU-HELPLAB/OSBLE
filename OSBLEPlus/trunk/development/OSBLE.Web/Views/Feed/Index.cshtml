@using OSBLE.Models.Courses
@using OSBLEPlus.Logic.Utility
@using OSBLEPlus.Logic.Utility.Lookups
@model OSBLEPlus.Logic.DomainObjects.ActivityFeeds.FeedViewModel

@{
    ViewBag.Title = "Activity Feed";
}

<section data-tab="ActivityFeed">

        <!--
        <article style="max-width:500px;">
            <h1>Notice</h1>
            <p>In preparation for a higher than normal server load, automatic loading of new feed posts has been temporarily disabled.
            In order to view the most recent feed items, you will need to manually Html.ActionLink("refresh", "Index", new { component = OsbideVsComponent.FeedOverview }, new {}) this page.</p>
        </article>
            -->
    <div id="activity_new_post">
        @if (ViewBag.ActiveCourse.AbstractRole != null)
        {
            if ((ViewBag.ActiveCourse.AbstractRole.CanGrade == true) || (ViewBag.ActiveCourse.AbstractRole.Anonymized) || ((ViewBag.ActiveCourse.AbstractCourse is Course) && (ViewBag.ActiveCourse.AbstractCourse.AllowDashboardPosts) == true))
            {
                if (ViewBag.Error != null)
                {
                    <h3 class="error">@ViewBag.Error</h3>
                }
                using (Ajax.BeginForm("PostFeedItem", "Feed",
                    new AjaxOptions
                    {
                        HttpMethod = "POST",
                        UpdateTargetId = "activity_feed_content",
                    },
                    new { 
                        id = "post-comment-form", 
                        @class = "spinner" 
                    }))
                {
                    <div class="form-group">
                        <textarea id="ActivityFeed" class="form-control" name="comment" rows="4" placeholder="Enter new feed post here..."></textarea>
                    </div>

                    <input type="submit" id="btn_post_active" class="btn btn-default" name="post_active" value="Post to @Helpers.CourseTag(ViewBag.ActiveCourse.AbstractCourse)" />

                    /*if (ViewBag.IsInstructor)
                    {
                        <input type="submit" id="btn_post_all" class="btn btn-default" name="post_all" value="Post to All Courses I Teach" onclick="return confirm('Post this message to all your taught courses?');" />
                        <label class="checkbox-inline"><input type="checkbox" value="True" name="send_email" /> Email to Class</label>
                    }

                    if (ViewBag.IsLeader)
                    {
                        <label class="checkbox-inline"><input type="checkbox" value="True" name="send_email" /> Email to Community</label>
                    }*/
                }
            }
        }
    </div>

        @using (Html.BeginForm("Index", "Feed", FormMethod.Post))
        {
            <div id="keywordSection" class="form-group">
                <label id="feedSearchIcon" for="feedSearchInput"><span class="glyphicon glyphicon-search"></span></label>
                <input id="feedSearchInput" type="text" class="typeahead form-control" name="keyword" autocomplete="off" value="@Model.Keyword" placeholder="Search by keyword..." />
            </div>
        }

        @*
        @using (Html.BeginForm("ApplyFeedFilter", "Feed"))
        {
            <article id="filter-options" style="display: none;">
                <article>
                    <h2>Filter by Activity Type:</h2>
                    <ul>
                        @foreach (var e in Enum<EventType>.Get())
                        {
                            if (Model.EventFilterOptions.Contains((EventType)e.Value))
                            {
                                var evt = Model.EventFilterOptions.Single(o => (int)o == e.Value);

                                string checkbox = "";
                                if (Model.UserEventFilterOptions.Where(o => o == evt).Count() > 0)
                                {
                                    checkbox = @"checked=""checked""";
                                }
                                <li>
                                    <input @Html.Raw(checkbox) type="checkbox" id="event_@evt.ToString()" name="event_@evt.ToString()" />
                                    <label for="event_@evt.ToString()">@e.Text</label>
                                </li>
                            }
                        }
                    </ul>
                </article>
                @*<article>
                    <h2>Filter by Error Type:</h2>
                    <select name="error-type">
                        <option value="-1">No Filter</option>
                        @foreach (ErrorType error in Model.ErrorTypes)
                        {
                            string selectedText = "";
                            if (error.Name.CompareTo(Model.SelectedErrorType.Name) == 0)
                            {
                                selectedText = @"selected=""selected""";
                            }
                            <option @Html.Raw(selectedText) value="@error.Id">@error.Name</option>
                        }
                    </select>
                </article>*@@*
                <article>
                    <h2>Filter by Course</h2>
                    <select name="course-filter">
                        <option value="-1">No Filter</option>
                        @foreach (Course course in Model.Courses)
                        {
                            string selectedText = "";
                            if (course.ID.CompareTo(Model.SelectedCourseId) == 0)
                            {
                                selectedText = @"selected=""selected""";
                            }
                            <option @Html.Raw(selectedText) value="@course.ID">@course.Name</option>
                        }
                    </select>
                </article>
                <article>
                    <h2>Filter by User Type</h2>
                    <select name="user-type-filter">
                        <option value="-1">No Filter</option>
                        @foreach (CourseRole.CourseRoles role in Model.CourseRoles)
                        {
                            string selectedText = "";
                            int roleValue = (int)role;
                            string roleName = Enum.GetName(typeof(CourseRole.CourseRoles), roleValue);
                            if (role == Model.SelectedCourseRole)
                            {
                                selectedText = @"selected=""selected""";
                            }
                            <option @Html.Raw(selectedText) value="@roleValue">@roleName</option>
                        }
                    </select>
                </article>
                <input type="submit" name="ApplyFeedFilter" value="Apply Filter" />
                <img class="submit-loading" src="~/Areas/Analytics/Content/loading.gif" title="loading" alt="loading" />
            </article>
        }
        *@
    <div id="dp_posts" class="panel-group">
        @Html.Partial("Feed/_Feed", Model)
    </div>

</section>

@*@section Scripts
{
    <script type="text/javascript" src="~/Scripts/Typeahead/typeahead-0.10.4.js"></script>
    <script type="text/javascript" src="~/Scripts/Typeahead/osbide-posts.js"></script>
    <script type="text/javascript" src="~/Scripts/Typeahead/jquery.textcomplete.js"></script>
    <script type="text/javascript" src="~/Scripts/Typeahead/jquery.overlay.js"></script>
}*@

<script type="text/javascript">
    function ShowReplyBox(lastLogID) {
        $("#btn-reply-" + lastLogID).hide();
        $("#feed-reply-" + lastLogID).show('blind');
        return false;
    }

    function HideReplyBox(lastLogID) {
        $("#btn-reply-" + lastLogID).show('highlight');
        $("#feed-reply-" + lastLogID).hide('blind');
        return false;
    }

    function ToggleShowReplies(lastLogID) {
        var replies = $("#feed-item-comments-" + lastLogID);
        if (replies.css('display') == 'none') {
            replies.show('blind');
        }
        else {
            var height = (window.innerHeight > 0) ? window.innerHeight : screen.height;
            var post = $("#feed-item-" + lastLogID);

            // scroll helps if reply box was really big
            if (post.height() > height) {
                $('html, body').animate({
                    scrollTop: post.offset().top
                }, 200);
            }
            replies.hide('blind');
        }
    }

    function PostReplyComplete(logID)
    {
        var replies = $("#feed-item-comments-" + logID);

        // make sure reply block is visible
        replies.css('display', 'block');
        $("#expand-comments-text-" + logID).text("Hide");

        // highlight the new reply
        replies.children().last().addClass('just-posted-reply');
        
        // scroll to new reply
        var post = $("#feed-item-" + logID);
        var height = (window.innerHeight > 0) ? window.innerHeight : screen.height;
        $('html, body').animate({
            scrollTop: post.offset().top + post.height() - height + 5
        }, 500);
    }
</script>