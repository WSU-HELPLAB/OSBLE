@using OSBLE.Controllers;
@using OSBLE.Models.Courses;
@using OSBLE.Models
@model IEnumerable<OSBLE.Models.Courses.CourseUser>
@{
    ViewBag.Title = "Roster";
}

<style type="text/css">
    .disabled {
        color: #999;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {
        $("#deleteAllWithdrawnStudents").click(function () {
            r = confirm("Are you sure? This action is irreversible and all withdrawn student work will be lost");
            if (r) {
                return true;
            }
            else {
                return false;
            }
        });
    });    
</script>



<h2>
    Roster</h2>
<h4>@ViewBag.Notice</h4>
@if (ViewBag.ActiveCourse.AbstractRole.CanModify)
{
    if (!(ViewBag.ActiveCourse.AbstractCourse is Community))
    {
    <div>
        <a href="#" onclick="$('#add_update_users').toggle('blind'); return false;">Add/Update
            Users</a>
    </div>
    <div id="add_update_users">
        <h4>
            Add Single User @Helpers.CreateToolTip(ToolTips.RosterSingleUser)
        </h4>
        <div>
            @Html.ActionLink("Add By School ID", "Create")&nbsp;&nbsp;
            @Html.ActionLink("Add By Email", "CreateByEmail")&nbsp;&nbsp;
        </div>
        <h4>
            Import Roster @Helpers.CreateToolTip(ToolTips.RosterImport)
        </h4>
        <div>
            Upload a comma-separated (CSV) roster of students in this course:<br />
            @using (Html.BeginForm("ImportRoster", "Roster", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <input id="import_roster_pick_file" type="file" name="file" accept=".csv" />
                <input id="import_roster_submit" class="disabled" type="submit" value="Upload Roster" disabled="disabled" />
                <p id="import_roster_error" class="error" hidden="hidden">Currently OSBLE+ only accepts comma-separated ('.csv') files. Please choose a roster in the .csv format and try again.</p>
            }
        </div>
    </div>
    }
    else
    {
    <div>
        @Html.ActionLink("Add By Email", "CreateByEmail")&nbsp;&nbsp;
    </div>
    }
}
<div>
    <br />
    Quick Filter By Name: @Helpers.CreateToolTip(ToolTips.RosterQuickFilter)
    <input type="text" id="roster_find" />

</div>
    <div id="multipleSelectedAction" style="max-width: 500px;" > <!--Multiple selected Users actions-->
    <h3 id="multipleActionHeader"><br />Multiple selected student actions<br /></h3>
    <h4 style="color:black;">Click on users to select them</h4>
    <h4>Select all users: <input type="checkbox" title="Check this box to select / deselect all users" onchange="selectAll(this)" id="selectAllUsers" style="width: 40px; height: 20px;"> </h4>
   
    <h4>Selected User Actions:</h4>
    <text>Move to section: </text>
    <select id="sectionSelection">
        <option value="0">0</option>
        @{
            string count = "1";
            bool flag = true;
            foreach (RosterController.UsersBySection usersBySection in ViewBag.UsersBySections)
            {
                if (usersBySection.SectionNumber != "0")
                {
                    <option value="@usersBySection.SectionNumber">@usersBySection.SectionNumber</option>
                    if (count == usersBySection.SectionNumber)
                    {
                        count = (Int32.Parse(usersBySection.SectionNumber) + 1).ToString(); //alwasy set count to the highest number
                    }
                }
            }
            <option value="@count">New Section (@count)</option>
        }
    </select>
    <input type="button" id="moverButton" value="Move" />
    <br />
    <br />
    @using (Html.BeginForm("CreateUserProfileIds", "Mail", FormMethod.Post, new { id = "emailForm", style = "display: inline;"}))
    {
        <input type="hidden" name="emailIDList" id="emailIDList" value="" />
        <text>Mail: </text>
        <a title="Mail Selected Users" onclick="massMail()">@Helpers.MailButton() | </a>       
    }

    @using (Html.BeginForm("ChangeStudentsToWithdrawnRole", "Roster", FormMethod.Post, new { id = "withdrawForm", style = "display: inline;"}))
    {
        <input type="hidden" name="withdrawIDList" id="withdrawIDList" value="" />
        <text>Withdraw: </text>
        <a title="Withdraw selected students" onclick="massWithdraw()">@Helpers.WithdrawButton() | </a>
    }

    @using (Html.BeginForm("ChangeWithdrawnUsersToStudentRole", "Roster", FormMethod.Post, new { id = "enrollForm", style = "display: inline;" }))
    {
        <input type="hidden" name="enrollIDList" id="enrollIDList" value="" />
        <text>Enroll: </text>
        <a title="Enroll selected users" onclick="massEnroll()">@Helpers.EnrollButton() | </a>
    }

    @using (Html.BeginForm("removeSelectedUsers", "Roster", FormMethod.Post, new { id = "removeForm", style = "display: inline;" }))
    {
        <input type="hidden" name="removeIDList" id="removeIDList" value="" />
        <text>Remove withdrawn: </text>
        <a title="Remove selected students" onclick="massRemove()">@Helpers.DeleteButton()</a>
    }
    <br />
    <br />
</div>


<script type="text/javascript">
    var moveSectionButton = document.getElementById("moverButton");
    var clickCounter = 0;

    //execute this when button is pressed
    moveSectionButton.addEventListener("click", moveUsers);

    //on loading/reloading the page this will execute and populate the variables as needed.
    $(document).ready(function () {

        var boxes = document.getElementsByClassName("sectionRoleCheckBox");
        $.each(boxes, function (i, val) {
            this.checked = false;
        });

        boxes = document.getElementsByClassName("sectionCheckBox");
        $.each(boxes, function (i, val) {
            this.checked = false;
        });
        
        document.getElementById("selectAllUsers").checked = false;

        var students = document.getElementsByClassName("UserLI");

        $.each(students, function (i, val) {
            var check = grabCheckBoxFromStudentLI(this);
            check.checked = false;
            this.style.backgroundColor = ""; //#595959
            this.style.color = "black";
        });

        clickCounter = 0;

    });


    //This will move the selected users to the specified section
    function moveUsers() {
        //code after move users clicked
        var users = document.getElementsByClassName("moveThisUser");
        var checkedUsers = Array();
        var sectionDropdown = document.getElementById("sectionSelection").selectedIndex;
        var sectionOptions = document.getElementById("sectionSelection").options;

        sectionDestination = sectionOptions[sectionDropdown].value;

        var classID = document.getElementById("data-course-link").getAttribute("data-course-id");

        var courseIDs = grabIDsOfSelected();

        EditSections(courseIDs, sectionDestination, classID);
    }


    //mail all selected users
    function massMail() {
        var IDs = grabIDsOfSelected();
        var IDString = idsToString(IDs);

        //update element to equal IDString
        $("#emailIDList").val(IDString);

        //submit the form
        $("#emailForm").submit();
    }

    function massWithdraw(){
        var IDs = grabIDsOfSelected();
        var IDString = idsToString(IDs);

        //update element to equal IDstring
        $("#withdrawIDList").val(IDString);

        //submit the form
        $("#withdrawForm").submit();
    }

    function massEnroll() {
        var IDs = grabIDsOfSelected();
        var IDString = idsToString(IDs);

        //update element to equal IDstring
        $("#enrollIDList").val(IDString);

        //submit the form
        $("#enrollForm").submit();
    }

    function massRemove() {
        if (confirm("Are you sure you want to remove these users?") == true) {
           
        } else {
            return;
        }

        var IDs = grabIDsOfSelected();
        var IDString = idsToString(IDs);
        //update element to equal idstring
        $("#removeIDList").val(IDString);

        //submit the form
        $("#removeForm").submit();
    }
  

    //this method grabs the IDs of all selected users
    function grabIDsOfSelected() {
        var IDs = Array();
        var students = document.getElementsByClassName("UserLI");

        $.each(students, function (i, val) {
            var temp = grabCheckBoxFromStudentLI(this);

            //if this student is selected, add the ID to the list
            if (temp.checked) {
                var ID = this.querySelectorAll('[id=userID]');
                IDs.push(ID[0].getAttribute("studentID"));
            }
        });

        return IDs;
    }

    function idsToString(IDs){
        var myStr = ""
        $.each(IDs, function(i, val){
            myStr += this + ",";
        });

        return myStr;
    }


    //this will use an Ajax call to use the controller method to move the users
    function EditSections(userIDs, desiredSection, abstractCourseID) {
        $.ajax({
            url: '/Roster/EditSections/',
            dataType: "json",
            traditional: true,
            data: { ids: userIDs, section: desiredSection, courseID: abstractCourseID },
            complete: function () {
                window.location.reload();
            }
        })
    }



    //if you click an individual button
    function blockClicked(block) {
        var box = grabCheckBoxFromStudentLI(block);

        if (box.checked) {
            changeToUncheck(block, box);
            triggerCheckBox(block, false);
        }
        else {
            changeToCheck(block, box);
            triggerCheckBox(block, true);
        }

        ////check how many students are selected and update page styling
        showOrHideMultiple();
    }


    //if you click a section button
    function roleClicked(roleCheck) {

        var currentSection = roleCheck.getAttribute("section");

        var sectionBlock = roleCheck.parentElement.parentElement;
        var students = sectionBlock.querySelectorAll('[class=UserLI]');

        //select all students that are in this section
        if (roleCheck.checked) {
            $.each(students, function (i, val) {
                var temp = grabCheckBoxFromStudentLI(this);

                changeToCheck(this, temp);
            });
        }

            //deselect all students that are in this section
        else {
            $.each(students, function (i, val) {
                var temp = grabCheckBoxFromStudentLI(this);
                changeToUncheck(this, temp);
            });
        }


        allInSectionOrNot(currentSection);
        allCheckedOrNot();


        //check how many students are selected and update page styling
        showOrHideMultiple();
    }

    //this method will select/deselect all students
    function selectAll(selectAllBox) {
        var allStudents = document.getElementsByClassName("UserLI");

        //if you want to select all students
        if (selectAllBox.checked) {
            $.each(allStudents, function (i, val) {
                var box = grabCheckBoxFromStudentLI(this);
                changeToCheck(this, box);
            });

            $.each(document.getElementsByClassName("sectionRoleCheckBox"), function (i, val) {
                this.checked = true;
            });

            $.each(document.getElementsByClassName("sectionCheckBox"), function (i, val) {
                this.checked = true;
            });
        }

            //if you want to deselect all students
        else {
            $.each(allStudents, function (i, val) {
                var box = grabCheckBoxFromStudentLI(this);
                changeToUncheck(this, box);
            });

            $.each(document.getElementsByClassName("sectionRoleCheckBox"), function (i, val) {
                this.checked = false;
            });

            $.each(document.getElementsByClassName("sectionCheckBox"), function (i, val) {
                this.checked = false;
            });
        }


        showOrHideMultiple();

    }

    //for each role in the section, check or uncheck users
    function sectionCheckChange(sectionCheck) {
        debugger;
        var roles = sectionCheck.parentElement.querySelectorAll('[class=sectionRoleCheckBox]');

        $.each(roles, function (i, val) {
            var students = this.parentElement.parentElement.querySelectorAll('[class=UserLI]');
            if (sectionCheck.checked) {
                this.checked = true;
            }
            else {
                this.checked = false;
            }

            $.each(students, function (x, value) {
                var temp = grabCheckBoxFromStudentLI(this);

                if (sectionCheck.checked) {
                    changeToCheck(this, temp);
                }
                else {
                    changeToUncheck(this, temp);
                }
            });
        });

        allCheckedOrNot();
        showOrHideMultiple();

    }

    //changes the studentLI to be checked
    function changeToCheck(studentLI, studentCheckBox) {
        if (!studentCheckBox.checked) {
            studentCheckBox.checked = true;
            studentLI.style.backgroundColor = "#A6A6A6"; //#595959
            studentLI.style.color = "white";
            clickCounter++;
        }
    }

    //changes the studentLI to be unchecked
    function changeToUncheck(studentLI, studentCheckBox) {
        if (studentCheckBox.checked) {
            studentCheckBox.checked = false;
            studentLI.style.backgroundColor = ""; //#595959
            studentLI.style.color = "black";
            clickCounter--;
        }
    }

    //this fetches the hidden checkbox from a studentLI
    function grabCheckBoxFromStudentLI(studentLI) {
        for (x = 0; x < studentLI.childNodes.length; x++) {
            if (studentLI.childNodes[x].id == "moveStudentBox") {
                return studentLI.childNodes[x];
            }
        }
        return null;
    }

    //this changes the styling of the multipleUserActions section
    function showOrHideMultiple() {
        var multipleActionHeader = document.getElementById("multipleSelectedAction");

        if (clickCounter > 1) {
            //TODO:: Display the multiple email, the multiple move, multiple withdraw, multiple KARATE CHOP!
            multipleActionHeader.style.backgroundColor = "#dbdbdb";
        }

        else {
            //multipleActionHeader.style = "display: none;";
            multipleActionHeader.style.backgroundColor = "";
        }
    }


    //this method is when you change one checkbox. Determines if the roleSection checkbox needs to be checked and all other checkboxes.
    function triggerCheckBox(studentLI, added) {
        var container = studentLI.parentElement.parentElement; //grab the block which contains
        var students = studentLI.parentElement.childNodes;
        var change = true;
        var box;
        var header;

        //grab the container
        for (x = 0; x < container.childNodes.length; x++) {
            if (container.childNodes[x].id === "sectionRoleHeader") {
                header = container.childNodes[x];
                break;
            }
        }

        //grab the check box
        for (x = 0; x < header.childNodes.length; x++) {
            if (header.childNodes[x].id === "sectionRoleCheckAll") {
                box = header.childNodes[x];
                break;
            }
        }

        //now we have the box and the header
        //if we just checked a user
        if (added === true) {
            $.each(students, function (i, val) {
                var studentBox = grabCheckBoxFromStudentLI(this);

                if (studentBox != null) //not guranteed every child node is a student LI
                {
                    if (!studentBox.checked) //if you find a box that's unchecked, return
                    {
                        change = false;
                    }
                }
            });

            //if you hit here, you're ready to check the box.
            if (change === true) {
                box.checked = true;
                allInSectionOrNot(box.getAttribute("section"));
                allCheckedOrNot();
            }
        }

            //if you remove even one, you need to uncheck the box
        else {
            box.checked = false;
            var sectionBoxes = document.getElementsByClassName("sectionCheckBox");
            for (x = 0; x < sectionBoxes.length; x++) {
                if (sectionBoxes[x].getAttribute("section") === box.getAttribute("section")) {
                    sectionBoxes[x].checked = false;
                }
            }
            document.getElementById("selectAllUsers").checked = false;
        }
    }

    //check if all roleBoxes in a section are checked, if so, check the section box
    function allInSectionOrNot(section) {
        var Boxes = document.getElementsByClassName("sectionCheckBox");
        var sectionBox;
        var flag = true;

        for (x = 0; x < Boxes.length; x++) {
            if (Boxes[x].getAttribute("section") === section) {
                sectionBox = Boxes[x];
            }
        }

        Boxes = document.getElementsByClassName("sectionRoleCheckBox");
        $.each(Boxes, function (i, val) {
            if (this.getAttribute("section") === section) {
                if (!this.checked) {
                    flag = false;
                }
            }
        });

        if (flag === true) {
            sectionBox.checked = true;
        }
        else {
            sectionBox.checked = false;
        }
    }

    //whenever you check or uncheck a box, call this function to see if the select all box needs to change.
    function allCheckedOrNot() {
        allBoxes = document.getElementsByClassName("sectionRoleCheckBox");
        var allow = true;
        $.each(allBoxes, function (i, val) {
            if (!this.checked) {
                allow = false;
            }
        });

        if (allow === true) {
            document.getElementById("selectAllUsers").checked = true;
        }
        else {
            document.getElementById("selectAllUsers").checked = false;
        }
    }

</script>


@* Hides anything that doesn't match search filter *@
<script type="text/javascript">
    if ("Cat".match(".*as")) alert('hi');
    $('#roster_find').keyup(function () {
        // Get search string and remove all non-alphanumeric characters (or dashes)
        var search = $('#roster_find').val().toLowerCase().replace(/[^a-z0-9\-\ ]*/gi, "");

        // Animation function. tries to avoid overlap.
        $('.roster_name').each(function () {
            if ($(this).html().toLowerCase().match(search)) {
                if (($(this).parent().data("showing") != true) && ($(this).parent().css("display") == "none")) {
                    $(this).parent().data("showing", true);
                    $(this).parent().show('highlight', {}, "slow", function () { $(this).data("showing", false); });
                }
            } else {
                if (($(this).parent().data("hiding") != true) && ($(this).parent().css("display") != "none")) {
                    $(this).parent().data("hiding", true);
                    $(this).parent().hide('highlight', {}, "slow", function () { $(this).data("hiding", false); });
                }
            }
        });
    });
</script>

<script>
    function RosterPillButtonPressed(roleName, section)
    {
        $('td.section-' + section).removeClass("active");
        $('td.section-' + section + '.role-' + roleName).addClass("active");
        $('.roster-btn.section-' + section).removeClass("btn-primary");
        $('.roster-btn.section-' + section + '.role-' + roleName).addClass("btn-primary");
    }

    $(document).ready(function () {
        $('.roster_table td:first-child').addClass("active");
    });

    $('#import_roster_pick_file').change(function () {        
        var fileExtension = ['csv']; //TODO: change here when support for other files types are added
        if ($.inArray($(this).val().split('.').pop().toLowerCase(), fileExtension) == -1) {
            $("#import_roster_submit").prop('disabled', true);
            $("#import_roster_submit").addClass("disabled");
            $("#import_roster_error").prop('hidden', false);            
        }
        else {
            $("#import_roster_submit").prop('disabled', false);
            $("#import_roster_submit").removeClass("disabled");
            $("#import_roster_error").prop('hidden', true);
        }
    });
</script>

@{  
    bool whitelistFlag = true;
    bool firstSection = true;

    foreach (RosterController.UsersBySection usersBySection in ViewBag.UsersBySections)
    {
        <div class="sectionDiv">

        <h3 style="display:inline;">@Helpers.DisplaySection(usersBySection.SectionNumber)
        </h3>
    <input type="checkbox" title="Check this box to select / deselect all users in this section" id="sectionCheck" class="sectionCheckBox" onchange="sectionCheckChange(this)" section="@usersBySection.SectionNumber" style="width: 40px; height: 20px;" />

        @if (firstSection)
        {
            @*<h4>   Select All users: <input type="checkbox" title="Check this box to select / deselect all users" onchange="selectAll(this)" id="selectAllUsers" style="width: 40px; height: 20px;"> </h4>
             <br />*@
            firstSection = false;
        }

        @* Button Pills used to simplify navigation on mobile devices (only visible when width < 850px)*@
        <div class="btn-group btn-group-justified roster_pills">
            @{ bool firstRole = true; }
            @foreach (RosterController.UsersByRole ubr in usersBySection.UsersByRole)
            {
                if (ubr.Count > 0)
                { 
                    <div class="btn-group">  
                        <button type="button" class="roster-btn role-@ubr.RoleName section-@usersBySection.SectionNumber btn@(firstRole ? " btn-primary" : "")" onclick="RosterPillButtonPressed('@ubr.RoleName' , @usersBySection.SectionNumber )">
                            @ubr.RoleName
                        </button>
                    </div>
            
                    if (firstRole)
                    {
                        firstRole = false;
                    }
                }
            }
        </div>
    
        <table class="roster_table">
            <tr>
                @foreach (RosterController.UsersByRole userByRole in usersBySection.UsersByRole)
                {
                    //yc: going to need to add a check for users with editing privlidges on this portion too
                    //the only person who should see the white list is instructors and ta's. TA's cannot modify
                    if (userByRole.RoleName == "Withdrawn" && ViewBag.WhiteTableUsers.Count != 0)
                    { 
                    <td class="role-Withdrawn section-@usersBySection.SectionNumber">
                        <!--Prints the users in the whitetable for the current class-->
                
                        @if (whitelistFlag) //only want to display white list one time.
                        {
                            <h3>
                                Whitelisted(<span id="roleheader_@(usersBySection.SectionNumber)_whitetable">@ViewBag.WhiteTableUsers.Count.ToString()</span>)
                                @if (ViewBag.ActiveCourse.AbstractRole.CanModify)
                                {
                                    <a title="Clear All Whitelisted Users" href="@Url.Action("BatchClearWhiteTable", "Roster")">@Helpers.DeleteButton()</a>
                                    <a title="Resend Invitation Email" href="@Url.Action("BatchEmailWhiteTable", "Roster")">@Helpers.MailButton()</a>
                                }
                                @Helpers.CreateToolTip(ToolTips.RosterWhitetableRoleRole)
                            </h3>

                            <ul class="user_list">
                                @foreach (var WTuser in ViewBag.WhiteTableUsers)
                                {
                                    if (WTuser.Email != String.Empty && WTuser.Email != null)
                                    {
                                        <li id="wtuser_item_@WTuser.ID">
                                            <div class="user_controls">
                                                <a title="Send Course Invitation Email" href="@Url.Action("resendWhiteTableEmail", "Roster", new { wtUserId = WTuser.ID })">@Helpers.MailButton()</a>

                                                @if (ViewBag.ActiveCourse.AbstractRole.CanModify)
                                                {
                                                    <a title="Modify This User" href="@Url.Action("EditWTUser", "Roster", new { wtuID = WTuser.ID })">@Helpers.EditButton()</a>
                                                    <a title="Delete This User" href="@Url.Action("DeleteWTUser", "Roster", new { wtuID = WTuser.ID })">@Helpers.DeleteButton()</a>
                                                }
                                            </div>
                                            @* Whitelisted users do not have an osble account and therefore cannot have a profile picture yet! *@
                                            @Helpers.SmallProfilePicture(@Url.Action("ProfilePicture", new { userProfile = -1 }))
                                            <span>@WTuser.Name1 @WTuser.Name2 </span>
                                        </li>
                                    }

                                    else if (WTuser.Email == String.Empty || WTuser.Email == null)
                                    {
                                        <li class="wt_no_email">
                                            <div class="user_controls">
                                                @if (ViewBag.ActiveCourse.AbstractRole.CanModify)
                                                {
                                                    <a title="Modify This User" href="@Url.Action("EditWTUser", "Roster", new { wtuID = WTuser.ID })">@Helpers.EditButton()</a>
                                                    <a title="Delete This User" href="@Url.Action("DeleteWTUser", "Roster", new { wtuID = WTuser.ID })">@Helpers.DeleteButton()</a>
                                                }
                                            </div>
                                            @* Whitelisted users do not have an osble account and therefore cannot have a profile picture yet! *@
                                            @Helpers.SmallProfilePicture(@Url.Action("ProfilePicture", new { userProfile = -1 }))
                                            <span>@WTuser.Name1 @WTuser.Name2</span>
                                        </li>
                                    }
                                }
                            </ul>
                            whitelistFlag = false; //only display this one time.
                        }              
                    </td>
                    }
                    if (userByRole.Count > 0 && userByRole.RoleName != "Pending")
                    {  
                    <td class="role-@userByRole.RoleName section-@usersBySection.SectionNumber">
                        <h3 id="sectionRoleHeader">
                            @userByRole.RoleName (<span id="roleheader_@(usersBySection.SectionNumber)_@(userByRole.RoleName)">@userByRole.Count.ToString()</span>)
                            @if (userByRole.RoleName == "Student" && ViewBag.ActiveCourse.AbstractRole.CanModify)
                            {
                                //<span id="withdrawAllStudents"><a title="Withdraw All Students" href="@Url.Action("BatchWithdraw", "Roster")">@Helpers.WithdrawButton()</a></span>

                            }
                            else if (userByRole.RoleName == "Withdrawn" && ViewBag.ActiveCourse.AbstractRole.CanModify)
                            {
                                @*<span id="deleteAllWithdrawnStudents">
                                    <a href="@Url.Action("BatchDeleteWithdrawn", "Roster")" title=" delete all withdrawn users">@Helpers.DeleteButton()</a>
                                </span>*@
                            }
                            @try
                            {
                                @Helpers.CreateToolTip(ToolTips.RosterRolesDictionary[userByRole.RoleName]);
                            }
                            catch (KeyNotFoundException e)
                            {
                                @Helpers.CreateToolTip("Key not found: " + e);
                            }
                            <input type="checkbox" title="Check this box to select / deselect all users below" id="sectionRoleCheckAll" class="sectionRoleCheckBox" onchange="roleClicked(this)" section="@usersBySection.SectionNumber" style="width: 40px; height: 20px;" />
                        </h3> <!--Flag header area-->
                        <ul class="user_list">
                            @foreach (OSBLE.Models.Users.UserProfile user in userByRole.Users)
                            {
                                <li onclick="blockClicked(this)" id="user_item_@(user.ID)" class="UserLI" section="@usersBySection.SectionNumber">
                                    @if ((user != ViewBag.CurrentUser) || ViewBag.CanEditSelf == true)
                                    {
                                        <div class="user_controls">

                                           @if (userByRole.RoleName == "Withdrawn" && ViewBag.ActiveCourse.AbstractRole.CanModify)
                                           {
                                               <a title="Re-enroll as student" href="@Url.Action("ChangeWithdrawnToStudentRole", "Roster", new { userProfileID = user.ID })">@Helpers.EnrollButton()</a>
                                           }

                                            @if (user.UserName != null)
                                            {
                                                <a title="Mail This User" href="@Url.Action("CreateUserProfileId", "Mail", new { id = user.ID })">@Helpers.MailButton()</a>                                            
                                            }
                                            
                                            @if (ViewBag.ActiveCourse.AbstractRole.CanModify)
                                            {
                                                <a title="Modify This User" href="@Url.Action("Edit", "Roster", new { userProfileID = user.ID })">@Helpers.EditButton()</a>
                                                <form action="@Url.Action("Delete")"
                                    style="display: inline;"
                                    data-ajax="true"
                                    data-ajax-success="$('#user_item_@(user.ID)').hide('highlight',{},'slow',function(){
                                            $('#roleheader_@(usersBySection.SectionNumber)_@(userByRole.RoleName)').html(
                                                parseInt($('#roleheader_@(usersBySection.SectionNumber)_@(userByRole.RoleName)').html())-1);
                                                if(parseInt($('#roleheader_@(usersBySection.SectionNumber)_@(userByRole.RoleName)').html()) == 0) {
                                                    $(this).parent().parent().remove();
                                                }
                                            $(this).remove();
                                        });"
                                    data-ajax-confirm="Are you sure you want to remove this user from the course?"
                                    method="post">
                                                <input type="hidden" name="userProfileID" value="@user.ID" />
                                                @Helpers.DeleteSubmit("Remove This User")
                                                </form>
                                            
                                               if (userByRole.RoleName == "Student")
                                               {
                                                   <a title="Withdraw student" href="@Url.Action("ChangeStudentToWithdrawnRole", "Roster", new { userProfileID = user.ID })">@Helpers.WithdrawButton()</a>
                                               }
                                            }
                                        </div>
                                    }
                                    @Helpers.SmallProfilePicture(@Url.Action("ProfilePicture", new { userProfile = user.ID }))
                                    <span class="roster_name">@Helpers.DisplayFullNameOrPending(user)</span>
                                    <data id="userID" studentID="@user.ID"></data>
                                    <br />
                                    <input id="moveStudentBox" type="checkbox" style="visibility:hidden;" class="moveThisUser" />
                                    </li>                            
                            }
                        </ul>
                    </td>
                    }
                    
                    else if (userByRole.Count > 0 && userByRole.RoleName == "Pending")
                    {
                        <td class="role-@userByRole.RoleName section-@usersBySection.SectionNumber">
                            <h3>
                                @userByRole.RoleName (<span id="roleheader_@(usersBySection.SectionNumber)_@(userByRole.RoleName)">@userByRole.Count.ToString()</span> )
                                <a title="Approve ALL Pending Users" href="@Url.Action("BatchApprove", "Roster")">@Helpers.ThumbsUpButton()</a>
                                <a title="Deny ALL Pending Users" href="@Url.Action("BatchDeny", "Roster")">@Helpers.ThumbsDownButton()</a>
                                @try
                                {
                                    @Helpers.CreateToolTip(ToolTips.RosterRolesDictionary[userByRole.RoleName]);
                                }
                                catch (KeyNotFoundException e)
                                {
                                    @Helpers.CreateToolTip("Key not found: " + e);
                                }
                            </h3>
                            <ul class="user_list">
                                @foreach (OSBLE.Models.Users.UserProfile user in userByRole.Users)
                                {
                                    <li id="user_item_@(user.ID)">
                                        @if ((user != ViewBag.CurrentUser) || ViewBag.CanEditSelf == true)
                                        {
                                            <div class="user_controls">
                                                @if (ViewBag.ActiveCourse.AbstractRole.CanModify)
                                                {
                                                    <a title="Approve this User" href="@Url.Action("ApprovePending", "Roster", new { userId = user.ID })">@Helpers.ThumbsUpButton()</a>
                                                    <a title="Deny this User" href="@Url.Action("DenyPending", "Roster", new { userId = user.ID })">@Helpers.ThumbsDownButton()</a>
                                                }
                                            </div>
                                        }
                                        @Helpers.SmallProfilePicture(@Url.Action("ProfilePicture", new { userProfile = user.ID }))
                                        <span class="roster_name">@Helpers.DisplayFullNameOrPending(user)                                    
                                        </span>
                                    </li>
                                }
                            </ul>
                        </td>
                    }
                }            
            </tr>

        </table>
    </div>
    }
}