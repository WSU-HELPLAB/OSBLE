@* template for partials, need to pass models and create unique class name for each type of partial *@

@model List<OSBLE.Models.ViewModels.OSBLECommunityRecentActivtyViewModel>

@using OSBLE.Models

<style type="text/css">
    .recent-activity {
        width: 100%;
    }

        .recent-activity td {
            padding: 10px;
            border-bottom: inset;
        }

    .activity-header td {
        padding-left: 5px;
        padding-right: 5px;
        padding-top: 1px;
        padding-bottom: 1px;
        font-style: italic;
        font-weight: bold;
    }

    #RecentActivity {
        border: outset;
        border-width: 10px;
    }

    .recent-activity-header {
        text-align: center;
    }
</style>

<div id="RecentActivity" style="margin-top: 5px;">
    <table class="recent-activity">
        <thead>
            <tr>
                <th class="c-header-title portlet-header recent-activity-header" colspan="3">Recent Activty</th>
            </tr>
        </thead>
        <tbody>
            <tr class="activity-header">
                <td>
                    Time
                </td>
                <td>
                    Activty
                </td>
                <td>
                    Details
                </td>
            </tr>
            @foreach (var userEvent in Model)
            {
                <tr>
                    <td>
                        @userEvent.EventDate.ToString()
                    </td>

                    <td>
                        @{ string firstName = userEvent.User.Keys.First();}
                        <a href="@Url.Action("Index", "Profile", new { id = userEvent.User.Values.First(), area ="" })" target="_blank">
                            @firstName
                        </a>
                        @*TODO: redo the text*@
                        @switch (userEvent.Event.Keys.First())
                        {
                            case "AskForHelpEvent":
                                @: asked for help.
                            break;
                            case "ExceptionEvent":
                            @: had a runtime exception.
                            break;
                            case "FeedPostEvent":
                            @: made a post.
                            break;
                            case "HelpfulMarkGivenEvent":
                            @: marked a comment helpful.
                            break;
                            case "LogCommentEvent":
                            @: replied to a post.
                            break;
                            case "SubmitEvent":
                            @: submitted an assignment.
                            break;
                            default:
                            @: [unknown activity]
                            break;
                        }
                    </td>
                    <td>
                        <a title="Details" href="@Url.Action("Details", "Feed", new { id = userEvent.Event.Values.First() })" target="_blank">@Helpers.Info()</a>
                        @*TODO: add link to details page*@
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>