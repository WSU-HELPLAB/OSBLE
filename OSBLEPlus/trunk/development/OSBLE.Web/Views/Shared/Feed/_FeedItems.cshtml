@using OSBLE.Areas.AssignmentDetails.Models.HeaderBuilder
@using OSBLE.Models.Users
@using OSBLEPlus.Logic.DomainObjects.ActivityFeeds
@using OSBLE.Models.Courses;
@using OSBLE.Models;
@model List<AggregateFeedItem>
@{
    string additionalStyle = "";
    if (ViewBag.FeedItemStyle != null)
    {
        additionalStyle = ViewBag.FeedItemStyle;
    }
    UserProfile currentUser = ViewBag.CurrentUser;
    Dictionary<int, int> subscriptions = new Dictionary<int, int>();
    //foreach (EventLogSubscription log in currentUser.LogSubscriptions)
    //{
    //    subscriptions[log.LogId] = log.LogId;
    //}
}
@foreach (AggregateFeedItem item in Model)
{
    int lastLogId = item.Items.Select(m => m.Event.EventLogId).Max();
    List<int> eventLogIds = item.Items.Select(i => i.Event.EventLogId).ToList();
    bool isSubscribed = false;
    foreach (int logId in eventLogIds)
    {
        if (subscriptions.ContainsKey(logId) == true)
        {
            isSubscribed = true;
            break;
        }
    }
    
    //do we need to anonymize?
    if(item.IsAnonymous == true && currentUser.ID != item.Creator.ID)
    {
        item.Creator.FirstName = "A student";
        item.Creator.LastName = "";
        item.Creator.ID = -1;
    }
    
    <article id="feed-item-@lastLogId" data-id="@lastLogId" class="feed-item-single @additionalStyle">
        
        <div class="dp_post panel panel-default" >
            <div class="dp_post_header panel-heading">
                <img src="@Url.Action("Picture", "User", new { id = item.Creator.ID, size = 52 })" class="profile_picture" title="profile image" alt="profile image" />
                @*@if (item.HelpfulMarks > 0)
                {
                    @:<span class="helpful-marks">+@item.HelpfulMarks</span>
                }*@
                @if (isSubscribed)
                {
                    <img src="~/Content/icons/follow.png" alt="you are following this post" title="you are following this post" />
                } 

                <a class="display_name" href="@Url.Action("Index", "Profile", new { id = item.Creator.ID })">@item.Creator.FullName</a>
                <time class="utc-time feed-item-date"
                        datetime="@Helpers.DateAsUnixTime(item.MostRecentOccurance)"
                        data-original-date="@Helpers.RawDate(item.MostRecentOccurance)"
                        data-date-format="MM/DD/YYYY hh:mm A">
                    @item.MostRecentOccurance.ToString("MM/dd @ hh:mmtt") (UTC)
                </time> 

                @* Mail and Delete Buttons *@
                <div class="dp_tools">
                    @if (ViewBag.CurrentUser.ID != item.Creator.ID && !item.IsAnonymous)
                    {
                        <a title="Mail This User" href="@Url.Action("CreateUser", "Mail", new { id = item.Creator.ID })"><span class="glyphicon glyphicon-envelope"></span></a>
                    }
                    @if (ViewBag.CurrentUser.ID == item.Creator.ID || ViewBag.ActiveCourseUser.AbstractRole.CanModify)
                    {
                        @* TODO: Add delete functionality *@
                    }
                </div>
            </div>


            <div class="dp_content" >
                @{
string partialName = string.Format("Feed/_{0}", item.Items.First().Event.EventName.Replace(" ", String.Empty));
                }
                @Html.Partial(partialName, item)    
            </div>
            
            <div class="feed-item-comments panel-group" id="feed-item-comments-@lastLogId">
                @{
                    List<FeedItem> commentItems = new List<FeedItem>();
                    foreach (LogCommentEvent comment in item.Comments)
                    {
                        FeedItem fi = new FeedItem();
                        fi.Event = comment;
                        fi.Comments = new List<LogCommentEvent>();
                        commentItems.Add(fi);
                    }
                    if (commentItems.Count > 0)
                    {
                        @Html.Partial("Feed/_FeedItems", AggregateFeedItem.FromFeedItems(commentItems))
                    }
                }

            </div>

        @* Don't display footer for replies *@
        @if(item.FeedItemType.Replace(" ", "") != "LogCommentEvent")
        {
            <div class="feed-item-footer">               
                @* Note: Hidden by default. Only shows when user clicks reply *@
                @using (Ajax.BeginForm("PostComment", "Feed",
                    new AjaxOptions
                    {
                        HttpMethod = "POST",
                        UpdateTargetId = "activity_feed_content",
                        OnSuccess = "PostReplyComplete(" + lastLogId + ")",
                    },
                    new {
                        @class = "feed-reply-form",
                        id = "feed-reply-" + lastLogId,
                    }))
                {
                    <textarea name="response" id="feed-item-respond-@lastLogId" placeholder="Say something..." class="form-control"></textarea>
                    <input name="response-submit" class="btn btn-default btn-sm" type="submit" value="Send" />
                    <input name="response-cancel" class="btn btn-default btn-sm" type="reset" value="Cancel" onclick="HideReplyBox(@lastLogId)" />
                    <input name="logID" type="hidden" value="@lastLogId" />
                }
                
                
                <ul class="feed-item-links">
                    <li>
                        <a id="expand-comments-@lastLogId"
                           class="anchor-pointer"
                           onclick="expandComments('@lastLogId')">
                            <span id="expand-comments-text-@lastLogId">View</span> Conversation(<span data-bind="text: NumberOfComments">@item.Comments.Count</span>)
                        </a>
                    </li>
                    @{
                        int[] ids = item.Items.Select(i => i.Event.EventLogId).ToArray();
                        string idString = string.Join(",", ids);
                    }
                    <li><a href="@Url.Action("Details", "Feed", new { id = idString })">Details</a></li>

                    <li><a id="btn-reply-@lastLogId" onclick="ShowReplyBox(@lastLogId)" >Reply</a></li>

                </ul>

                @*<textarea name="response" id="feed-item-respond-@lastLogId" placeholder="Say something..." style="width:250px;"></textarea>
                <br />
                <input name="response-submit" type="button" value="Send" onclick="sendResponse(@lastLogId)" />*@
            </div>
            }
        </div>
</article>
}