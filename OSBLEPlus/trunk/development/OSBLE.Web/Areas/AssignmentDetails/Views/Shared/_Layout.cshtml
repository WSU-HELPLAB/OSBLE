@using OSBLE.Models.Assignments
@using OSBLE.Areas.AssignmentDetails.ViewModels
@using OSBLE.Models.Courses;
@using OSBLE.Resources
@using OSBLE.Controllers
@model AssignmentDetailsViewModel
@{
    ViewBag.Title = "Assignment Details";
    DynamicDictionary headerData = Model.HeaderBuilder.BuildHeader(Model.CurrentAssignment);
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<Assignment> assignmentList = new List<Assignment>();
        
}

@section Header
{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/json2.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/areas/AssignmentDetails/Content/js/Home.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/areas/AssignmentDetails/Content/css/Home.css")" type="text/css" rel="Stylesheet" />
<link href="@Url.Content("~/areas/AssignmentDetails/Content/css/Section.css")" type="text/css" rel="Stylesheet" />
    @RenderSection("Header", false)
}
<h1>@Model.CurrentAssignment.AssignmentName.ToFirstCharUpper()

</h1>

<script type="text/javascript">

    $(document).ready(function () {
        $('#changeAssignment').change(function () {
            var assignmentNumber = $('#changeAssignment').val();
            window.location.replace("/AssignmentDetails/" + assignmentNumber);

        });

        $("[id^='annotateId']").click(function (data) {
            var idString = $(this).prop("class");
            forceRefreshAnnotateDialog(idString);
        });
    });

    function forceRefreshAnnotateDialog(idString) {
        
        $("#dialog-confirm").html("Are you sure?<br/><br/><strong>ALL previous annotations for this document will be lost!</strong>  <br/><br/> This will refresh the document to the latest submitted file.");
        $("#dialog-confirm").css("text-align", "center");


        // Define the Dialog and its properties.
        $("#dialog-confirm").dialog({
            resizable: false,
            modal: true,
            title: "Force refresh document.",
            height: 300,
            width: 350,
            buttons: {
                "Yes": function () {
                    $(this).dialog('close');
                    callback(idString);
                },
                "No": function () {
                    $(this).dialog('close');
                    //callback(false);
                }
            }
        });
    }

    function callback(idString) {

        var id = idString.split('_');
        var assignmentId = id[1];
        var teamId = id[2];

        $.ajax({
            type: 'GET',
            url: '@Url.Action("GetSubmissionZip", "FileHandler", new { area = "" })',
            data: {assignmentID: assignmentId, teamID: teamId, resubmission: true},
            
            success: function (result) {
                alert("Document Refreshed.");

            },
            error: function (result) {
                alert("Refresh failed...");
            }
        });
        
    }
</script>

@*If student, then remove all assignments that have not been published from the assignment list
  If a moderator, remove all assignments as its hard to distinguish which should be available
*@
@if (Model.Client.AbstractRole.CanSubmit)
{
    assignmentList = assignmentList.Where(a => a.IsDraft == false).ToList();
}
else if(Model.Client.AbstractRoleID == (int)CourseRole.CourseRoles.Moderator)
{
    assignmentList = null;
}
else
{
    assignmentList = (Model.Client.AbstractCourse as Course).Assignments.OrderBy(a => a.AssignmentName).ToList();
}

@if (assignmentList != null && assignmentList.Count > 1)
{
    <table>
            <tr>
                <th>Select Assignment:</th>
                <td>                    
                    <select id="changeAssignment">
                        @foreach (Assignment assignment in assignmentList)
                        {
                            
                            @*generating select box*@
                            string optionText = "<option value=\"{0}\"{1}>{2}</option>";
                            string selectValue = "";
                            if (Model.CurrentAssignment.ID == assignment.ID)
                            {
                                selectValue = "selected=\"selected\"";
                            }
                            @Html.Raw(String.Format(optionText, assignment.ID, selectValue, assignment.AssignmentName));
                            
                        }
                    </select>
                </td>
            </tr>
        </table>
}

@if (Model.Client.AbstractRole.CanModify)
{
    <ul id="AssignmentLinksList">
        <li>
            @{string actionUrl = Url.Action(
                                    "ToggleDraft",
                                    "Home",
                                    new
                                    {
                                        assignmentId = Model.CurrentAssignment.ID
                                    }
                                   );
              string linkTitle = "Unpublish Assignment";
              HelperResult linkImg = Helpers.UnPublishButton();
            }
            @if (Model.CurrentAssignment.IsDraft == true)
            {
                linkTitle = "Publish Assignment";
                linkImg = Helpers.PublishButton();
            }
            <a href="@actionUrl" title="@linkTitle">@Html.Raw(linkImg.ToHtmlString())</a>
        </li>
            <li><a title="Click to Edit" href="@Url.Action("Index", "Home", new { area = "AssignmentWizard", assignmentId = Model.CurrentAssignment.ID })">@Helpers.EditButton()</a>
            </li>
        <li>
            @{
            string deleteLink = Url.Action("DeleteAssignment", new { assignmentId = Model.CurrentAssignment.ID });
            }
            <a 
        id="DeleteAssignmentLink"
        title="Click to Delete" 
        class="pointerOnMouseOver" 
        href="@deleteLink"
        >@Helpers.DeleteButton()</a> </li>
    </ul>
}
<table id="AssignmentDetailsTable">
    <tr id="AssignmentDetailsTableFirstRow">
        <th>
            Description:
        </th>
        <td>
            @Html.Raw(HttpUtility.HtmlDecode(Helpers.WikiUrlLinking(Model.CurrentAssignment.AssignmentDescription).ToString()))
            @{
                // Put in links to the assignment description file(s)
                if (!string.IsNullOrEmpty(ViewBag.DescFilesHTML))
                {
                    @Html.Raw(ViewBag.DescFilesHTML);   
                }
            }
        </td>
    </tr>
    @* Check for solution files *@
    @{if (!string.IsNullOrEmpty(ViewBag.SoluFilesHTML))
      {
          <tr>
              <th>
                  Solution:
              </th>
              <td>
                  @Html.Raw(ViewBag.SoluFilesHTML)
              </td>
          </tr>
      }
    }
    <tr>
        <th>
            Type:
        </th>
        <td>@Model.CurrentAssignment.Type.Explode()
        </td>
    </tr>
    <tr>
        <th>
            Released:
        </th>
            <td>
                     <time 
                class="utc-time"
                datetime="@Helpers.DateAsUnixTime(Model.CurrentAssignment.ReleaseDate)" 
                data-original-date="@Helpers.RawDate(Model.CurrentAssignment.ReleaseDate)" 
                data-date-format="MM/DD/YYYY hh:mm A">
                @Model.CurrentAssignment.ReleaseDate.ToShortDateString() @Model.CurrentAssignment.ReleaseDate.ToShortTimeString() (UTC)
                         </time>
            </td>
    </tr>
    @RenderSection("AssignmentDetails", true)
</table>

@if (Model.Client.AbstractRole.CanGrade) //if the viewer can grade this assignment, show the assignments by users
{
    // There will (potentially) be ABET options in the table that need to
    // be within a form so that they can be saved.
    using (Html.BeginForm("SaveABET", "Home", FormMethod.Post, new { style = "padding-bottom: 15px;" }))
    {
        <input type="hidden" name="hdnCourseID" value="@Model.CurrentAssignment.CourseID.Value" />
        <input type="hidden" name="hdnAssignmentID" value="@Model.CurrentAssignment.ID" />
             
                <h1>
                    Students
                </h1>    

                <table id="StudentsTable">
                <tr>
                    @* If it's an anchored discussion assignment we don't have anything to put here *@
                    @if (Model.CurrentAssignment.Type != AssignmentTypes.AnchoredDiscussion)
                    {
                        <th>
                            Name
                        </th>
                    }

                    <!--Build the column headers-->
                    @foreach (string key in Model.TableColumnHeaders.Keys) //build the columns for the student table.
                    {
                        <th>
                            @Model.TableColumnHeaders[key]

                        </th>
                    }
                </tr>
                <!-- Starting of Row population -->
            
                    @RenderSection("TableData", false)
            </table>
        
                    if (null != Model.CurrentAssignment.ABETDepartment)
                    {
                <!-- Button to save changes to ABET stuff -->
                <br />
                <input type="submit" value="Save" />
                    }
        <!--Element for modal confirmation box-->
        <div id="confirmDeleteWindow" style="display: none;" title="Delete Assignment">
            <div id="confirmForm">
                Are you sure you want to delete this assignment?
                @using (Html.BeginForm("DeleteAssignment", "Home", new { assignmentId = Model.CurrentAssignment.ID }, FormMethod.Post))
                {
                    <div class="yesAndNoDiv">
                        <input value="Delete" type="submit" />
                        <input value="Cancel" type="button" onclick="hideConfirmDeleteWindow()" />
                    </div>
                }
            </div>
        </div>
    }
}

else
{
    //AC: should never use, but required by MVC3 to render
    <text>@RenderSection("TableData", false)</text>
}