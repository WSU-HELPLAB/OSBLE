@using OSBLE.Models.Assignments
@using OSBLE.Areas.AssignmentDetails.ViewModels
@using OSBLE.Models.Courses;
@using OSBLE.Resources
@model AssignmentDetailsViewModel
@{
    ViewBag.Title = "Assignment Details";
    DynamicDictionary headerData = Model.HeaderBuilder.BuildHeader(Model.CurrentAssignment);
    
}

@section AssignmentDetails
{
    <tr>
        <th>
            Due:
        </th>
        <td>
            <time 
                class="utc-time"
                datetime="@Helpers.DateAsUnixTime(Model.CurrentAssignment.DueDate)" 
                data-original-date="@Helpers.RawDate(Model.CurrentAssignment.DueDate)" 
                data-date-format="MM/DD/YYYY hh:mm A">
                @Model.CurrentAssignment.DueDate.ToShortDateString() @Model.CurrentAssignment.DueDate.ToShortTimeString() (UTC)
            </time>
        </td>
    </tr>
    @foreach (string view in Model.HeaderViews)
    {
        string viewLocation = string.Format("HeaderBuilder/{0}", view);
        @Html.Partial(viewLocation, headerData);
    }
}
@section TableData
{
    @if (Model.Client.AbstractRole.CanGrade)
    {
        bool altRow = false;

        var teams = from pair in Model.TeamTableBuilders
                    orderby pair.Key.Team.TeamMembers.FirstOrDefault().CourseUser.Section ascending
                    select pair.Key;

        HashSet<int> sections = new HashSet<int>(); //This hash set is to get all of the sections for this assignment
        HashSet<IAssignmentTeam> CrossSectionTeam = new HashSet<IAssignmentTeam>();

        foreach (IAssignmentTeam assignmentTeam in teams) //iterate through all sections and add them to hash set
        {
            sections.Add(assignmentTeam.Team.TeamMembers.FirstOrDefault().CourseUser.Section);
        }

        teams = from pair in Model.TeamTableBuilders
                orderby pair.Key.Team.Name ascending
                select pair.Key;


        //this bool is to determine whether or not there needs to be a row with a section header.
        bool sectionBool = false;

        //check if all teams are cross section teams.
        bool onlyCross = true;
        
        //only show sections if there are more than 1 section
        bool showSections = false;
        
        if (sections.Count > 1)
        {
            showSections = true;
        }

        foreach (int section in sections)
        {
            sectionBool = false;

            foreach (IAssignmentTeam assignmentTeam in teams)
            {
                if (assignmentTeam.Team.TeamMembers.FirstOrDefault().CourseUser.Section != section) //assumes all teams are grouped by section
                {
                    continue;
                }

                //if the team has multiple students
                if (assignmentTeam.Team.TeamMembers.Count() > 1)
                {
                    //Make sure all team members are on the same team.
                    int temp;
                    bool flagCheck;
                    temp = assignmentTeam.Team.TeamMembers.FirstOrDefault().CourseUser.Section;
                    flagCheck = false;

                    foreach (TeamMember tm in assignmentTeam.Team.TeamMembers)
                    {
                        if (tm.CourseUser.Section != temp)
                        {
                            flagCheck = true;
                            break;
                        }
                    }

                    if (flagCheck)
                    {
                        CrossSectionTeam.Add(assignmentTeam);
                        continue;
                    }

                    if ( (!sectionBool) && showSections) //if not displayed yet, and sections are allowed to be displayed
                    {
                        <tr class="SectionRow">
                            <th class="Student" colspan= "1">
                                Section: @Html.Raw(section)
                            </th>

                            <td colspan="5">
                                @Html.ActionLink("[Download Section Submissions]", "GetAllSubmissionsForAssignment", "FileHandler", new { assignmentID = Model.CurrentAssignment.ID, downloadSection = section, area = "" }, new { onclick = "create_and_open_downloading_submission_dialog()", style = "text-decoration:none" })
                            </td>
                        </tr>
        
                        sectionBool = true;                        
                    }                

                    <tr class="TeamHeader">
                        <th colspan="6">
                            @{string actionLink = Url.Action("CreateTeam", "Mail", new { area = "", teamID = assignmentTeam.Team.ID });
                            }
                            <a href="@actionLink" title="Email this team" >@Helpers.MailButton()</a>
                            @assignmentTeam.Team.Name
                        </th>
                    </tr>

                }

                if ((!sectionBool) && showSections) //if not displayed yet, and sections are allowed to be displayed 
                                                    //Must have twice here in case there are only 1 person teams
                {
                    <tr class="SectionRow">
                        <th class="Student" colspan="1">
                            Section: @Html.Raw(section)
                        </th>

                        <td colspan="5">
                            @Html.ActionLink("[Download Section Submissions]", "GetAllSubmissionsForAssignment", "FileHandler", new { assignmentID = Model.CurrentAssignment.ID, downloadSection = section, area = "" }, new { onclick = "create_and_open_downloading_submission_dialog()", style = "text-decoration:none" })
                        </td>
                    </tr>

                    sectionBool = true;
                }

                //if you reach here, the page is displaying at least one team that is not cross section
                onlyCross = false;
                    <tr>
                        <th class="StudentName">
                            <lu>
                                @foreach (TeamMember tm in assignmentTeam.Team.TeamMembers.OrderBy(t => t.CourseUser.DisplayName(Model.Client.AbstractRoleID, false)).ToList())
                                {
                                    <li id="ReviewsItems">
                                        @{string actionLink = Url.Action("CreateUser", "Mail", new { area = "", id = tm.CourseUser.UserProfileID });
                                          }
                                        <a href="@actionLink" title="Email this user">@Helpers.MailButton()</a>
                        
                                        @tm.CourseUser.DisplayName(Model.Client.AbstractRoleID, false)
                                    </li>
                                }
                            </lu>
                        </th>
                        @foreach (string view in Model.TableColumnHeaders.Keys)
                        {
                            DynamicDictionary tableData = Model.TeamTableBuilders[assignmentTeam].BuildTableForTeam(assignmentTeam);
                            string viewLocation = string.Format("TableBuilder/{0}", view);
                            @Html.Partial(viewLocation, tableData);
                        }
                    </tr>
            }
        }
        
        //if the assignment has teams that are cross section
        if ((CrossSectionTeam.Count > 0) && (! onlyCross))
        {
            <tr class="SectionRow">
                <th class="Student" colspan="1">
                    Cross Section Teams:
                </th>
                <td colspan="2">
                    @Html.ActionLink("[Download Cross-Section Submissions]", "GetAllSubmissionsForCrossSections", "FileHandler", new { assignmentID = Model.CurrentAssignment.ID, area = "" }, new { onclick = "create_and_open_downloading_submission_dialog()", style = "text-decoration:none" })
                </td>
            </tr>
        }

        foreach (IAssignmentTeam assignmentTeam in CrossSectionTeam)
        {       
            //if the team has multiple students
            if (assignmentTeam.Team.TeamMembers.Count() > 1)
            {
                <tr class="TeamHeader">
                    <th colspan="6">
                        @{string actionLink = Url.Action("CreateTeam", "Mail", new { area = "", teamID = assignmentTeam.Team.ID });
                        }
                        <a href="@actionLink" title="Email this team">@Helpers.MailButton()</a>
                        @assignmentTeam.Team.Name
                    </th>

                    
                </tr>

            }
            <tr>
                <th class="StudentName">
                    <lu>
                        @foreach (TeamMember tm in assignmentTeam.Team.TeamMembers.OrderBy(t => t.CourseUser.DisplayName(Model.Client.AbstractRoleID, false)).ToList())
                        {
                            <li id="ReviewsItems">
                                @{string actionLink = Url.Action("CreateUser", "Mail", new { area = "", id = tm.CourseUser.UserProfileID });
                                }
                                <a href="@actionLink" title="Email this user">@Helpers.MailButton()</a>

                                @tm.CourseUser.DisplayName(Model.Client.AbstractRoleID, false)
                            </li>
                        }
                    </lu>
                </th>
                @foreach (string view in Model.TableColumnHeaders.Keys)
                {
                    DynamicDictionary tableData = Model.TeamTableBuilders[assignmentTeam].BuildTableForTeam(assignmentTeam);
                    string viewLocation = string.Format("TableBuilder/{0}", view);
                    @Html.Partial(viewLocation, tableData);
                }
            </tr>
        }
    }
}
} 
