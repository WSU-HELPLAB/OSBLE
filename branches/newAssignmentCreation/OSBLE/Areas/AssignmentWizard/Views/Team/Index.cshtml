@using OSBLE.Models.Courses;
@using OSBLE.Models.Assignments;
@using System.Collections.Generic;
@using OSBLE.Models;
@model Assignment          
@{
    List<CourseUsers> unassignedUsers = ViewBag.UnassignedUsers;
    List<AssignmentTeam> teams = ViewBag.Teams;
    
    ViewBag.Title = "Assignment Creation Wizard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Html.Partial("_WizardTopNav")
<style type="text/css">
    #AvailableStudentList
    {
        float:left;
        width:200px;
        padding-top:15px;
        padding-right:15px;
        border-right:1px solid #CFCFCF;
    }
    
    .NoDecoration
    {
        text-decoration: none;
    }
    
    #CreateTeamLink
    {
        cursor:pointer;
    }
    
    .RemoveTeamIcon
    {
        cursor:pointer;
    }
    
    #TeamCreationOptions
    {
        margin-top:25px;
    }
    
    .TeamDiv
    {
        float:left;
        margin:8px;
        padding:8px;
        width:200px;
        border:1px solid #EEF;
        border-bottom:3px solid #EEF;

    }
    
    #TeamsDiv
    {
        float:left;
        width:800px;
        padding-top:15px;
        padding-left:15px;
    }
    
    .TeamSortable
    {
        min-height:25px;
        cursor:pointer;
    }
    
    .TeamNameTextBox
    {
        border:none;
        width:175px;
        font-weight:bold;
    }
    
    .ui-state-default
    {
        padding:3px;
        margin-top:2px;
        margin-bottom:2px;
    }
    
    #WizardContent ul
    {
        list-style:none;
        margin:0;
        padding:0;
    }
    
</style>
<h1>
    Team Settings</h1>
<p>
    @Html.Raw(ToolTips.BasicAssignmentIsTeam)
</p>
@using (@Html.BeginForm())
{
    @Html.ValidationSummary()     
    <div>
    <h3>Auto Generation Options</h3>
    <ul>
        <li>
            Create a layout with <input type="text" id="AutoGenByStudentTextBox" size="3" /> students per team
            <button type="button" id="AutoGenByStudentButton" onclick="generateTeamsByNumberOfStudents()">Go</button>
        </li>
        <li>
            Create a layout with <input type="text" id="AutoGenByteamTextBox" size="3" /> total teams
            <button type="button" id="AutoGenByTeamButton">Go</button>
        </li>
        <li>
            Use a layout from the previous assignment: 
            <select id="AutoGenFromPastSelect">
            </select>
            <button type="button" id="AutoGenFromPastButton">Go</button>
        </li>
    </ul>
    </div>
    <div id="TeamCreationOptions">
        <a id="CreateTeamLink" class="NoDecoration">
            <img src="@Url.Content("~/Content/images/add_up.png")" alt="Create New Team" title="Create New Team" />
            Create New Team </a>
    </div>
    
    <div id="AvailableStudentList">
        <h3>
            Unassigned Students</h3>
        <ul id="AvailableStudent" class="TeamSortable">
            @foreach (CourseUsers cu in unassignedUsers)
            {
                <li id="cu_@(cu.ID)" class="ui-state-default">@cu.UserProfile.LastName, @cu.UserProfile.FirstName</li>
            }
        </ul>
    </div>
    
    <div id="TeamsDiv">
        <h3>Teams</h3>
    </div>
    
    
    @Html.Partial("_WizardBottomNav");
}
<script type="text/javascript">
    $(document).ready(documentReady);

    //Called when the document has finished loading and is safe to make DOM calls
    function documentReady() {

        //set up sortable lists
        $("#AvailableStudent").sortable({ connectWith: ".TeamSortable" }).disableSelection();

        //various event listeners
        $("form").submit(processForm);
        $("#CreateTeamLink").click(createTeam);
        $("#CreateTeamLink").disableSelection();
    }

    //Right now, just a placehoder function that gets called when we try to postback
    function processForm(evt) {
        alert('hello');
    }

    //Used to give each new team a unique name (see createTeam function)
    var teamCounter = 1;

    //Creates a new team div and places it on the 
    function createTeam(evt, teamName) {
        var divId = "teamDiv_" + teamCounter;
        var listId = 'team_' + teamCounter;
        var InputContent = "Team " + teamCounter;
        if (teamName != undefined) {
            InputContent = teamName;
        }
        var newContent = '<div style="display:none;" id="' + divId + '" class="TeamDiv">' +
                            '<input type="text" class="TeamNameTextBox" value="' + InputContent + '" />' +
                            '<img class="RemoveTeamIcon" src="@Url.Content("~/Content/images/delete_up.png")" alt="remove team" title="remove team" onclick="removeTeam(\'' + divId + '\')" />' + 
                            '<ul id="' + listId + '" class="TeamSortable"></ul>' +
                         '</div>';
        if (teamCounter % 3 == 0) {
            newContent += '<div style="clear:both;"></div>';
        }
        $("#TeamsDiv").append(newContent);
        $("#" + listId).sortable({ connectWith: ".TeamSortable" }).disableSelection();
        $("#" + divId).fadeIn('slow');
        teamCounter++;
        return divId;
    }

    //Resets the page to its null state:
    //      clears all teams that have been created
    //      returns all students to the available students pool
    //      resets the teamCounter variable back to 1
    //      removes all HTML in TeamsDiv
    function clearAllTeams(callback) {

        //find all teams and remove them
        var allTeams = $("#TeamsDiv").find('div');
        allTeams.each(function (index) {
            var id = $(this).context.id;
            if (id != undefined && id != "") {
                removeTeam(id);
            }
            else {
                $(this).remove();
            }
        });

        //reset the team counter
        teamCounter = 1;

    }

    //Auto generates a team configuration doing its best to create teams using
    //the size stored inside the "AutoGenByStudentTextBox"    
    function generateTeamsByNumberOfStudents() {
        var studentsPerTeam = $('#AutoGenByStudentTextBox').val();

        //clear out any pre-existing layout
        clearAllTeams();

        //create the appropriate number of teams needed
        var numStudents = $('#AvailableStudentList').find('li').length;
        var numTeams = Math.floor(numStudents / studentsPerTeam);
        for (var i = 0; i < numTeams; i++) {
            createTeam(undefined, undefined);
        }

        //randomly add students to each team
        var allTeams = $("#TeamsDiv").find('div');
        for(var i = 0; i < $('#AvailableStudentList').find('li').length; i++){

            //find the team with the smallest number of students
            var smallestTeamId = 0;
            var smallestTeamSize = 0;
            allTeams.each(function (index) {
                var id = $(this).context.id;
                if (id != undefined && id != "") {
                    var size = $(this).find('li').length;
                    if (smallestTeamSize >= size) {
                        smallestTeamSize = size;
                        smallestTeamId = $(this).find('ul')[0].id;
                    }
                }
            });

            //pick a random student
            var index = Math.floor(Math.random() * ($('#AvailableStudentList').find('li').length - 1));
            addStudentToTeam($('#AvailableStudentList').find('li')[index].id, smallestTeamId);
        }
    }

    //Adds a student (li element's ID, ex: "cu_1") 
    //to the supplied team list (ul element's ID, ex "team_1")
    function addStudentToTeam(studentId, teamId) {
        $("#" + studentId).slideUp('slow', function () {
            $('#' + teamId).append($("#" + studentId));
            $("#" + studentId).slideDown('slow');
        });
    }

    //Called when the user clicks the remove button on a particular team div
    function removeTeam(teamId) {
        $('#' + teamId).slideUp('slow', hideTeamComplete);
    }

    //Called after removeTeam().  Places any students that were on the removed team
    //back into the pool of available students.
    function hideTeamComplete() {
        jQuery(this).find("li").css("display", "none");
        $("#AvailableStudent").append(jQuery(this).find("li"));
        $("#AvailableStudent").find(':hidden').slideDown('slow');
        $(this).remove();
    }

</script>
