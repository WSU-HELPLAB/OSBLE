//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace FileUploader.OsbleServices {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OsbleSyncInfo", Namespace="http://schemas.datacontract.org/2004/07/FileUploader.Web")]
    public partial class OsbleSyncInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FileNameField;
        
        private System.DateTime LastModifiedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModified {
            get {
                return this.LastModifiedField;
            }
            set {
                if ((this.LastModifiedField.Equals(value) != true)) {
                    this.LastModifiedField = value;
                    this.RaisePropertyChanged("LastModified");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="OsbleServices.FileSyncService")]
    public interface FileSyncService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileSyncService/GetFileList", ReplyAction="urn:FileSyncService/GetFileListResponse")]
        System.IAsyncResult BeginGetFileList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.OsbleSyncInfo> EndGetFileList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileSyncService/GetFileUrl", ReplyAction="urn:FileSyncService/GetFileUrlResponse")]
        System.IAsyncResult BeginGetFileUrl(string fileName, System.AsyncCallback callback, object asyncState);
        
        string EndGetFileUrl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileSyncService/SyncFile", ReplyAction="urn:FileSyncService/SyncFileResponse")]
        System.IAsyncResult BeginSyncFile(string fileName, byte[] data, System.AsyncCallback callback, object asyncState);
        
        void EndSyncFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileSyncService/createDir", ReplyAction="urn:FileSyncService/createDirResponse")]
        System.IAsyncResult BegincreateDir(string folderName, System.AsyncCallback callback, object asyncState);
        
        void EndcreateDir(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileSyncServiceChannel : FileUploader.OsbleServices.FileSyncService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.OsbleSyncInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.OsbleSyncInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileSyncServiceClient : System.ServiceModel.ClientBase<FileUploader.OsbleServices.FileSyncService>, FileUploader.OsbleServices.FileSyncService {
        
        private BeginOperationDelegate onBeginGetFileListDelegate;
        
        private EndOperationDelegate onEndGetFileListDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileUrlDelegate;
        
        private EndOperationDelegate onEndGetFileUrlDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginSyncFileDelegate;
        
        private EndOperationDelegate onEndSyncFileDelegate;
        
        private System.Threading.SendOrPostCallback onSyncFileCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateDirDelegate;
        
        private EndOperationDelegate onEndcreateDirDelegate;
        
        private System.Threading.SendOrPostCallback oncreateDirCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FileSyncServiceClient() {
        }
        
        public FileSyncServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileSyncServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileSyncServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileSyncServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetFileListCompletedEventArgs> GetFileListCompleted;
        
        public event System.EventHandler<GetFileUrlCompletedEventArgs> GetFileUrlCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SyncFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> createDirCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.FileSyncService.BeginGetFileList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.OsbleSyncInfo> FileUploader.OsbleServices.FileSyncService.EndGetFileList(System.IAsyncResult result) {
            return base.Channel.EndGetFileList(result);
        }
        
        private System.IAsyncResult OnBeginGetFileList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((FileUploader.OsbleServices.FileSyncService)(this)).BeginGetFileList(callback, asyncState);
        }
        
        private object[] OnEndGetFileList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.OsbleSyncInfo> retVal = ((FileUploader.OsbleServices.FileSyncService)(this)).EndGetFileList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileListCompleted(object state) {
            if ((this.GetFileListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileListCompleted(this, new GetFileListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileListAsync() {
            this.GetFileListAsync(null);
        }
        
        public void GetFileListAsync(object userState) {
            if ((this.onBeginGetFileListDelegate == null)) {
                this.onBeginGetFileListDelegate = new BeginOperationDelegate(this.OnBeginGetFileList);
            }
            if ((this.onEndGetFileListDelegate == null)) {
                this.onEndGetFileListDelegate = new EndOperationDelegate(this.OnEndGetFileList);
            }
            if ((this.onGetFileListCompletedDelegate == null)) {
                this.onGetFileListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileListCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileListDelegate, null, this.onEndGetFileListDelegate, this.onGetFileListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.FileSyncService.BeginGetFileUrl(string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileUrl(fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string FileUploader.OsbleServices.FileSyncService.EndGetFileUrl(System.IAsyncResult result) {
            return base.Channel.EndGetFileUrl(result);
        }
        
        private System.IAsyncResult OnBeginGetFileUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            return ((FileUploader.OsbleServices.FileSyncService)(this)).BeginGetFileUrl(fileName, callback, asyncState);
        }
        
        private object[] OnEndGetFileUrl(System.IAsyncResult result) {
            string retVal = ((FileUploader.OsbleServices.FileSyncService)(this)).EndGetFileUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileUrlCompleted(object state) {
            if ((this.GetFileUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileUrlCompleted(this, new GetFileUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileUrlAsync(string fileName) {
            this.GetFileUrlAsync(fileName, null);
        }
        
        public void GetFileUrlAsync(string fileName, object userState) {
            if ((this.onBeginGetFileUrlDelegate == null)) {
                this.onBeginGetFileUrlDelegate = new BeginOperationDelegate(this.OnBeginGetFileUrl);
            }
            if ((this.onEndGetFileUrlDelegate == null)) {
                this.onEndGetFileUrlDelegate = new EndOperationDelegate(this.OnEndGetFileUrl);
            }
            if ((this.onGetFileUrlCompletedDelegate == null)) {
                this.onGetFileUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileUrlCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileUrlDelegate, new object[] {
                        fileName}, this.onEndGetFileUrlDelegate, this.onGetFileUrlCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.FileSyncService.BeginSyncFile(string fileName, byte[] data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSyncFile(fileName, data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void FileUploader.OsbleServices.FileSyncService.EndSyncFile(System.IAsyncResult result) {
            base.Channel.EndSyncFile(result);
        }
        
        private System.IAsyncResult OnBeginSyncFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            byte[] data = ((byte[])(inValues[1]));
            return ((FileUploader.OsbleServices.FileSyncService)(this)).BeginSyncFile(fileName, data, callback, asyncState);
        }
        
        private object[] OnEndSyncFile(System.IAsyncResult result) {
            ((FileUploader.OsbleServices.FileSyncService)(this)).EndSyncFile(result);
            return null;
        }
        
        private void OnSyncFileCompleted(object state) {
            if ((this.SyncFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SyncFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SyncFileAsync(string fileName, byte[] data) {
            this.SyncFileAsync(fileName, data, null);
        }
        
        public void SyncFileAsync(string fileName, byte[] data, object userState) {
            if ((this.onBeginSyncFileDelegate == null)) {
                this.onBeginSyncFileDelegate = new BeginOperationDelegate(this.OnBeginSyncFile);
            }
            if ((this.onEndSyncFileDelegate == null)) {
                this.onEndSyncFileDelegate = new EndOperationDelegate(this.OnEndSyncFile);
            }
            if ((this.onSyncFileCompletedDelegate == null)) {
                this.onSyncFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSyncFileCompleted);
            }
            base.InvokeAsync(this.onBeginSyncFileDelegate, new object[] {
                        fileName,
                        data}, this.onEndSyncFileDelegate, this.onSyncFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.FileSyncService.BegincreateDir(string folderName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateDir(folderName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void FileUploader.OsbleServices.FileSyncService.EndcreateDir(System.IAsyncResult result) {
            base.Channel.EndcreateDir(result);
        }
        
        private System.IAsyncResult OnBegincreateDir(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string folderName = ((string)(inValues[0]));
            return ((FileUploader.OsbleServices.FileSyncService)(this)).BegincreateDir(folderName, callback, asyncState);
        }
        
        private object[] OnEndcreateDir(System.IAsyncResult result) {
            ((FileUploader.OsbleServices.FileSyncService)(this)).EndcreateDir(result);
            return null;
        }
        
        private void OncreateDirCompleted(object state) {
            if ((this.createDirCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createDirCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createDirAsync(string folderName) {
            this.createDirAsync(folderName, null);
        }
        
        public void createDirAsync(string folderName, object userState) {
            if ((this.onBegincreateDirDelegate == null)) {
                this.onBegincreateDirDelegate = new BeginOperationDelegate(this.OnBegincreateDir);
            }
            if ((this.onEndcreateDirDelegate == null)) {
                this.onEndcreateDirDelegate = new EndOperationDelegate(this.OnEndcreateDir);
            }
            if ((this.oncreateDirCompletedDelegate == null)) {
                this.oncreateDirCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateDirCompleted);
            }
            base.InvokeAsync(this.onBegincreateDirDelegate, new object[] {
                        folderName}, this.onEndcreateDirDelegate, this.oncreateDirCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override FileUploader.OsbleServices.FileSyncService CreateChannel() {
            return new FileSyncServiceClientChannel(this);
        }
        
        private class FileSyncServiceClientChannel : ChannelBase<FileUploader.OsbleServices.FileSyncService>, FileUploader.OsbleServices.FileSyncService {
            
            public FileSyncServiceClientChannel(System.ServiceModel.ClientBase<FileUploader.OsbleServices.FileSyncService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetFileList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFileList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.OsbleSyncInfo> EndGetFileList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.OsbleSyncInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.OsbleSyncInfo>)(base.EndInvoke("GetFileList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileUrl(string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("GetFileUrl", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetFileUrl(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetFileUrl", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSyncFile(string fileName, byte[] data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fileName;
                _args[1] = data;
                System.IAsyncResult _result = base.BeginInvoke("SyncFile", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSyncFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SyncFile", _args, result);
            }
            
            public System.IAsyncResult BegincreateDir(string folderName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = folderName;
                System.IAsyncResult _result = base.BeginInvoke("createDir", _args, callback, asyncState);
                return _result;
            }
            
            public void EndcreateDir(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("createDir", _args, result);
            }
        }
    }
}
