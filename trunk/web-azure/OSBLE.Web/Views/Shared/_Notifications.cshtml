@using OSBLE.Models.HomePage

@{
    bool courseFlag = true;
    bool communityFlag = true;
}


<ul id="notifications_list">


    @foreach (Notification n in ViewBag.Notifications)
    {
        if (n == null || n.Sender == null)
        {
            continue;
        }
        string classToAppend = "";
        if (n.Read)
        {
            classToAppend = "read";
        }
        //this javascript roght here is what is causeing all of the notifications with just the dates to be printed. I havn't figured out a way around it yet 
        <li class="notification @classToAppend" id="notification_@(n.ID)" >
            <time class="utc-time"
                style="font-size:small;"
                datetime="@Helpers.DateAsUnixTime(n.Posted)" 
                data-original-date="@Helpers.RawDate(n.Posted)" 
                data-date-format="MM/DD/YYYY hh:mm A"
                >
                @n.Posted.ToShortDateString() @n.Posted.ToShortTimeString() (UTC)</time>&nbsp;
            
            @if (ViewBag.ShowNotificationDelete == true)
            {
                <div class="notification_tools">
                    <form action="@Url.Action("MarkAsRead", "Notification", new { ID = @n.ID })"
                                style="display: inline;"
                                data-ajax="true"
                                data-ajax-success="$('#notification_@(n.ID)').hide('highlight',{},'slow',function(){
                                        $(this).remove();
                                    });"
                                method="post">
                    @Helpers.DeleteSubmit("Mark This Notification As Read")
                    </form>
                </div>
            }
            <div class="notification_text">
                @switch (n.ItemType)
                {
                    case Notification.Types.Mail:
                        {
                            <text><em>@n.Sender.DisplayName(ViewBag.ActiveCourse.AbstractRole)</em> sent you a @NotificationLink(n.ID, "message")</text>
                            break;
                        }
                    case Notification.Types.EventApproval:
                        {                                     
                            <text><em>@n.Sender.DisplayName(ViewBag.ActiveCourse.AbstractRole)</em> submitted an @NotificationLink(n.ID, "event for approval")</text>
                            break;
                        }
                    case Notification.Types.JoinCourseApproval:
                        {
                         //this flag is toggled when we recieve a JoinCourseApproval Notification, we will do all of the notification printing upon recieving 
                         //the first joincourseapproval notification and then toggle this flag to false   
                            
                        //TODO: see the commented java script above around line 22ish. We need to stop that from printing for each notification. because we end up with one consolidated courseappproval 
                        //notification and then a few more below it with the just the time and the date since the forloop ran through them all, and will hit the JS everytime    
                            if (courseFlag)
                            {
                                courseFlag = false;                                             //toggle flag
                                List<Notification> courseNotification = ViewBag.Notifications;  //make a list 
                                int CourseNotificationCount = courseNotification.Select(x => x.ItemType == Notification.Types.JoinCourseApproval).Count(); //get the count of joincourseapproval notifications
                            
                                if(courseNotification != null)  //make sure there are even notifications to display 
                                {
                                    
                                    if (CourseNotificationCount > 1) //if there is more than one notification for joincourse approval we need to consolidate it 
                                    {
                                        <text>You have <b>@CourseNotificationCount.ToString()</b> request to join this course @NotificationLink(n.ID, "see requests here")</text>
                                        break;
                                    }
                                    else
                                    {
                                        <text><em>@n.Sender.DisplayName(ViewBag.ActiveCourse.AbstractRole)</em> sent you a @NotificationLink(n.ID, "request to join course")</text>
                                        break;
                                    }
                                }
                                break;
                            }
                            break;  
                        }
                     case Notification.Types.JoinCommunityApproval:
                        {
                            if (communityFlag)
                            {
                                communityFlag = false;  //flag is for consolidation of notifications, it prevents all the notifications from printing and allows 
                                                        //us to make them into one notification as seen in the if (CommunityNotificationCount > 1) block
                                    
                                List<Notification> communityNotification = ViewBag.Notifications;
                                int CommunityNotificationCount = communityNotification.Select(x => x.ItemType == Notification.Types.JoinCourseApproval).Count();

                                if (communityNotification != null)
                                {

                                    if (CommunityNotificationCount > 1)
                                    {
                                        <text>You have <b>@CommunityNotificationCount.ToString()</b> request to join this course @NotificationLink(n.ID, "see requests here")</text>
                                        break;
                                    }
                                    else
                                    {
                                        <text><em>@n.Sender.DisplayName(ViewBag.ActiveCourse.AbstractRole)</em> sent you a @NotificationLink(n.ID, "request to join community")</text>
                                        break;
                                    }
                                }
                                break;
                            }
                            break;  
                           
                        }
                    case Notification.Types.Dashboard:
                        {
                            
                            <text><em>@n.Sender.DisplayName(ViewBag.ActiveCourse.AbstractRole)</em> posted in a @NotificationLink(n.ID, "dashboard thread")
                            that you participated in</text>
                            break;
                        }
                    case Notification.Types.InlineReviewCompleted:
                        {
                            string[] args = n.Data.Split(new char[] { ';' });
                            <text><em>@n.Sender.DisplayName(ViewBag.ActiveCourse.AbstractRole)</em> has published an
                            @Html.ActionLink("inline review", "ViewInlineReview", "Assignment", new { assignmentID = args[0], teamID = args[1] }, new { }) of your @args[2]</text>
                            break;
                        }
                    case Notification.Types.RubricEvaluationCompleted:
                        {
                            string[] args1 = n.Data.Split(new char[] { ';' });
                            <text><em>@n.Sender.DisplayName(ViewBag.ActiveCourse.AbstractRole)</em> completed an @Html.ActionLink("evaluation rubric", "View", "Rubric", new { assignmentId = args1[0], cuId = args1[1] }, new { }) of your @args1[2]
                            </text>
                            break;
                        }
                    case Notification.Types.FileSubmitted:
                        {
                            string[] args2 = n.Data.Split(new char[] { ';' });
                            <text><em>@n.Sender.DisplayName(ViewBag.ActiveCourse.AbstractRole)</em> submitted the file @args2[4] for the assignment '@args2[2]' at @args2[5] download it
                            @Html.ActionLink("here", "GetSubmissionZip", "FileHandler", new { assignmentID = args2[0], teamID = args2[1] }, new { })</text>
                            break;
                        }
                    case Notification.Types.TeamEvaluationDiscrepancy:
                        {
                            string[] args = n.Data.Split(new char[] { ';' });
                            <text><em>@n.Sender.DisplayName(ViewBag.ActiveCourse.AbstractRole)</em> submitted a 
                            @Html.ActionLink("team evaluation", "TeacherTeamEvaluation", "Assignment", new { precedingTeamId = args[0], TeamEvaluationAssignmentId = args[1] }, new { })
                            with a large percent spread</text>
                            break;
                        }

                }
            </div>
        </li>
    }
</ul>
@helper NotificationLink(int id, string name)
    {
    @Html.ActionLink(name, "Dispatch", "Notification", new { ID = id }, new { });
}
