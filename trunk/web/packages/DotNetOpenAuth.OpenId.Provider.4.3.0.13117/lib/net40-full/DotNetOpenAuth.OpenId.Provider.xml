<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetOpenAuth.OpenId.Provider</name>
    </assembly>
    <members>
        <member name="T:DotNetOpenAuth.OpenId.Provider.Behaviors.AXFetchAsSregTransform">
            <summary>
            An Attribute Exchange and Simple Registration filter to make all incoming attribute 
            requests look like Simple Registration requests, and to convert the response
            to the originally requested extension and format.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.AXFetchAsSregTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.Behaviors.AXFetchAsSregTransform"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.AXFetchAsSregTransform.DotNetOpenAuth#OpenId#Provider#IProviderBehavior#ApplySecuritySettings(DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Applies a well known set of security requirements to a default set of security settings.
            </summary>
            <param name="securitySettings">The security settings to enhance with the requirements of this profile.</param>
            <remarks>
            Care should be taken to never decrease security when applying a profile.
            Profiles should only enhance security requirements to avoid being
            incompatible with each other.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.AXFetchAsSregTransform.DotNetOpenAuth#OpenId#Provider#IProviderBehavior#OnIncomingRequest(DotNetOpenAuth.OpenId.Provider.IRequest)">
            <summary>
            Called when a request is received by the Provider.
            </summary>
            <param name="request">The incoming request.</param>
            <returns>
            	<c>true</c> if this behavior owns this request and wants to stop other behaviors
            from handling it; <c>false</c> to allow other behaviors to process this request.
            </returns>
            <remarks>
            Implementations may set a new value to <see cref="P:DotNetOpenAuth.OpenId.Provider.IRequest.SecuritySettings"/> but
            should not change the properties on the instance of <see cref="T:DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings"/>
            itself as that instance may be shared across many requests.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.AXFetchAsSregTransform.DotNetOpenAuth#OpenId#Provider#IProviderBehavior#OnOutgoingResponse(DotNetOpenAuth.OpenId.Provider.IAuthenticationRequest)">
            <summary>
            Called when the Provider is preparing to send a response to an authentication request.
            </summary>
            <param name="request">The request that is configured to generate the outgoing response.</param>
            <returns>
            	<c>true</c> if this behavior owns this request and wants to stop other behaviors
            from handling it; <c>false</c> to allow other behaviors to process this request.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile">
            <summary>
            Implements the Identity, Credential, &amp; Access Management (ICAM) OpenID 2.0 Profile
            for the General Services Administration (GSA).
            </summary>
            <remarks>
            <para>Relying parties that include this profile are always held to the terms required by the profile,
            but Providers are only affected by the special behaviors of the profile when the RP specifically
            indicates that they want to use this profile. </para>
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile.MaximumAssociationLifetime">
            <summary>
            The maximum time a shared association can live.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile.DotNetOpenAuth#OpenId#Provider#IProviderBehavior#ApplySecuritySettings(DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Adapts the default security settings to the requirements of this behavior.
            </summary>
            <param name="securitySettings">The original security settings.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile.DotNetOpenAuth#OpenId#Provider#IProviderBehavior#OnIncomingRequest(DotNetOpenAuth.OpenId.Provider.IRequest)">
            <summary>
            Called when a request is received by the Provider.
            </summary>
            <param name="request">The incoming request.</param>
            <returns>
            	<c>true</c> if this behavior owns this request and wants to stop other behaviors
            from handling it; <c>false</c> to allow other behaviors to process this request.
            </returns>
            <remarks>
            Implementations may set a new value to <see cref="P:DotNetOpenAuth.OpenId.Provider.IRequest.SecuritySettings"/> but
            should not change the properties on the instance of <see cref="T:DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings"/>
            itself as that instance may be shared across many requests.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile.DotNetOpenAuth#OpenId#Provider#IProviderBehavior#OnOutgoingResponse(DotNetOpenAuth.OpenId.Provider.IAuthenticationRequest)">
            <summary>
            Called when the Provider is preparing to send a response to an authentication request.
            </summary>
            <param name="request">The request that is configured to generate the outgoing response.</param>
            <returns>
            	<c>true</c> if this behavior owns this request and wants to stop other behaviors
            from handling it; <c>false</c> to allow other behaviors to process this request.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile.SetMaximumAssociationLifetimeToNotExceed(System.String,System.TimeSpan,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Ensures the maximum association lifetime does not exceed a given limit.
            </summary>
            <param name="associationType">Type of the association.</param>
            <param name="maximumLifetime">The maximum lifetime.</param>
            <param name="securitySettings">The security settings to adjust.</param>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.Behaviors.GsaIcamProfile.PpidIdentifierProvider">
            <summary>
            Gets or sets the provider for generating PPID identifiers.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.Behaviors.PpidGeneration">
            <summary>
            Offers OpenID Providers automatic PPID Claimed Identifier generation when requested
            by a PAPE request.
            </summary>
            <remarks>
            <para>PPIDs are set on positive authentication responses when the PAPE request includes
            the <see cref="F:DotNetOpenAuth.OpenId.Extensions.ProviderAuthenticationPolicy.AuthenticationPolicies.PrivatePersonalIdentifier"/> authentication policy.</para>
            <para>The static member <see cref="P:DotNetOpenAuth.OpenId.Provider.Behaviors.PpidGeneration.PpidIdentifierProvider"/> MUST
            be set prior to any PPID requests come in.  Typically this should be set in the
            <c>Application_Start</c> method in the global.asax.cs file.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.PpidGeneration.DotNetOpenAuth#OpenId#Provider#IProviderBehavior#ApplySecuritySettings(DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Applies a well known set of security requirements to a default set of security settings.
            </summary>
            <param name="securitySettings">The security settings to enhance with the requirements of this profile.</param>
            <remarks>
            Care should be taken to never decrease security when applying a profile.
            Profiles should only enhance security requirements to avoid being
            incompatible with each other.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.PpidGeneration.DotNetOpenAuth#OpenId#Provider#IProviderBehavior#OnIncomingRequest(DotNetOpenAuth.OpenId.Provider.IRequest)">
            <summary>
            Called when a request is received by the Provider.
            </summary>
            <param name="request">The incoming request.</param>
            <returns>
            	<c>true</c> if this behavior owns this request and wants to stop other behaviors
            from handling it; <c>false</c> to allow other behaviors to process this request.
            </returns>
            <remarks>
            Implementations may set a new value to <see cref="P:DotNetOpenAuth.OpenId.Provider.IRequest.SecuritySettings"/> but
            should not change the properties on the instance of <see cref="T:DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings"/>
            itself as that instance may be shared across many requests.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Behaviors.PpidGeneration.DotNetOpenAuth#OpenId#Provider#IProviderBehavior#OnOutgoingResponse(DotNetOpenAuth.OpenId.Provider.IAuthenticationRequest)">
            <summary>
            Called when the Provider is preparing to send a response to an authentication request.
            </summary>
            <param name="request">The request that is configured to generate the outgoing response.</param>
            <returns>
            	<c>true</c> if this behavior owns this request and wants to stop other behaviors
            from handling it; <c>false</c> to allow other behaviors to process this request.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.Behaviors.PpidGeneration.PpidIdentifierProvider">
            <summary>
            Gets or sets the provider for generating PPID identifiers.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.ChannelElements.AssociateUnencryptedProviderRequest">
            <summary>
            Represents an association request received by the OpenID Provider that is sent using HTTPS and 
            otherwise communicates the shared secret in plain text.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Messages.IAssociateRequestProvider">
            <summary>
            The openid.mode=associate message as it is received at the OpenID Provider.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.IAssociateRequestProvider.CreateResponseCore">
            <summary>
            Creates a Provider's response to an incoming association request.
            </summary>
            <returns>
            The appropriate association response message.
            </returns>
            <remarks>
            <para>If an association can be successfully created, the 
            AssociateSuccessfulResponse.CreateAssociation method must not be
            called by this method.</para>
            <para>Successful association response messages will derive from <see cref="T:DotNetOpenAuth.OpenId.Messages.AssociateSuccessfulResponse"/>.
            Failed association response messages will derive from <see cref="T:DotNetOpenAuth.OpenId.Messages.AssociateUnsuccessfulResponse"/>.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.AssociateUnencryptedProviderRequest.#ctor(System.Version,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.ChannelElements.AssociateUnencryptedProviderRequest"/> class.
            </summary>
            <param name="version">The OpenID version this message must comply with.</param>
            <param name="providerEndpoint">The OpenID Provider endpoint.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.AssociateUnencryptedProviderRequest.CreateResponseCore">
            <summary>
            Creates a Provider's response to an incoming association request.
            </summary>
            <returns>
            The appropriate association response message.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.ChannelElements.OpenIdProviderChannel">
            <summary>
            The messaging channel for OpenID Providers.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.OpenIdProviderChannel.#ctor(DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.Messaging.Bindings.INonceStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.ChannelElements.OpenIdProviderChannel"/> class.
            </summary>
            <param name="cryptoKeyStore">The OpenID Provider's association store or handle encoder.</param>
            <param name="nonceStore">The nonce store to use.</param>
            <param name="securitySettings">The security settings.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.OpenIdProviderChannel.#ctor(DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.Messaging.Bindings.INonceStore,DotNetOpenAuth.Messaging.IMessageFactory,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.ChannelElements.OpenIdProviderChannel"/> class.
            </summary>
            <param name="cryptoKeyStore">The association store to use.</param>
            <param name="nonceStore">The nonce store to use.</param>
            <param name="messageTypeProvider">An object that knows how to distinguish the various OpenID message types for deserialization purposes.</param>
            <param name="securitySettings">The security settings.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.OpenIdProviderChannel.InitializeBindingElements(DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.Messaging.Bindings.INonceStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Initializes the binding elements.
            </summary>
            <param name="cryptoKeyStore">The OpenID Provider's crypto key store.</param>
            <param name="nonceStore">The nonce store to use.</param>
            <param name="securitySettings">The security settings to apply.  Must be an instance of either RelyingPartySecuritySettings or ProviderSecuritySettings.</param>
            <returns>
            An array of binding elements which may be used to construct the channel.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.ChannelElements.OpenIdProviderMessageFactory">
            <summary>
            OpenID Provider message factory.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.OpenIdProviderMessageFactory.GetNewRequestMessage(DotNetOpenAuth.Messaging.MessageReceivingEndpoint,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="recipient">The intended or actual recipient of the request message.</param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            A newly instantiated <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived object that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.OpenIdProviderMessageFactory.GetNewResponseMessage(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="request">The message that was sent as a request that resulted in the response.</param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            A newly instantiated <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived object that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement">
            <summary>
            The signing binding element for OpenID Providers.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.opAssociations">
            <summary>
            The association store used by Providers to look up the secrets needed for signing.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.opSecuritySettings">
            <summary>
            The security settings at the Provider.
            Only defined when this element is instantiated to service a Provider.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.#ctor(DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement"/> class.
            </summary>
            <param name="associationStore">The association store used to look up the secrets needed for signing.</param>
            <param name="securitySettings">The security settings.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for sending based on the rules of this channel binding element.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.GetAssociation(DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage)">
            <summary>
            Gets the association to use to sign or verify a message.
            </summary>
            <param name="signedMessage">The message to sign or verify.</param>
            <returns>
            The association to use to sign or verify the message.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.GetSpecificAssociation(DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage)">
            <summary>
            Gets a specific association referenced in a given message's association handle.
            </summary>
            <param name="signedMessage">The signed message whose association handle should be used to lookup the association to return.</param>
            <returns>
            The referenced association; or <c>null</c> if such an association cannot be found.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.GetDumbAssociationForSigning">
            <summary>
            Gets a private Provider association used for signing messages in "dumb" mode.
            </summary>
            <returns>An existing or newly created association.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.VerifySignatureByUnrecognizedHandle(DotNetOpenAuth.Messaging.IProtocolMessage,DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage,DotNetOpenAuth.Messaging.MessageProtections)">
            <summary>
            Verifies the signature by unrecognized handle.
            </summary>
            <param name="message">The message.</param>
            <param name="signedMessage">The signed message.</param>
            <param name="protectionsApplied">The protections applied.</param>
            <returns>
            The applied protections.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.IsRelyingPartyVulnerableToReplays(DotNetOpenAuth.OpenId.Messages.SignedResponseRequest,DotNetOpenAuth.OpenId.Messages.IndirectSignedResponse)">
            <summary>
            Determines whether the relying party sending an authentication request is
            vulnerable to replay attacks.
            </summary>
            <param name="request">The request message from the Relying Party.  Useful, but may be null for conservative estimate results.</param>
            <param name="response">The response message to be signed.</param>
            <returns>
            	<c>true</c> if the relying party is vulnerable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.GetSignedParameterOrder(DotNetOpenAuth.OpenId.ChannelElements.ITamperResistantOpenIdMessage)">
            <summary>
            Gets the value to use for the openid.signed parameter.
            </summary>
            <param name="signedMessage">The signable message.</param>
            <returns>
            A comma-delimited list of parameter names, omitting the 'openid.' prefix, that determines
            the inclusion and order of message parts that will be signed.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.ChannelElements.ProviderSigningBindingElement.IsOnProvider">
            <summary>
            Gets a value indicating whether this binding element is on a Provider channel.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.Extensions.ExtensionsInteropHelper">
            <summary>
            A set of methods designed to assist in improving interop across different
            OpenID implementations and their extensions.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Extensions.ExtensionsInteropHelper.TransformAXFormatTestHook(System.String,DotNetOpenAuth.OpenId.Extensions.AttributeExchange.AXAttributeFormats)">
            <summary>
            Transforms an AX attribute type URI from the axschema.org format into a given format.
            </summary>
            <param name="axSchemaOrgFormatTypeUri">The ax schema org format type URI.</param>
            <param name="targetFormat">The target format.  Only one flag should be set.</param>
            <returns>The AX attribute type URI in the target format.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Extensions.ExtensionsInteropHelper.UnifyExtensionsAsSreg(DotNetOpenAuth.OpenId.Provider.IHostProcessedRequest)">
            <summary>
            Looks for Simple Registration and Attribute Exchange (all known formats)
            request extensions and returns them as a Simple Registration extension,
            and adds the new extension to the original request message if it was absent.
            </summary>
            <param name="request">The authentication request.</param>
            <returns>
            The Simple Registration request if found, 
            or a fabricated one based on the Attribute Exchange extension if found,
            or <c>null</c> if no attribute extension request is found.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Extensions.ExtensionsInteropHelper.ConvertSregToMatchRequest(DotNetOpenAuth.OpenId.Provider.IHostProcessedRequest)">
            <summary>
            Converts the Simple Registration extension response to whatever format the original
            attribute request extension came in.
            </summary>
            <param name="request">The authentication request with the response extensions already added.</param>
            <remarks>
            If the original attribute request came in as AX, the Simple Registration extension is converted
            to an AX response and then the Simple Registration extension is removed from the response.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Extensions.ExtensionsInteropHelper.AddAXAttributeValue(DotNetOpenAuth.OpenId.Extensions.AttributeExchange.FetchResponse,System.String,DotNetOpenAuth.OpenId.Extensions.AttributeExchange.AXAttributeFormats,System.String)">
            <summary>
            Adds the AX attribute value to the response if it is non-empty.
            </summary>
            <param name="ax">The AX Fetch response to add the attribute value to.</param>
            <param name="typeUri">The attribute type URI in axschema.org format.</param>
            <param name="format">The target format of the actual attribute to write out.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Extensions.ExtensionsInteropHelper.GetDemandLevelFor(DotNetOpenAuth.OpenId.Extensions.AttributeExchange.FetchRequest,System.String)">
            <summary>
            Gets the demand level for an AX attribute.
            </summary>
            <param name="ax">The AX fetch request to search for the attribute.</param>
            <param name="typeUri">The type URI of the attribute in axschema.org format.</param>
            <returns>The demand level for the attribute.</returns>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.Extensions.UI.UIRequestTools">
            <summary>
            OpenID User Interface extension 1.0 request message.
            </summary>
            <remarks>
            	<para>Implements the extension described by: http://wiki.openid.net/f/openid_ui_extension_draft01.html </para>
            	<para>This extension only applies to checkid_setup requests, since checkid_immediate requests display
            no UI to the user. </para>
            	<para>For rules about how the popup window should be displayed, please see the documentation of
            <see cref="F:DotNetOpenAuth.OpenId.Extensions.UI.UIModes.Popup"/>. </para>
            	<para>An RP may determine whether an arbitrary OP supports this extension (and thereby determine
            whether to use a standard full window redirect or a popup) via the
            <see cref="M:DotNetOpenAuth.OpenId.IdentifierDiscoveryResult.IsExtensionSupported``1"/> method.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Extensions.UI.UIRequestTools.GetRelyingPartyIconUrls(DotNetOpenAuth.OpenId.Realm,DotNetOpenAuth.Messaging.IDirectWebRequestHandler)">
            <summary>
            Gets the URL of the RP icon for the OP to display.
            </summary>
            <param name="realm">The realm of the RP where the authentication request originated.</param>
            <param name="webRequestHandler">The web request handler to use for discovery.
            Usually available via <see cref="P:DotNetOpenAuth.Messaging.Channel.WebRequestHandler">OpenIdProvider.Channel.WebRequestHandler</see>.</param>
            <returns>
            A sequence of the RP's icons it has available for the Provider to display, in decreasing preferred order.
            </returns>
            <value>The icon URL.</value>
            <remarks>
            This property is automatically set for the OP with the result of RP discovery.
            RPs should set this value by including an entry such as this in their XRDS document.
            <example>
            &lt;Service xmlns="xri://$xrd*($v*2.0)"&gt;
            &lt;Type&gt;http://specs.openid.net/extensions/ui/icon&lt;/Type&gt;
            &lt;URI&gt;http://consumer.example.com/images/image.jpg&lt;/URI&gt;
            &lt;/Service&gt;
            </example>
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.HmacShaAssociationProvider">
            <summary>
            OpenID Provider utility methods for HMAC-SHA* associations.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.HmacShaAssociationProvider.DefaultMaximumLifetime">
            <summary>
            The default lifetime of a shared association when no lifetime is given
            for a specific association type.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.HmacShaAssociationProvider.Create(DotNetOpenAuth.OpenId.Protocol,System.String,DotNetOpenAuth.OpenId.Provider.AssociationRelyingPartyType,DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Creates a new association of a given type at an OpenID Provider.
            </summary>
            <param name="protocol">The protocol.</param>
            <param name="associationType">Type of the association (i.e. HMAC-SHA1 or HMAC-SHA256)</param>
            <param name="associationUse">A value indicating whether the new association will be used privately by the Provider for "dumb mode" authentication
            or shared with the Relying Party for "smart mode" authentication.</param>
            <param name="associationStore">The Provider's association store.</param>
            <param name="securitySettings">The security settings of the Provider.</param>
            <returns>
            The newly created association.
            </returns>
            <remarks>
            The new association is NOT automatically put into an association store.  This must be done by the caller.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderRequest">
            <summary>
            An OpenID direct request from Relying Party to Provider to initiate an association that uses Diffie-Hellman encryption.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderRequest.#ctor(System.Version,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderRequest"/> class.
            </summary>
            <param name="version">The OpenID version this message must comply with.</param>
            <param name="providerEndpoint">The OpenID Provider endpoint.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderRequest.CreateResponseCore">
            <summary>
            Creates a Provider's response to an incoming association request.
            </summary>
            <returns>
            The appropriate association response message.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderResponse">
            <summary>
            The successful Diffie-Hellman association response message.
            </summary>
            <remarks>
            Association response messages are described in OpenID 2.0 section 8.2.  This type covers section 8.2.3.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProvider">
            <summary>
            An outgoing successful association response from the OpenID Provider.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProvider.CreateAssociationAtProvider(DotNetOpenAuth.OpenId.Messages.AssociateRequest,DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Called to create the Association based on a request previously given by the Relying Party.
            </summary>
            <param name="request">The prior request for an association.</param>
            <param name="associationStore">The Provider's association store.</param>
            <param name="securitySettings">The security settings of the Provider.</param>
            <returns>
            The created association.
            </returns>
            <remarks>
              <para>The caller will update this message's <see cref="P:DotNetOpenAuth.OpenId.Messages.AssociateSuccessfulResponse.ExpiresIn"/> and <see cref="P:DotNetOpenAuth.OpenId.Messages.AssociateSuccessfulResponse.AssociationHandle"/>
            properties based on the <see cref="T:DotNetOpenAuth.OpenId.Association"/> returned by this method, but any other
            association type specific properties must be set by this method.</para>
              <para>The response message is updated to include the details of the created association by this method,
            but the resulting association is <i>not</i> added to the association store and must be done by the caller.</para>
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProvider.ExpiresIn">
            <summary>
            Gets or sets the expires in.
            </summary>
            <value>
            The expires in.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProvider.AssociationHandle">
            <summary>
            Gets or sets the association handle.
            </summary>
            <value>
            The association handle.
            </value>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderResponse.#ctor(System.Version,DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderResponse"/> class.
            </summary>
            <param name="responseVersion">The OpenID version of the response message.</param>
            <param name="originatingRequest">The originating request.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderResponse.CreateAssociationAtProvider(DotNetOpenAuth.OpenId.Messages.AssociateRequest,DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Creates the association at the provider side after the association request has been received.
            </summary>
            <param name="request">The association request.</param>
            <param name="associationStore">The OpenID Provider's association store or handle encoder.</param>
            <param name="securitySettings">The security settings of the Provider.</param>
            <returns>
            The newly created association.
            </returns>
            <remarks>
            The response message is updated to include the details of the created association by this method,
            but the resulting association is <i>not</i> added to the association store and must be done by the caller.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderResponse.DotNetOpenAuth#OpenId#Messages#IAssociateSuccessfulResponseProvider#ExpiresIn">
            <summary>
            Gets or sets the lifetime, in seconds, of this association. The Relying Party MUST NOT use the association after this time has passed.
            </summary>
            <value>
            An integer, represented in base 10 ASCII.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.AssociateDiffieHellmanProviderResponse.DotNetOpenAuth#OpenId#Messages#IAssociateSuccessfulResponseProvider#AssociationHandle">
            <summary>
            Gets or sets the association handle is used as a key to refer to this association in subsequent messages.
            </summary>
            <value>
            A string 255 characters or less in length. It MUST consist only of ASCII characters in the range 33-126 inclusive (printable non-whitespace characters).
            </value>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Messages.AssociateRequestProviderTools">
            <summary>
            OpenID Provider tools for receiving association requests.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.AssociateRequestProviderTools.CreateResponse(DotNetOpenAuth.OpenId.Messages.IAssociateRequestProvider,DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Creates a Provider's response to an incoming association request.
            </summary>
            <param name="requestMessage">The request message.</param>
            <param name="associationStore">The association store.</param>
            <param name="securitySettings">The security settings on the Provider.</param>
            <returns>
            The appropriate association response that is ready to be sent back to the Relying Party.
            </returns>
            <remarks>
              <para>If an association is created, it will be automatically be added to the provided
            association store.</para>
              <para>Successful association response messages will derive from <see cref="T:DotNetOpenAuth.OpenId.Messages.AssociateSuccessfulResponse"/>.
            Failed association response messages will derive from <see cref="T:DotNetOpenAuth.OpenId.Messages.AssociateUnsuccessfulResponse"/>.</para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.AssociateRequestProviderTools.CreateUnsuccessfulResponse(DotNetOpenAuth.OpenId.Messages.IAssociateRequestProvider,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Creates a response that notifies the Relying Party that the requested
            association type is not supported by this Provider, and offers
            an alternative association type, if possible.
            </summary>
            <param name="requestMessage">The request message.</param>
            <param name="securitySettings">The security settings that apply to this Provider.</param>
            <returns>
            The response to send to the Relying Party.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProviderContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProvider"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProviderContract.DotNetOpenAuth#OpenId#Messages#IAssociateSuccessfulResponseProvider#CreateAssociationAtProvider(DotNetOpenAuth.OpenId.Messages.AssociateRequest,DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Called to create the Association based on a request previously given by the Relying Party.
            </summary>
            <param name="request">The prior request for an association.</param>
            <param name="associationStore">The Provider's association store.</param>
            <param name="securitySettings">The security settings of the Provider.</param>
            <returns>
            The created association.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProviderContract.DotNetOpenAuth#Messaging#IMessage#EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProviderContract.DotNetOpenAuth#OpenId#Messages#IAssociateSuccessfulResponseProvider#ExpiresIn">
            <summary>
            Gets or sets the expires in.
            </summary>
            <value>
            The expires in.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProviderContract.DotNetOpenAuth#OpenId#Messages#IAssociateSuccessfulResponseProvider#AssociationHandle">
            <summary>
            Gets or sets the association handle.
            </summary>
            <value>
            The association handle.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProviderContract.DotNetOpenAuth#Messaging#IProtocolMessage#RequiredProtection">
            <summary>
            Gets the level of protection this message requires.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProviderContract.DotNetOpenAuth#Messaging#IProtocolMessage#Transport">
            <summary>
            Gets a value indicating whether this is a direct or indirect message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProviderContract.DotNetOpenAuth#Messaging#IMessage#Version">
            <summary>
            Gets the version of the protocol or extension this message is prepared to implement.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProviderContract.DotNetOpenAuth#Messaging#IMessage#ExtraData">
            <summary>
            Gets the extra, non-standard Protocol parameters included in the message.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedResponseProvider">
            <summary>
            An unencrypted association response as it is sent by the Provider.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedResponseProvider.#ctor(System.Version,DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedResponseProvider"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="request">The request.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedResponseProvider.CreateAssociationAtProvider(DotNetOpenAuth.OpenId.Messages.AssociateRequest,DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Called to create the Association based on a request previously given by the Relying Party.
            </summary>
            <param name="request">The prior request for an association.</param>
            <param name="associationStore">The Provider's association store.</param>
            <param name="securitySettings">The security settings of the Provider.</param>
            <returns>
            The created association.
            </returns>
            <remarks>
              <para>The caller will update this message's
              <see cref="P:DotNetOpenAuth.OpenId.Messages.AssociateSuccessfulResponse.ExpiresIn"/> and
              <see cref="P:DotNetOpenAuth.OpenId.Messages.AssociateSuccessfulResponse.AssociationHandle"/>
            properties based on the <see cref="T:DotNetOpenAuth.OpenId.Association"/> returned by this method, but any other
            association type specific properties must be set by this method.</para>
              <para>The response message is updated to include the details of the created association by this method,
            but the resulting association is <i>not</i> added to the association store and must be done by the caller.</para>
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedResponseProvider.DotNetOpenAuth#OpenId#Messages#IAssociateSuccessfulResponseProvider#ExpiresIn">
            <summary>
            Gets or sets the lifetime, in seconds, of this association. The Relying Party MUST NOT use the association after this time has passed.
            </summary>
            <value>
            An integer, represented in base 10 ASCII.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Messages.AssociateUnencryptedResponseProvider.DotNetOpenAuth#OpenId#Messages#IAssociateSuccessfulResponseProvider#AssociationHandle">
            <summary>
            Gets or sets the association handle is used as a key to refer to this association in subsequent messages.
            </summary>
            <value>
            A string 255 characters or less in length. It MUST consist only of ASCII characters in the range 33-126 inclusive (printable non-whitespace characters).
            </value>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Messages.CheckAuthenticationResponseProvider">
            <summary>
            The check_auth response message, as it is seen by the OpenID Provider.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Messages.CheckAuthenticationResponseProvider.#ctor(DotNetOpenAuth.OpenId.Messages.CheckAuthenticationRequest,DotNetOpenAuth.OpenId.Provider.OpenIdProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Messages.CheckAuthenticationResponseProvider"/> class.
            </summary>
            <param name="request">The request that this message is responding to.</param>
            <param name="provider">The OpenID Provider that is preparing to send this response.</param>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.OpenIdProviderUtilities">
            <summary>
            Utility methods for OpenID Providers.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProviderUtilities.CreateAssociation(DotNetOpenAuth.OpenId.Messages.AssociateRequest,DotNetOpenAuth.OpenId.Messages.IAssociateSuccessfulResponseProvider,DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Called to create the Association based on a request previously given by the Relying Party.
            </summary>
            <param name="request">The prior request for an association.</param>
            <param name="response">The response.</param>
            <param name="associationStore">The Provider's association store.</param>
            <param name="securitySettings">The security settings for the Provider.  Should be <c>null</c> for Relying Parties.</param>
            <returns>
            The created association.
            </returns>
            <remarks>
            The response message is updated to include the details of the created association by this method.
            This method is called by both the Provider and the Relying Party, but actually performs
            quite different operations in either scenario.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProviderUtilities.IsValid(DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore,DotNetOpenAuth.Messaging.IProtocolMessage,System.Boolean,System.String)">
            <summary>
            Determines whether the association with the specified handle is (still) valid.
            </summary>
            <param name="associationStore">The association store.</param>
            <param name="containingMessage">The OpenID message that referenced this association handle.</param>
            <param name="isPrivateAssociation">A value indicating whether a private association is expected.</param>
            <param name="handle">The association handle.</param>
            <returns>
              <c>true</c> if the specified containing message is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.AssociationDataBag">
            <summary>
            A signed and encrypted serialization of an association.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AssociationDataBag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.AssociationDataBag"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AssociationDataBag.Serialize(System.IO.Stream)">
            <summary>
            Serializes the instance to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AssociationDataBag.Deserialize(System.IO.Stream)">
            <summary>
            Initializes the fields on this instance from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AssociationDataBag.CreateFormatter(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Creates the formatter used for serialization of this type.
            </summary>
            <param name="cryptoKeyStore">The crypto key store used when signing or encrypting.</param>
            <param name="bucket">The bucket in which symmetric keys are stored for signing/encrypting data.</param>
            <param name="minimumAge">The minimum age.</param>
            <returns>
            A formatter for serialization.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AssociationDataBag.Secret">
            <summary>
            Gets or sets the association secret.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AssociationDataBag.ExpiresUtc">
            <summary>
            Gets or sets the UTC time that this association expires.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AssociationDataBag.IsPrivateAssociation">
            <summary>
            Gets or sets a value indicating whether this instance is for "dumb" mode RPs.
            </summary>
            <value>
            	<c>true</c> if this instance is private association; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AssociationDataBag.AssociationType">
            <summary>
            Gets or sets the type of the association (shared or private, a.k.a. smart or dumb).
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore">
            <summary>
            Provides association serialization and deserialization.
            </summary>
            <remarks>
            Implementations may choose to store the association details in memory or a database table and simply return a
            short, randomly generated string that is the key to that data.  Alternatively, an implementation may
            sign and encrypt the association details and then encode the results as a base64 string and return that value
            as the association handle, thereby avoiding any association persistence at the OpenID Provider.
            When taking the latter approach however, it is of course imperative that the association be encrypted
            to avoid disclosing the secret to anyone who sees the association handle, which itself isn't considered to
            be confidential.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore.Serialize(System.Byte[],System.DateTime,System.Boolean)">
            <summary>
            Stores an association and returns a handle for it.
            </summary>
            <param name="secret">The association secret.</param>
            <param name="expiresUtc">The UTC time that the association should expire.</param>
            <param name="privateAssociation">A value indicating whether this is a private association.</param>
            <returns>
            The association handle that represents this association.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore.Deserialize(DotNetOpenAuth.Messaging.IProtocolMessage,System.Boolean,System.String)">
            <summary>
            Retrieves an association given an association handle.
            </summary>
            <param name="containingMessage">The OpenID message that referenced this association handle.</param>
            <param name="privateAssociation">A value indicating whether a private association is expected.</param>
            <param name="handle">The association handle.</param>
            <returns>
            An association instance, or <c>null</c> if the association has expired or the signature is incorrect (which may be because the OP's symmetric key has changed).
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the association is not of the expected type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.IProviderAssociationStoreContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.OpenId.Provider.IProviderAssociationStore"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.IProviderAssociationStoreContract.DotNetOpenAuth#OpenId#Provider#IProviderAssociationStore#Serialize(System.Byte[],System.DateTime,System.Boolean)">
            <summary>
            Stores an association and returns a handle for it.
            </summary>
            <param name="secret">The association secret.</param>
            <param name="expiresUtc">The expires UTC.</param>
            <param name="privateAssociation">A value indicating whether this is a private association.</param>
            <returns>
            The association handle that represents this association.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.IProviderAssociationStoreContract.DotNetOpenAuth#OpenId#Provider#IProviderAssociationStore#Deserialize(DotNetOpenAuth.Messaging.IProtocolMessage,System.Boolean,System.String)">
            <summary>
            Retrieves an association given an association handle.
            </summary>
            <param name="containingMessage">The OpenID message that referenced this association handle.</param>
            <param name="privateAssociation">A value indicating whether a private association is expected.</param>
            <param name="handle">The association handle.</param>
            <returns>
            An association instance, or <c>null</c> if the association has expired or the signature is incorrect (which may be because the OP's symmetric key has changed).
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the association is not of the expected type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.ProviderAssociationHandleEncoder">
            <summary>
            Provides association storage in the association handle itself, but embedding signed and encrypted association
            details in the handle.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.ProviderAssociationHandleEncoder.AssociationHandleEncodingSecretBucket">
            <summary>
            The name of the bucket in which to store keys that encrypt association data into association handles.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.ProviderAssociationHandleEncoder.cryptoKeyStore">
            <summary>
            The crypto key store used to persist encryption keys.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.ProviderAssociationHandleEncoder.#ctor(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.ProviderAssociationHandleEncoder"/> class.
            </summary>
            <param name="cryptoKeyStore">The crypto key store.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.ProviderAssociationHandleEncoder.Serialize(System.Byte[],System.DateTime,System.Boolean)">
            <summary>
            Encodes the specified association data bag.
            </summary>
            <param name="secret">The symmetric secret.</param>
            <param name="expiresUtc">The UTC time that the association should expire.</param>
            <param name="privateAssociation">A value indicating whether this is a private association.</param>
            <returns>
            The association handle that represents this association.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.ProviderAssociationHandleEncoder.Deserialize(DotNetOpenAuth.Messaging.IProtocolMessage,System.Boolean,System.String)">
            <summary>
            Retrieves an association given an association handle.
            </summary>
            <param name="containingMessage">The OpenID message that referenced this association handle.</param>
            <param name="privateAssociation">A value indicating whether a private association is expected.</param>
            <param name="handle">The association handle.</param>
            <returns>
            An association instance, or <c>null</c> if the association has expired or the signature is incorrect (which may be because the OP's symmetric key has changed).
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the association is not of the expected type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.ProviderAssociationKeyStorage">
            <summary>
            An association storage mechanism that stores the association secrets in a private store,
            and returns randomly generated association handles to refer to these secrets.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.ProviderAssociationKeyStorage.SharedAssociationBucket">
            <summary>
            The bucket to use when recording shared associations.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.ProviderAssociationKeyStorage.PrivateAssociationBucket">
            <summary>
            The bucket to use when recording private associations.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.ProviderAssociationKeyStorage.cryptoKeyStore">
            <summary>
            The backing crypto key store.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.ProviderAssociationKeyStorage.#ctor(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.ProviderAssociationKeyStorage"/> class.
            </summary>
            <param name="cryptoKeyStore">The store where association secrets will be recorded.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.ProviderAssociationKeyStorage.Serialize(System.Byte[],System.DateTime,System.Boolean)">
            <summary>
            Stores an association and returns a handle for it.
            </summary>
            <param name="secret">The association secret.</param>
            <param name="expiresUtc">The UTC time that the association should expire.</param>
            <param name="privateAssociation">A value indicating whether this is a private association.</param>
            <returns>
            The association handle that represents this association.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.ProviderAssociationKeyStorage.Deserialize(DotNetOpenAuth.Messaging.IProtocolMessage,System.Boolean,System.String)">
            <summary>
            Retrieves an association given an association handle.
            </summary>
            <param name="containingMessage">The OpenID message that referenced this association handle.</param>
            <param name="isPrivateAssociation">A value indicating whether a private association is expected.</param>
            <param name="handle">The association handle.</param>
            <returns>
            An association instance, or <c>null</c> if the association has expired or the signature is incorrect (which may be because the OP's symmetric key has changed).
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the association is not of the expected type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.AssociationRelyingPartyType">
            <summary>
            An enumeration that can specify how a given <see cref="T:DotNetOpenAuth.OpenId.Association"/> is used.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.AssociationRelyingPartyType.Smart">
            <summary>
            The <see cref="T:DotNetOpenAuth.OpenId.Association"/> manages a shared secret between
            Provider and Relying Party sites that allows the RP to verify
            the signature on a message from an OP.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.AssociationRelyingPartyType.Dumb">
            <summary>
            The <see cref="T:DotNetOpenAuth.OpenId.Association"/> manages a secret known alone by
            a Provider that allows the Provider to verify its own signatures
            for "dumb" (stateless) relying parties.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase">
            <summary>
            Provides standard PPID Identifiers to users to protect their identity from individual relying parties
            and from colluding groups of relying parties.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.IDirectedIdentityIdentifierProvider">
            <summary>
            An interface to provide custom identifiers for users logging into specific relying parties.
            </summary>
            <remarks>
            This interface would allow, for example, the Provider to offer PPIDs to their users,
            allowing the users to log into RPs without leaving any clue as to their true identity,
            and preventing multiple RPs from colluding to track user activity across realms.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.IDirectedIdentityIdentifierProvider.GetIdentifier(DotNetOpenAuth.OpenId.Identifier,DotNetOpenAuth.OpenId.Realm)">
            <summary>
            Gets the Identifier to use for the Claimed Identifier and Local Identifier of
            an outgoing positive assertion.
            </summary>
            <param name="localIdentifier">The OP local identifier for the authenticating user.</param>
            <param name="relyingPartyRealm">The realm of the relying party receiving the assertion.</param>
            <returns>
            A valid, discoverable OpenID Identifier that should be used as the value for the
            openid.claimed_id and openid.local_id parameters.  Must not be null.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.IDirectedIdentityIdentifierProvider.IsUserLocalIdentifier(DotNetOpenAuth.OpenId.Identifier)">
            <summary>
            Determines whether a given identifier is the primary (non-PPID) local identifier for some user.
            </summary>
            <param name="identifier">The identifier in question.</param>
            <returns>
            	<c>true</c> if the given identifier is the valid, unique identifier for some uesr (and NOT a PPID); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.HashAlgorithmName">
            <summary>
            The type of hash function to use for the <see cref="P:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.Hasher"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.newSaltLength">
            <summary>
            The length of the salt to generate for first time PPID-users.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase"/> class.
            </summary>
            <param name="baseIdentifier">The base URI on which to append the anonymous part.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.GetIdentifier(DotNetOpenAuth.OpenId.Identifier,DotNetOpenAuth.OpenId.Realm)">
            <summary>
            Gets the Identifier to use for the Claimed Identifier and Local Identifier of
            an outgoing positive assertion.
            </summary>
            <param name="localIdentifier">The OP local identifier for the authenticating user.</param>
            <param name="relyingPartyRealm">The realm of the relying party receiving the assertion.</param>
            <returns>
            A valid, discoverable OpenID Identifier that should be used as the value for the
            openid.claimed_id and openid.local_id parameters.  Must not be null.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.IsUserLocalIdentifier(DotNetOpenAuth.OpenId.Identifier)">
            <summary>
            Determines whether a given identifier is the primary (non-PPID) local identifier for some user.
            </summary>
            <param name="identifier">The identifier in question.</param>
            <returns>
            	<c>true</c> if the given identifier is the valid, unique identifier for some uesr (and NOT a PPID); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.CreateSalt">
            <summary>
            Creates a new salt to assign to a user.
            </summary>
            <returns>A non-null buffer of length <see cref="P:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.NewSaltLength"/> filled with a random salt.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.AppendIdentifiers(System.String)">
            <summary>
            Creates a new PPID Identifier by appending a pseudonymous identifier suffix to
            the <see cref="P:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.BaseIdentifier"/>.
            </summary>
            <param name="uriHash">The unique part of the Identifier to append to the common first part.</param>
            <returns>The full PPID Identifier.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.GetHashSaltForLocalIdentifier(DotNetOpenAuth.OpenId.Identifier)">
            <summary>
            Gets the salt to use for generating an anonymous identifier for a given OP local identifier.
            </summary>
            <param name="localIdentifier">The OP local identifier.</param>
            <returns>The salt to use in the hash.</returns>
            <remarks>
            It is important that this method always return the same value for a given 
            <paramref name="localIdentifier"/>.  
            New salts can be generated for local identifiers without previously assigned salt
            values by calling <see cref="M:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.CreateSalt"/> or by a custom method.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.BaseIdentifier">
            <summary>
            Gets the base URI on which to append the anonymous part.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.PairwiseUnique">
            <summary>
            Gets or sets a value indicating whether each Realm will get its own private identifier
            for the authenticating uesr.
            </summary>
            <value>The default value is <see cref="F:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.AudienceScope.Realm"/>.</value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.Hasher">
            <summary>
            Gets the hash function to use to perform the one-way transform of a personal identifier
            to an "anonymous" looking one.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.Encoder">
            <summary>
            Gets the encoder to use for transforming the personal identifier into bytes for hashing.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.NewSaltLength">
            <summary>
            Gets or sets the new length of the salt.
            </summary>
            <value>The new length of the salt.</value>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.AudienceScope">
            <summary>
            A granularity description for who wide of an audience sees the same generated PPID.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.AudienceScope.Realm">
            <summary>
            A unique Identifier is generated for every realm.  This is the highest security setting.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.AudienceScope.RealmHost">
            <summary>
            Only the host name in the realm is used in calculating the PPID,
            allowing for some level of sharing of the PPID Identifiers between RPs
            that are able to share the same realm host value.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.PrivatePersonalIdentifierProviderBase.AudienceScope.Global">
            <summary>
            Although the user's Identifier is still opaque to the RP so they cannot determine
            who the user is at the OP, the same Identifier is used at all RPs so collusion
            between the RPs is possible.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.AnonymousRequest">
            <summary>
            Provides access to a host Provider to read an incoming extension-only checkid request message,
            and supply extension responses or a cancellation message to the RP.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest">
            <summary>
            A base class from which identity and non-identity RP requests can derive.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.Request">
            <summary>
            Implements the <see cref="T:DotNetOpenAuth.OpenId.Provider.IRequest"/> interface for all incoming
            request messages to an OpenID Provider.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.Request.request">
            <summary>
            The incoming request message.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.Request.extensibleMessage">
            <summary>
            The incoming request message cast to its extensible form.  
            Or null if the message does not support extensions.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.Request.protocolVersion">
            <summary>
            The version of the OpenID protocol to use.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.Request.protocol">
            <summary>
            Backing store for the <see cref="P:DotNetOpenAuth.OpenId.Provider.Request.Protocol"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.Request.responseExtensions">
            <summary>
            The list of extensions to add to the response message.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Request.#ctor(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.Request"/> class.
            </summary>
            <param name="request">The incoming request message.</param>
            <param name="securitySettings">The security settings from the channel.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Request.#ctor(System.Version,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.Request"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="securitySettings">The security settings.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Request.AddResponseExtension(DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension)">
            <summary>
            Adds an extension to the response to send to the relying party.
            </summary>
            <param name="extension">The extension to add to the response message.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Request.ClearResponseExtensions">
            <summary>
            Removes any response extensions previously added using <see cref="M:DotNetOpenAuth.OpenId.Provider.Request.AddResponseExtension(DotNetOpenAuth.OpenId.Messages.IOpenIdMessageExtension)"/>.
            </summary>
            <remarks>
            This should be called before sending a negative response back to the relying party
            if extensions were already added, since negative responses cannot carry extensions.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Request.GetExtension``1">
            <summary>
            Gets an extension sent from the relying party.
            </summary>
            <typeparam name="T">The type of the extension.</typeparam>
            <returns>
            An instance of the extension initialized with values passed in with the request.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.Request.GetExtension(System.Type)">
            <summary>
            Gets an extension sent from the relying party.
            </summary>
            <param name="extensionType">The type of the extension.</param>
            <returns>
            An instance of the extension initialized with values passed in with the request.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.Request.IsResponseReady">
            <summary>
            Gets a value indicating whether the response is ready to be sent to the user agent.
            </summary>
            <remarks>
            This property returns false if there are properties that must be set on this
            request instance before the response can be sent.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.Request.SecuritySettings">
            <summary>
            Gets or sets the security settings that apply to this request.
            </summary>
            <value>Defaults to the <see cref="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SecuritySettings"/> on the <see cref="T:DotNetOpenAuth.OpenId.Provider.OpenIdProvider"/>.</value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.Request.Response">
            <summary>
            Gets the response to send to the user agent.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:DotNetOpenAuth.OpenId.Provider.Request.IsResponseReady"/> is <c>false</c>.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.Request.RequestMessage">
            <summary>
            Gets the original request message.
            </summary>
            <value>This may be null in the case of an unrecognizable message.</value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.Request.ResponseMessage">
            <summary>
            Gets the response message, once <see cref="P:DotNetOpenAuth.OpenId.Provider.Request.IsResponseReady"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.Request.Protocol">
            <summary>
            Gets the protocol version used in the request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.negativeResponse">
            <summary>
            The negative assertion to send, if the host site chooses to send it.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.realmDiscoveryResult">
            <summary>
            A cache of the result from discovery of the Realm URL.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.#ctor(DotNetOpenAuth.OpenId.Provider.OpenIdProvider,DotNetOpenAuth.OpenId.Messages.SignedResponseRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest"/> class.
            </summary>
            <param name="provider">The provider that received the request.</param>
            <param name="request">The incoming request message.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.IsReturnUrlDiscoverable(DotNetOpenAuth.Messaging.IDirectWebRequestHandler)">
            <summary>
            Gets a value indicating whether verification of the return URL claimed by the Relying Party
            succeeded.
            </summary>
            <param name="requestHandler">The request handler.</param>
            <returns>
            Result of realm discovery.
            </returns>
            <remarks>
            Return URL verification is only attempted if this property is queried.
            The result of the verification is cached per request so calling this
            property getter multiple times in one request is not a performance hit.
            See OpenID Authentication 2.0 spec section 9.2.1.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.IsReturnUrlDiscoverableCore(DotNetOpenAuth.Messaging.IDirectWebRequestHandler)">
            <summary>
            Gets a value indicating whether verification of the return URL claimed by the Relying Party
            succeeded.
            </summary>
            <param name="requestHandler">The request handler.</param>
            <returns>
            Result of realm discovery.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.RelyingPartyVersion">
            <summary>
            Gets the version of OpenID being used by the relying party that sent the request.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.Immediate">
            <summary>
            Gets a value indicating whether the consumer demands an immediate response.
            If false, the consumer is willing to wait for the identity provider
            to authenticate the user.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.Realm">
            <summary>
            Gets the URL the consumer site claims to use as its 'base' address.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.ProviderEndpoint">
            <summary>
            Gets or sets the provider endpoint.
            </summary>
            <value>
            The default value is the URL that the request came in on from the relying party.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.HasRealmDiscoveryBeenPerformed">
            <summary>
            Gets a value indicating whether realm discovery been performed.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.NegativeResponse">
            <summary>
            Gets the negative response.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.HostProcessedRequest.RequestMessage">
            <summary>
            Gets the original request message.
            </summary>
            <value>This may be null in the case of an unrecognizable message.</value>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.IAnonymousRequest">
            <summary>
            Instances of this interface represent incoming extension-only requests.
            This interface provides the details of the request and allows setting
            the response.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.IAnonymousRequest.IsApproved">
            <summary>
            Gets or sets a value indicating whether the user approved sending any data to the relying party.
            </summary>
            <value><c>true</c> if approved; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.AnonymousRequest.positiveResponse">
            <summary>
            The extension-response message to send, if the host site chooses to send it.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AnonymousRequest.#ctor(DotNetOpenAuth.OpenId.Provider.OpenIdProvider,DotNetOpenAuth.OpenId.Messages.SignedResponseRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.AnonymousRequest"/> class.
            </summary>
            <param name="provider">The provider that received the request.</param>
            <param name="request">The incoming authentication request message.</param>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AnonymousRequest.ProviderEndpoint">
            <summary>
            Gets or sets the provider endpoint.
            </summary>
            <value>
            The default value is the URL that the request came in on from the relying party.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AnonymousRequest.IsApproved">
            <summary>
            Gets or sets a value indicating whether the user approved sending any data to the relying party.
            </summary>
            <value><c>true</c> if approved; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AnonymousRequest.IsResponseReady">
            <summary>
            Gets a value indicating whether the response is ready to be sent to the user agent.
            </summary>
            <remarks>
            This property returns false if there are properties that must be set on this
            request instance before the response can be sent.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AnonymousRequest.ResponseMessage">
            <summary>
            Gets the response message, once <see cref="P:DotNetOpenAuth.OpenId.Provider.AnonymousRequest.IsResponseReady"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest">
            <summary>
            Implements the <see cref="T:DotNetOpenAuth.OpenId.Provider.IAuthenticationRequest"/> interface
            so that OpenID Provider sites can easily respond to authentication
            requests.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.positiveResponse">
            <summary>
            The positive assertion to send, if the host site chooses to send it.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.#ctor(DotNetOpenAuth.OpenId.Provider.OpenIdProvider,DotNetOpenAuth.OpenId.Messages.CheckIdRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest"/> class.
            </summary>
            <param name="provider">The provider that received the request.</param>
            <param name="request">The incoming authentication request message.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.SetClaimedIdentifierFragment(System.String)">
            <summary>
            Adds an optional fragment (#fragment) portion to the ClaimedIdentifier.
            Useful for identifier recycling.
            </summary>
            <param name="fragment">Should not include the # prefix character as that will be added internally.
            May be null or the empty string to clear a previously set fragment.</param>
            <remarks>
            	<para>Unlike the <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.ClaimedIdentifier"/> property, which can only be set if
            using directed identity, this method can be called on any URI claimed identifier.</para>
            	<para>Because XRI claimed identifiers (the canonical IDs) are never recycled,
            this method should<i>not</i> be called for XRIs.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this method is called on an XRI, or on a directed identity
            request before the <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.ClaimedIdentifier"/> property is set.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.ResetClaimedAndLocalIdentifiers(DotNetOpenAuth.OpenId.Identifier)">
            <summary>
            Sets the Claimed and Local identifiers even after they have been initially set.
            </summary>
            <param name="identifier">The value to set to the <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.ClaimedIdentifier"/> and <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.LocalIdentifier"/> properties.</param>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.ProviderEndpoint">
            <summary>
            Gets or sets the provider endpoint.
            </summary>
            <value>
            The default value is the URL that the request came in on from the relying party.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.IsResponseReady">
            <summary>
            Gets a value indicating whether the response is ready to be created and sent.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.IsDirectedIdentity">
            <summary>
            Gets a value indicating whether the Provider should help the user
            select a Claimed Identifier to send back to the relying party.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.IsDelegatedIdentifier">
            <summary>
            Gets a value indicating whether the requesting Relying Party is using a delegated URL.
            </summary>
            <remarks>
            When delegated identifiers are used, the <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.ClaimedIdentifier"/> should not
            be changed at the Provider during authentication.
            Delegation is only detectable on requests originating from OpenID 2.0 relying parties.
            A relying party implementing only OpenID 1.x may use delegation and this property will
            return false anyway.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.LocalIdentifier">
            <summary>
            Gets or sets the Local Identifier to this OpenID Provider of the user attempting
            to authenticate.  Check <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.IsDirectedIdentity"/> to see if
            this value is valid.
            </summary>
            <remarks>
            This may or may not be the same as the Claimed Identifier that the user agent
            originally supplied to the relying party.  The Claimed Identifier
            endpoint may be delegating authentication to this provider using
            this provider's local id, which is what this property contains.
            Use this identifier when looking up this user in the provider's user account
            list.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.ClaimedIdentifier">
            <summary>
            Gets or sets the identifier that the user agent is claiming at the relying party site.
            Check <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.IsDirectedIdentity"/> to see if this value is valid.
            </summary>
            <remarks>
            	<para>This property can only be set if <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.IsDelegatedIdentifier"/> is
            false, to prevent breaking URL delegation.</para>
            	<para>This will not be the same as this provider's local identifier for the user
            if the user has set up his/her own identity page that points to this
            provider for authentication.</para>
            	<para>The provider may use this identifier for displaying to the user when
            asking for the user's permission to authenticate to the relying party.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown from the setter
            if <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.IsDelegatedIdentifier"/> is true.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether the provider has determined that the
            <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.ClaimedIdentifier"/> belongs to the currently logged in user
            and wishes to share this information with the consumer.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.RequestMessage">
            <summary>
            Gets the original request message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.ResponseMessage">
            <summary>
            Gets the response message, once <see cref="P:DotNetOpenAuth.OpenId.Provider.AuthenticationRequest.IsResponseReady"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest">
            <summary>
            Handles messages coming into an OpenID Provider for which the entire
            response message can be automatically determined without help from
            the hosting web site.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest.response">
            <summary>
            The response message to send.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest.#ctor(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,DotNetOpenAuth.Messaging.IProtocolMessage,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest"/> class.
            </summary>
            <param name="request">The request message.</param>
            <param name="response">The response that is ready for transmittal.</param>
            <param name="securitySettings">The security settings.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest.#ctor(DotNetOpenAuth.Messaging.IProtocolMessage,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest"/> class
            for a response to an unrecognizable request.
            </summary>
            <param name="response">The response that is ready for transmittal.</param>
            <param name="securitySettings">The security settings.</param>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest.IsResponseReady">
            <summary>
            Gets a value indicating whether the response is ready to be sent to the user agent.
            </summary>
            <remarks>
            This property returns false if there are properties that must be set on this
            request instance before the response can be sent.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest.ResponseMessageTestHook">
            <summary>
            Gets the response message, once <see cref="P:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest.IsResponseReady"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest.ResponseMessage">
            <summary>
            Gets the response message, once <see cref="P:DotNetOpenAuth.OpenId.Provider.AutoResponsiveRequest.IsResponseReady"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.IDirectedIdentityIdentifierProviderContract">
            <summary>
            Contract class for the <see cref="T:DotNetOpenAuth.OpenId.Provider.IDirectedIdentityIdentifierProvider"/> type.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.IDirectedIdentityIdentifierProviderContract.DotNetOpenAuth#OpenId#Provider#IDirectedIdentityIdentifierProvider#GetIdentifier(DotNetOpenAuth.OpenId.Identifier,DotNetOpenAuth.OpenId.Realm)">
            <summary>
            Gets the Identifier to use for the Claimed Identifier and Local Identifier of
            an outgoing positive assertion.
            </summary>
            <param name="localIdentifier">The OP local identifier for the authenticating user.</param>
            <param name="relyingPartyRealm">The realm of the relying party receiving the assertion.</param>
            <returns>
            A valid, discoverable OpenID Identifier that should be used as the value for the
            openid.claimed_id and openid.local_id parameters.  Must not be null.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.IDirectedIdentityIdentifierProviderContract.DotNetOpenAuth#OpenId#Provider#IDirectedIdentityIdentifierProvider#IsUserLocalIdentifier(DotNetOpenAuth.OpenId.Identifier)">
            <summary>
            Determines whether a given identifier is the primary (non-PPID) local identifier for some user.
            </summary>
            <param name="identifier">The identifier in question.</param>
            <returns>
            	<c>true</c> if the given identifier is the valid, unique identifier for some uesr (and NOT a PPID); otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.IErrorReporting">
            <summary>
            An interface that a Provider site may implement in order to better
            control error reporting.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.IErrorReporting.LogError(DotNetOpenAuth.Messaging.ProtocolException)">
            <summary>
            Logs the details of an exception for later reference in diagnosing the problem.
            </summary>
            <param name="exception">The exception that was generated from the error.</param>
            <returns>
            A unique identifier for this particular error that the remote party can
            reference when contacting <see cref="P:DotNetOpenAuth.OpenId.Provider.IErrorReporting.Contact"/> for help with this error.
            May be null.
            </returns>
            <remarks>
            The implementation of this method should never throw an unhandled exception
            as that would preclude the ability to send the error response to the remote
            party.  When this method is not implemented, it should return null rather
            than throwing <see cref="T:System.NotImplementedException"/>.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.IErrorReporting.Contact">
            <summary>
            Gets the message that can be sent in an error response
            with information on who the remote party can contact
            for help resolving the error.
            </summary>
            <value>
            The contact address may take any form, as it is intended to be displayed to a person.
            </value>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.RequestContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.OpenId.Provider.Request"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.RequestContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.RequestContract"/> class from being created.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.RequestContract.IsResponseReady">
            <summary>
            Gets a value indicating whether the response is ready to be sent to the user agent.
            </summary>
            <remarks>
            This property returns false if there are properties that must be set on this
            request instance before the response can be sent.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.RequestContract.ResponseMessage">
            <summary>
            Gets the response message, once <see cref="P:DotNetOpenAuth.OpenId.Provider.RequestContract.IsResponseReady"/> is <c>true</c>.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore">
            <summary>
            An in-memory store for Providers, suitable for single server, single process
            ASP.NET web sites.
            </summary>
            <remarks>
            This class provides only a basic implementation that is likely to work
            out of the box on most single-server web sites.  It is highly recommended
            that high traffic web sites consider using a database to store the information
            used by an OpenID Provider and write a custom implementation of the
            <see cref="T:DotNetOpenAuth.OpenId.IOpenIdApplicationStore"/> interface to use instead of this
            class.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore.nonceStore">
            <summary>
            The nonce store to use.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore.cryptoKeyStore">
            <summary>
            The crypto key store where symmetric keys are persisted.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore.StoreNonce(System.String,System.String,System.DateTime)">
            <summary>
            Stores a given nonce and timestamp.
            </summary>
            <param name="context">The context, or namespace, within which the <paramref name="nonce"/> must be unique.</param>
            <param name="nonce">A series of random characters.</param>
            <param name="timestampUtc">The timestamp that together with the nonce string make it unique.
            The timestamp may also be used by the data store to clear out old nonces.</param>
            <returns>
            True if the nonce+timestamp (combination) was not previously in the database.
            False if the nonce was stored previously with the same timestamp.
            </returns>
            <remarks>
            The nonce must be stored for no less than the maximum time window a message may
            be processed within before being discarded as an expired message.
            If the binding element is applicable to your channel, this expiration window
            is retrieved or set using the
            <see cref="P:DotNetOpenAuth.Messaging.Bindings.StandardExpirationBindingElement.MaximumMessageAge"/> property.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore.GetKey(System.String,System.String)">
            <summary>
            Gets the key in a given bucket and handle.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
            <returns>
            The cryptographic key, or <c>null</c> if no matching key was found.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore.GetKeys(System.String)">
            <summary>
            Gets a sequence of existing keys within a given bucket.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <returns>
            A sequence of handles and keys, ordered by descending <see cref="P:DotNetOpenAuth.Messaging.Bindings.CryptoKey.ExpiresUtc"/>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore.StoreKey(System.String,System.String,DotNetOpenAuth.Messaging.Bindings.CryptoKey)">
            <summary>
            Stores a cryptographic key.
            </summary>
            <param name="bucket">The name of the bucket to store the key in.  Case sensitive.</param>
            <param name="handle">The handle to the key, unique within the bucket.  Case sensitive.</param>
            <param name="key">The key to store.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.Bindings.CryptoKeyCollisionException">Thrown in the event of a conflict with an existing key in the same bucket and with the same handle.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore.RemoveKey(System.String,System.String)">
            <summary>
            Removes the key.
            </summary>
            <param name="bucket">The bucket name.  Case sensitive.</param>
            <param name="handle">The key handle.  Case sensitive.</param>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.OpenIdProvider">
            <summary>
            Offers services for a web page that is acting as an OpenID identity server.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.ApplicationStoreKey">
            <summary>
            The name of the key to use in the HttpApplication cache to store the
            instance of <see cref="T:DotNetOpenAuth.OpenId.Provider.StandardProviderApplicationStore"/> to use.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.behaviors">
            <summary>
            Backing store for the <see cref="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.Behaviors"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.discoveryServices">
            <summary>
            The discovery service used to perform discovery on identifiers being sent in
            unsolicited positive assertions.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.securitySettings">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SecuritySettings"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.OpenIdProvider"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.#ctor(DotNetOpenAuth.OpenId.IOpenIdApplicationStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.OpenIdProvider"/> class.
            </summary>
            <param name="applicationStore">The application store to use.  Cannot be null.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.#ctor(DotNetOpenAuth.Messaging.Bindings.INonceStore,DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.OpenIdProvider"/> class.
            </summary>
            <param name="nonceStore">The nonce store to use.  Cannot be null.</param>
            <param name="cryptoKeyStore">The crypto key store.  Cannot be null.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.GetRequest">
            <summary>
            Gets the incoming OpenID request if there is one, or null if none was detected.
            </summary>
            <returns>The request that the hosting Provider should possibly process and then transmit the response for.</returns>
            <remarks>
            <para>Requests may be infrastructural to OpenID and allow auto-responses, or they may
            be authentication requests where the Provider site has to make decisions based
            on its own user database and policies.</para>
            <para>Requires an <see cref="P:System.Web.HttpContext.Current">HttpContext.Current</see> context.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:System.Web.HttpContext.Current">HttpContext.Current</see> == <c>null</c>.</exception>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the incoming message is recognized but deviates from the protocol specification irrecoverably.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.GetRequest(System.Web.HttpRequestBase)">
            <summary>
            Gets the incoming OpenID request if there is one, or null if none was detected.
            </summary>
            <param name="httpRequestInfo">The incoming HTTP request to extract the message from.</param>
            <returns>
            The request that the hosting Provider should process and then transmit the response for.
            Null if no valid OpenID request was detected in the given HTTP request.
            </returns>
            <remarks>
            Requests may be infrastructural to OpenID and allow auto-responses, or they may
            be authentication requests where the Provider site has to make decisions based
            on its own user database and policies.
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the incoming message is recognized
            but deviates from the protocol specification irrecoverably.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SendResponse(DotNetOpenAuth.OpenId.Provider.IRequest)">
            <summary>
            Sends the response to a received request.
            </summary>
            <param name="request">The incoming OpenID request whose response is to be sent.</param>
            <exception cref="T:System.Threading.ThreadAbortException">Thrown by ASP.NET in order to prevent additional data from the page being sent to the client and corrupting the response.</exception>
            <remarks>
            <para>Requires an HttpContext.Current context.  If one is not available, the caller should use
            <see cref="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.PrepareResponse(DotNetOpenAuth.OpenId.Provider.IRequest)"/> instead and manually send the <see cref="T:DotNetOpenAuth.Messaging.OutgoingWebResponse"/> 
            to the client.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:DotNetOpenAuth.OpenId.Provider.IRequest.IsResponseReady"/> is <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.Respond(DotNetOpenAuth.OpenId.Provider.IRequest)">
            <summary>
            Sends the response to a received request.
            </summary>
            <param name="request">The incoming OpenID request whose response is to be sent.</param>
            <remarks>
            <para>Requires an HttpContext.Current context.  If one is not available, the caller should use
            <see cref="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.PrepareResponse(DotNetOpenAuth.OpenId.Provider.IRequest)"/> instead and manually send the <see cref="T:DotNetOpenAuth.Messaging.OutgoingWebResponse"/> 
            to the client.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:DotNetOpenAuth.OpenId.Provider.IRequest.IsResponseReady"/> is <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.PrepareResponse(DotNetOpenAuth.OpenId.Provider.IRequest)">
            <summary>
            Gets the response to a received request.
            </summary>
            <param name="request">The request.</param>
            <returns>The response that should be sent to the client.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:DotNetOpenAuth.OpenId.Provider.IRequest.IsResponseReady"/> is <c>false</c>.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SendUnsolicitedAssertion(System.Uri,DotNetOpenAuth.OpenId.Realm,DotNetOpenAuth.OpenId.Identifier,DotNetOpenAuth.OpenId.Identifier,DotNetOpenAuth.Messaging.IExtensionMessage[])">
            <summary>
            Sends an identity assertion on behalf of one of this Provider's
            members in order to redirect the user agent to a relying party
            web site and log him/her in immediately in one uninterrupted step.
            </summary>
            <param name="providerEndpoint">The absolute URL on the Provider site that receives OpenID messages.</param>
            <param name="relyingPartyRealm">The URL of the Relying Party web site.
            This will typically be the home page, but may be a longer URL if
            that Relying Party considers the scope of its realm to be more specific.
            The URL provided here must allow discovery of the Relying Party's
            XRDS document that advertises its OpenID RP endpoint.</param>
            <param name="claimedIdentifier">The Identifier you are asserting your member controls.</param>
            <param name="localIdentifier">The Identifier you know your user by internally.  This will typically
            be the same as <paramref name="claimedIdentifier"/>.</param>
            <param name="extensions">The extensions.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.PrepareUnsolicitedAssertion(System.Uri,DotNetOpenAuth.OpenId.Realm,DotNetOpenAuth.OpenId.Identifier,DotNetOpenAuth.OpenId.Identifier,DotNetOpenAuth.Messaging.IExtensionMessage[])">
            <summary>
            Prepares an identity assertion on behalf of one of this Provider's
            members in order to redirect the user agent to a relying party
            web site and log him/her in immediately in one uninterrupted step.
            </summary>
            <param name="providerEndpoint">The absolute URL on the Provider site that receives OpenID messages.</param>
            <param name="relyingPartyRealm">The URL of the Relying Party web site.
            This will typically be the home page, but may be a longer URL if
            that Relying Party considers the scope of its realm to be more specific.
            The URL provided here must allow discovery of the Relying Party's
            XRDS document that advertises its OpenID RP endpoint.</param>
            <param name="claimedIdentifier">The Identifier you are asserting your member controls.</param>
            <param name="localIdentifier">The Identifier you know your user by internally.  This will typically
            be the same as <paramref name="claimedIdentifier"/>.</param>
            <param name="extensions">The extensions.</param>
            <returns>
            A <see cref="T:DotNetOpenAuth.Messaging.OutgoingWebResponse"/> object describing the HTTP response to send
            the user agent to allow the redirect with assertion to happen.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.ApplyBehaviorsToResponse(DotNetOpenAuth.OpenId.Provider.IRequest)">
            <summary>
            Applies all behaviors to the response message.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.GetErrorResponse(DotNetOpenAuth.Messaging.ProtocolException,System.Web.HttpRequestBase,DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Prepares the return value for the GetRequest method in the event of an exception.
            </summary>
            <param name="ex">The exception that forms the basis of the error response.  Must not be null.</param>
            <param name="httpRequestInfo">The incoming HTTP request.  Must not be null.</param>
            <param name="incomingMessage">The incoming message.  May be null in the case that it was malformed.</param>
            <returns>
            Either the <see cref="T:DotNetOpenAuth.OpenId.Provider.IRequest"/> to return to the host site or null to indicate no response could be reasonably created and that the caller should rethrow the exception.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.OnBehaviorsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called by derived classes when behaviors are added or removed.
            </summary>
            <param name="sender">The collection being modified.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.HttpApplicationStore">
            <summary>
            Gets the standard state storage mechanism that uses ASP.NET's
            HttpApplication state dictionary to store associations and nonces.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.Channel">
            <summary>
            Gets the channel to use for sending/receiving messages.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SecuritySettings">
            <summary>
            Gets the security settings used by this Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.DotNetOpenAuth#OpenId#IOpenIdHost#SecuritySettings">
            <summary>
            Gets the security settings.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.ExtensionFactories">
            <summary>
            Gets the extension factories.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.ErrorReporting">
            <summary>
            Gets or sets the mechanism a host site can use to receive
            notifications of errors when communicating with remote parties.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.Behaviors">
            <summary>
            Gets a list of custom behaviors to apply to OpenID actions.
            </summary>
            <remarks>
            Adding behaviors can impact the security settings of the <see cref="T:DotNetOpenAuth.OpenId.Provider.OpenIdProvider"/>
            in ways that subsequently removing the behaviors will not reverse.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.CryptoKeyStore">
            <summary>
            Gets the crypto key store.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.DotNetOpenAuth#OpenId#IOpenIdHost#WebRequestHandler">
            <summary>
            Gets the web request handler to use for discovery and the part of
            authentication where direct messages are sent to an untrusted remote party.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.AssociationStore">
            <summary>
            Gets the association store.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.OpenIdChannel">
            <summary>
            Gets the channel.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.DiscoveryServices">
            <summary>
            Gets the list of services that can perform discovery on identifiers given.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.WebRequestHandler">
            <summary>
            Gets the web request handler to use for discovery and the part of
            authentication where direct messages are sent to an untrusted remote party.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SwitchingAssociationStore">
            <summary>
            Provides a single OP association store instance that can handle switching between
            association handle encoding modes.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SwitchingAssociationStore.securitySettings">
            <summary>
            The security settings of the Provider.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SwitchingAssociationStore.associationHandleEncoder">
            <summary>
            The association store that records association secrets in the association handles themselves.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SwitchingAssociationStore.associationSecretStorage">
            <summary>
            The association store that records association secrets in a secret store.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SwitchingAssociationStore.#ctor(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore,DotNetOpenAuth.OpenId.Provider.ProviderSecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SwitchingAssociationStore"/> class.
            </summary>
            <param name="cryptoKeyStore">The crypto key store.</param>
            <param name="securitySettings">The security settings.</param>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SwitchingAssociationStore.Serialize(System.Byte[],System.DateTime,System.Boolean)">
            <summary>
            Stores an association and returns a handle for it.
            </summary>
            <param name="secret">The association secret.</param>
            <param name="expiresUtc">The UTC time that the association should expire.</param>
            <param name="privateAssociation">A value indicating whether this is a private association.</param>
            <returns>
            The association handle that represents this association.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SwitchingAssociationStore.Deserialize(DotNetOpenAuth.Messaging.IProtocolMessage,System.Boolean,System.String)">
            <summary>
            Retrieves an association given an association handle.
            </summary>
            <param name="containingMessage">The OpenID message that referenced this association handle.</param>
            <param name="isPrivateAssociation">A value indicating whether a private association is expected.</param>
            <param name="handle">The association handle.</param>
            <returns>
            An association instance, or <c>null</c> if the association has expired or the signature is incorrect (which may be because the OP's symmetric key has changed).
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the association is not of the expected type.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OpenId.Provider.OpenIdProvider.SwitchingAssociationStore.AssociationStore">
            <summary>
            Gets the association store that applies given the Provider's current security settings.
            </summary>
        </member>
    </members>
</doc>
