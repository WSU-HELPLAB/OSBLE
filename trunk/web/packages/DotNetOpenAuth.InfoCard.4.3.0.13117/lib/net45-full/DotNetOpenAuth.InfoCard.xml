<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetOpenAuth.InfoCard</name>
    </assembly>
    <members>
        <member name="T:DotNetOpenAuth.InfoCardErrorUtilities">
            <summary>
            Error reporting methods specific to InfoCard validation.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.InfoCardErrorUtilities.VerifyInfoCard(System.Boolean,System.String,System.Object[])">
            <summary>
            Checks a condition and throws an <see cref="T:DotNetOpenAuth.InfoCard.InformationCardException"/> 
            if it evaluates to false.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="errorMessage">The message to include in the exception, if created.</param>
            <param name="args">The formatting arguments.</param>
            <exception cref="T:DotNetOpenAuth.InfoCard.InformationCardException">Thrown if <paramref name="condition"/> evaluates to <c>false</c>.</exception>
        </member>
        <member name="T:DotNetOpenAuth.InfoCard.InfoCardStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.InfoCardStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.InfoCardStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.InfoCardStrings.AudienceMismatch">
            <summary>
              Looks up a localized string similar to The token is invalid: The audience restrictions does not match the Relying Party..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.InfoCardStrings.EmptyClaimListNotAllowed">
            <summary>
              Looks up a localized string similar to The list of claims requested for inclusion in the InfoCard must be non-empty..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.InfoCardStrings.EncryptionAlgorithmNotFound">
            <summary>
              Looks up a localized string similar to Failed to find the encryptionAlgorithm..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.InfoCardStrings.PpidClaimRequired">
            <summary>
              Looks up a localized string similar to This operation requires the PPID claim to be included in the InfoCard token..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.InfoCardStrings.PrivacyVersionRequiredWithPrivacyUrl">
            <summary>
              Looks up a localized string similar to The PrivacyVersion property must be set whenever the PrivacyUrl property is set..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.InfoCardStrings.SelectorClickPrompt">
            <summary>
              Looks up a localized string similar to Click here to select your Information Card..
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.InfoCard.InformationCardException">
            <summary>
            An exception class for Information Cards.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.InformationCardException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.InfoCard.InformationCardException"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.InformationCardException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.InfoCard.InformationCardException"/> class with a specified
            error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.InformationCardException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.InfoCard.InformationCardException"/> class
            with a specified error message and a reference to the inner exception that is
            the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
                (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.InformationCardException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.InfoCard.InformationCardException"/> class
             with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:DotNetOpenAuth.InfoCard.Token">
            <summary>
            The decrypted token that was submitted as an Information Card.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.Token.claims">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.InfoCard.Token.Claims"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.Token.uniqueId">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.InfoCard.Token.UniqueId"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.Token.#ctor(System.String,System.Uri,DotNetOpenAuth.InfoCard.TokenDecryptor)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.InfoCard.Token"/> class.
            </summary>
            <param name="tokenXml">Xml token, which may be encrypted.</param>
            <param name="audience">The audience.  May be <c>null</c> to avoid audience checking.</param>
            <param name="decryptor">The decryptor to use to decrypt the token, if necessary..</param>
            <exception cref="T:DotNetOpenAuth.InfoCard.InformationCardException">Thrown for any problem decoding or decrypting the token.</exception>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.Token.Read(System.String)">
            <summary>
            Deserializes an XML document into a token.
            </summary>
            <param name="tokenXml">The token XML.</param>
            <returns>The deserialized token.</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.Token.Read(System.String,System.Uri)">
            <summary>
            Deserializes an XML document into a token.
            </summary>
            <param name="tokenXml">The token XML.</param>
            <param name="audience">The URI that this token must have been crafted to be sent to.  Use <c>null</c> to accept any intended audience.</param>
            <returns>The deserialized token.</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.Token.Read(System.String,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityToken})">
            <summary>
            Deserializes an XML document into a token.
            </summary>
            <param name="tokenXml">The token XML.</param>
            <param name="decryptionTokens">Any X.509 certificates that may be used to decrypt the token, if necessary.</param>
            <returns>The deserialized token.</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.Token.Read(System.String,System.Uri,System.Collections.Generic.IEnumerable{System.IdentityModel.Tokens.SecurityToken})">
            <summary>
            Deserializes an XML document into a token.
            </summary>
            <param name="tokenXml">The token XML.</param>
            <param name="audience">The URI that this token must have been crafted to be sent to.  Use <c>null</c> to accept any intended audience.</param>
            <param name="decryptionTokens">Any X.509 certificates that may be used to decrypt the token, if necessary.</param>
            <returns>The deserialized token.</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.Token.IsEncrypted(System.String)">
            <summary>
            Determines whether the specified token XML is encrypted.
            </summary>
            <param name="tokenXml">The token XML.</param>
            <returns>
            	<c>true</c> if the specified token XML is encrypted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.Token.IsEncrypted(System.Xml.XmlReader)">
            <summary>
            Determines whether the specified token XML is encrypted.
            </summary>
            <param name="tokenXmlReader">The token XML.</param>
            <returns>
            	<c>true</c> if the specified token XML is encrypted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.Token.GetFlattenedClaims">
            <summary>
            Flattens the claims into a dictionary
            </summary>
            <returns>A dictionary of claim type URIs and claim values.</returns>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.Token.AuthorizationContext">
            <summary>
            Gets the AuthorizationContext behind this token.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.Token.Xml">
            <summary>
            Gets the the decrypted token XML.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.Token.UniqueId">
            <summary>
            Gets the UniqueID of this token, usable as a stable username that the user
            has already verified belongs to him/her.
            </summary>
            <remarks>
            By default, this uses the PPID and the Issuer's Public Key and hashes them 
            together to generate a UniqueID.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.Token.IssuerPubKeyHash">
            <summary>
            Gets the hash of the card issuer's public key.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.Token.SiteSpecificId">
            <summary>
            Gets the Site Specific ID that the user sees in the Identity Selector.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.Token.Claims">
            <summary>
            Gets the claims in all the claimsets as a dictionary of strings.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.InfoCard.TokenUtility">
            <summary>
            Tools for reading InfoCard tokens.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenUtility.AuthenticateToken(System.Xml.XmlReader,System.Uri)">
            <summary>
            Token Authentication.  Translates the decrypted data into a AuthContext.
            </summary>
            <param name="reader">The token XML reader.</param>
            <param name="audience">The audience that the token must be scoped for.
            Use <c>null</c> to indicate any audience is acceptable.</param>
            <returns>
            The authorization context carried by the token.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenUtility.GetResourceValue(System.IdentityModel.Claims.Claim)">
            <summary>
            Translates claims to strings
            </summary>
            <param name="claim">Claim to translate to a string</param>
            <returns>The string representation of a claim's value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenUtility.GetIssuerPubKeyHash(System.IdentityModel.Policy.AuthorizationContext)">
            <summary>
            Generates a UniqueID based off the Issuer's key
            </summary>
            <param name="authzContext">the Authorization Context</param>
            <returns>the hash of the internal key of the issuer</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenUtility.GetUniqueName(System.IdentityModel.Policy.AuthorizationContext)">
            <summary>
            Generates a UniqueID based off the Issuer's key and the PPID.
            </summary>
            <param name="authzContext">The Authorization Context</param>
            <returns>A unique ID for this user at this web site.</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenUtility.CalculateSiteSpecificID(System.String)">
            <summary>
            Generates the Site Specific ID to match the one in the Identity Selector.
            </summary>
            <value>The ID displayed by the Identity Selector.</value>
            <param name="ppid">The personal private identifier.</param>
            <returns>A string containing the XXX-XXXX-XXX cosmetic value.</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenUtility.GetUniqueRsaClaim(System.IdentityModel.Claims.ClaimSet)">
            <summary>
            Gets the Unique RSA Claim from the SAML token.
            </summary>
            <param name="cs">the claimset which contains the claim</param>
            <returns>a RSA claim</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenUtility.ComputeCombinedId(System.Security.Cryptography.RSA,System.String)">
            <summary>
            Does the actual calculation of a combined ID from a value and an RSA key.
            </summary>
            <param name="issuerKey">The key of the issuer of the token</param>
            <param name="claimValue">the claim value to hash with.</param>
            <returns>A base64 representation of the combined ID.</returns>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.TokenUtility.MaximumClockSkew">
            <summary>
            Gets the maximum amount the token can be out of sync with time.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.InfoCard.TokenDecryptor">
            <summary>
            A utility class for decrypting InfoCard tokens.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.TokenDecryptor.tokens">
            <summary>
            Backing field for the <see cref="P:DotNetOpenAuth.InfoCard.TokenDecryptor.Tokens"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenDecryptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.InfoCard.TokenDecryptor"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenDecryptor.AddDecryptionCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds a certificate to the list of certificates to decrypt with.
            </summary>
            <param name="certificate">The x509 cert to use for decryption</param>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenDecryptor.AddDecryptionCertificate(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Adds a certificate to the list of certificates to decrypt with.
            </summary>
            <param name="storeName">store name of the certificate</param>
            <param name="storeLocation">store location</param>
            <param name="thumbprint">thumbprint of the cert to use</param>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenDecryptor.AddDecryptionCertificates(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Adds a store of certificates to the list of certificates to decrypt with.
            </summary>
            <param name="storeName">store name of the certificates</param>
            <param name="storeLocation">store location</param>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenDecryptor.DecryptToken(System.Xml.XmlReader)">
            <summary>
            Decrpyts a security token from an XML EncryptedData 
            </summary>
            <param name="reader">The encrypted token XML reader.</param>
            <returns>A byte array of the contents of the encrypted token</returns>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.TokenDecryptor.AddDecryptionCertificates(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.Func{System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Security.Cryptography.X509Certificates.X509Certificate2Collection})">
            <summary>
            Adds a store of certificates to the list of certificates to decrypt with.
            </summary>
            <param name="storeName">store name of the certificates</param>
            <param name="storeLocation">store location</param>
            <param name="filter">A filter to on the certificates to add.</param>
        </member>
        <member name="P:DotNetOpenAuth.InfoCard.TokenDecryptor.Tokens">
            <summary>
            Gets a list of possible decryption certificates, from the store/location set
            </summary>
            <remarks>
            Defaults to localmachine:my (same place SSL certs are)
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.InfoCard.TokenDecryptor.XmlEncryptionStrings">
            <summary>
            A set of strings used in parsing the XML token.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.TokenDecryptor.XmlEncryptionStrings.Namespace">
            <summary>
            The "http://www.w3.org/2001/04/xmlenc#" value.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.TokenDecryptor.XmlEncryptionStrings.EncryptionMethod">
            <summary>
            The "EncryptionMethod" value.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.TokenDecryptor.XmlEncryptionStrings.CipherValue">
            <summary>
            The "CipherValue" value.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.TokenDecryptor.XmlEncryptionStrings.Algorithm">
            <summary>
            The "Algorithm" value.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.TokenDecryptor.XmlEncryptionStrings.EncryptedData">
            <summary>
            The "EncryptedData" value.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.TokenDecryptor.XmlEncryptionStrings.CipherData">
            <summary>
            The "CipherData" value.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.InfoCard.WellKnownIssuers">
            <summary>
            Common InfoCard issuers.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.InfoCard.WellKnownIssuers.SelfIssued">
            <summary>
            The Issuer URI to use for self-issued cards.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.InfoCard.WellKnownIssuers.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.InfoCard.WellKnownIssuers"/> class from being created.
            </summary>
        </member>
    </members>
</doc>
