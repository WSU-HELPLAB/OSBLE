<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetOpenAuth.OAuth.ServiceProvider</name>
    </assembly>
    <members>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.IConsumerDescription">
            <summary>
            A description of a consumer from a Service Provider's point of view.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IConsumerDescription.Key">
            <summary>
            Gets the Consumer key.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IConsumerDescription.Secret">
            <summary>
            Gets the consumer secret.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IConsumerDescription.Certificate">
            <summary>
            Gets the certificate that can be used to verify the signature of an incoming
            message from a Consumer.
            </summary>
            <returns>The public key from the Consumer's X.509 Certificate, if one can be found; otherwise <c>null</c>.</returns>
            <remarks>
            This property must be implemented only if the RSA-SHA1 algorithm is supported by the Service Provider.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IConsumerDescription.Callback">
            <summary>
            Gets the callback URI that this consumer has pre-registered with the service provider, if any.
            </summary>
            <value>A URI that user authorization responses should be directed to; or <c>null</c> if no preregistered callback was arranged.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IConsumerDescription.VerificationCodeFormat">
            <summary>
            Gets the verification code format that is most appropriate for this consumer
            when a callback URI is not available.
            </summary>
            <value>A set of characters that can be easily keyed in by the user given the Consumer's
            application type and form factor.</value>
            <remarks>
            The value <see cref="F:DotNetOpenAuth.OAuth.VerificationCodeFormat.IncludedInCallback"/> should NEVER be returned
            since this property is only used in no callback scenarios anyway.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IConsumerDescription.VerificationCodeLength">
            <summary>
            Gets the length of the verification code to issue for this Consumer.
            </summary>
            <value>A positive number, generally at least 4.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderAccessToken">
            <summary>
            A description of an access token and its metadata as required by a Service Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderAccessToken.Token">
            <summary>
            Gets the token itself.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderAccessToken.ExpirationDate">
            <summary>
            Gets the expiration date (local time) for the access token.
            </summary>
            <value>The expiration date, or <c>null</c> if there is no expiration date.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderAccessToken.Username">
            <summary>
            Gets the username of the principal that will be impersonated by this access token.
            </summary>
            <value>
            The name of the user who authorized the OAuth request token originally.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderAccessToken.Roles">
            <summary>
            Gets the roles that the OAuth principal should belong to.
            </summary>
            <value>
            The roles that the user belongs to, or a subset of these according to the rights
            granted when the user authorized the request token.
            </value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken">
            <summary>
            A description of a request token and its metadata as required by a Service Provider
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken.Token">
            <summary>
            Gets the token itself.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken.ConsumerKey">
            <summary>
            Gets the consumer key that requested this token.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken.CreatedOn">
            <summary>
            Gets the (local) date that this request token was first created on.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken.Callback">
            <summary>
            Gets or sets the callback associated specifically with this token, if any.
            </summary>
            <value>The callback URI; or <c>null</c> if no callback was specifically assigned to this token.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken.VerificationCode">
            <summary>
            Gets or sets the verifier that the consumer must include in the <see cref="T:DotNetOpenAuth.OAuth.Messages.AuthorizedTokenRequest"/>
            message to exchange this request token for an access token.
            </summary>
            <value>The verifier code, or <c>null</c> if none has been assigned (yet).</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken.ConsumerVersion">
            <summary>
            Gets or sets the version of the Consumer that requested this token.
            </summary>
            <remarks>
            This property is used to determine whether a <see cref="P:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken.VerificationCode"/> must be
            generated when the user authorizes the Consumer or not.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager">
            <summary>
            A token manager for use by a web site in its role as a
            service provider.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager.GetConsumer(System.String)">
            <summary>
            Gets the Consumer description for a given a Consumer Key.
            </summary>
            <param name="consumerKey">The Consumer Key.</param>
            <returns>A description of the consumer.  Never null.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the consumer key cannot be found.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager.IsRequestTokenAuthorized(System.String)">
            <summary>
            Checks whether a given request token has already been authorized
            by some user for use by the Consumer that requested it.
            </summary>
            <param name="requestToken">The Consumer's request token.</param>
            <returns>
            True if the request token has already been fully authorized by the user
            who owns the relevant protected resources.  False if the token has not yet
            been authorized, has expired or does not exist.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager.GetRequestToken(System.String)">
            <summary>
            Gets details on the named request token.
            </summary>
            <param name="token">The request token.</param>
            <returns>A description of the token.  Never null.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the token cannot be found.</exception>
            <remarks>
            It is acceptable for implementations to find the token, see that it has expired,
            delete it from the database and then throw <see cref="T:System.Collections.Generic.KeyNotFoundException"/>,
            or alternatively it can return the expired token anyway and the OAuth channel will
            log and throw the appropriate error.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager.GetAccessToken(System.String)">
            <summary>
            Gets details on the named access token.
            </summary>
            <param name="token">The access token.</param>
            <returns>A description of the token.  Never null.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the token cannot be found.</exception>
            <remarks>
            It is acceptable for implementations to find the token, see that it has expired,
            delete it from the database and then throw <see cref="T:System.Collections.Generic.KeyNotFoundException"/>,
            or alternatively it can return the expired token anyway and the OAuth channel will
            log and throw the appropriate error.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager.UpdateToken(DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken)">
            <summary>
            Persists any changes made to the token.
            </summary>
            <param name="token">The token whose properties have been changed.</param>
            <remarks>
            This library will invoke this method after making a set
            of changes to the token as part of a web request to give the host
            the opportunity to persist those changes to a database.
            Depending on the object persistence framework the host site uses,
            this method MAY not need to do anything (if changes made to the token
            will automatically be saved without any extra handling).
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract">
            <summary>
            Code contract class for the <see cref="T:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#GetConsumer(System.String)">
            <summary>
            Gets the Consumer description for a given a Consumer Key.
            </summary>
            <param name="consumerKey">The Consumer Key.</param>
            <returns>
            A description of the consumer.  Never null.
            </returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the consumer key cannot be found.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#IsRequestTokenAuthorized(System.String)">
            <summary>
            Checks whether a given request token has already been authorized
            by some user for use by the Consumer that requested it.
            </summary>
            <param name="requestToken">The Consumer's request token.</param>
            <returns>
            True if the request token has already been fully authorized by the user
            who owns the relevant protected resources.  False if the token has not yet
            been authorized, has expired or does not exist.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#GetRequestToken(System.String)">
            <summary>
            Gets details on the named request token.
            </summary>
            <param name="token">The request token.</param>
            <returns>A description of the token.  Never null.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the token cannot be found.</exception>
            <remarks>
            It is acceptable for implementations to find the token, see that it has expired,
            delete it from the database and then throw <see cref="T:System.Collections.Generic.KeyNotFoundException"/>,
            or alternatively it can return the expired token anyway and the OAuth channel will
            log and throw the appropriate error.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#GetAccessToken(System.String)">
            <summary>
            Gets details on the named access token.
            </summary>
            <param name="token">The access token.</param>
            <returns>A description of the token.  Never null.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the token cannot be found.</exception>
            <remarks>
            It is acceptable for implementations to find the token, see that it has expired,
            delete it from the database and then throw <see cref="T:System.Collections.Generic.KeyNotFoundException"/>,
            or alternatively it can return the expired token anyway and the OAuth channel will
            log and throw the appropriate error.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.DotNetOpenAuth#OAuth#ChannelElements#IServiceProviderTokenManager#UpdateToken(DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderRequestToken)">
            <summary>
            Persists any changes made to the token.
            </summary>
            <param name="token">The token whose properties have been changed.</param>
            <remarks>
            This library will invoke this method after making a set
            of changes to the token as part of a web request to give the host
            the opportunity to persist those changes to a database.
            Depending on the object persistence framework the host site uses,
            this method MAY not need to do anything (if changes made to the token
            will automatically be saved without any extra handling).
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#GetTokenSecret(System.String)">
            <summary>
            Gets the Token Secret given a request or access token.
            </summary>
            <param name="token">The request or access token.</param>
            <returns>
            The secret associated with the given token.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the secret cannot be found for the given token.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#StoreNewRequestToken(DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest,DotNetOpenAuth.OAuth.Messages.ITokenSecretContainingMessage)">
            <summary>
            Stores a newly generated unauthorized request token, secret, and optional
            application-specific parameters for later recall.
            </summary>
            <param name="request">The request message that resulted in the generation of a new unauthorized request token.</param>
            <param name="response">The response message that includes the unauthorized request token.</param>
            <exception cref="T:System.ArgumentException">Thrown if the consumer key is not registered, or a required parameter was not found in the parameters collection.</exception>
            <remarks>
            Request tokens stored by this method SHOULD NOT associate any user account with this token.
            It usually opens up security holes in your application to do so.  Instead, you associate a user
            account with access tokens (not request tokens) in the <see cref="M:DotNetOpenAuth.OAuth.ChannelElements.ITokenManager.ExpireRequestTokenAndStoreNewAccessToken(System.String,System.String,System.String,System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#ExpireRequestTokenAndStoreNewAccessToken(System.String,System.String,System.String,System.String)">
            <summary>
            Deletes a request token and its associated secret and stores a new access token and secret.
            </summary>
            <param name="consumerKey">The Consumer that is exchanging its request token for an access token.</param>
            <param name="requestToken">The Consumer's request token that should be deleted/expired.</param>
            <param name="accessToken">The new access token that is being issued to the Consumer.</param>
            <param name="accessTokenSecret">The secret associated with the newly issued access token.</param>
            <remarks>
            	<para>
            Any scope of granted privileges associated with the request token from the
            original call to <see cref="M:DotNetOpenAuth.OAuth.ChannelElements.ITokenManager.StoreNewRequestToken(DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest,DotNetOpenAuth.OAuth.Messages.ITokenSecretContainingMessage)"/> should be carried over
            to the new Access Token.
            </para>
            	<para>
            To associate a user account with the new access token,
            <see cref="P:System.Web.HttpContext.User">HttpContext.Current.User</see> may be
            useful in an ASP.NET web application within the implementation of this method.
            Alternatively you may store the access token here without associating with a user account,
            and wait until WebConsumer.ProcessUserAuthorization or
            DesktopConsumer.ProcessUserAuthorization return the access
            token to associate the access token with a user account at that point.
            </para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManagerContract.DotNetOpenAuth#OAuth#ChannelElements#ITokenManager#GetTokenType(System.String)">
            <summary>
            Classifies a token as a request token or an access token.
            </summary>
            <param name="token">The token to classify.</param>
            <returns>
            Request or Access token, or invalid if the token is not recognized.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.ITokenGenerator">
            <summary>
            An interface allowing OAuth hosts to inject their own algorithm for generating tokens and secrets.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.ITokenGenerator.GenerateRequestToken(System.String)">
            <summary>
            Generates a new token to represent a not-yet-authorized request to access protected resources.
            </summary>
            <param name="consumerKey">The consumer that requested this token.</param>
            <returns>The newly generated token.</returns>
            <remarks>
            This method should not store the newly generated token in any persistent store.
            This will be done in <see cref="M:DotNetOpenAuth.OAuth.ChannelElements.ITokenManager.StoreNewRequestToken(DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest,DotNetOpenAuth.OAuth.Messages.ITokenSecretContainingMessage)"/>.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.ITokenGenerator.GenerateAccessToken(System.String)">
            <summary>
            Generates a new token to represent an authorized request to access protected resources.
            </summary>
            <param name="consumerKey">The consumer that requested this token.</param>
            <returns>The newly generated token.</returns>
            <remarks>
            This method should not store the newly generated token in any persistent store.
            This will be done in <see cref="M:DotNetOpenAuth.OAuth.ChannelElements.ITokenManager.ExpireRequestTokenAndStoreNewAccessToken(System.String,System.String,System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.ITokenGenerator.GenerateSecret">
            <summary>
            Returns a cryptographically strong random string for use as a token secret.
            </summary>
            <returns>The generated string.</returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.OAuth1Principal">
            <summary>
            Represents an OAuth consumer that is impersonating a known user on the system.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.OAuth1Principal.#ctor(DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderAccessToken)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth.ChannelElements.OAuth1Principal"/> class.
            </summary>
            <param name="token">The access token.</param>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderChannel">
            <summary>
            The messaging channel for OAuth 1.0(a) Service Providers.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderChannel.#ctor(DotNetOpenAuth.Messaging.ITamperProtectionChannelBindingElement,DotNetOpenAuth.Messaging.Bindings.INonceStore,DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager,DotNetOpenAuth.OAuth.ServiceProviderSecuritySettings,DotNetOpenAuth.Messaging.IMessageFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderChannel"/> class.
            </summary>
            <param name="signingBindingElement">The binding element to use for signing.</param>
            <param name="store">The web application store to use for nonces.</param>
            <param name="tokenManager">The token manager instance to use.</param>
            <param name="securitySettings">The security settings.</param>
            <param name="messageTypeProvider">The message type provider.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderChannel.GetConsumerSecret(System.String)">
            <summary>
            Gets the consumer secret for a given consumer key.
            </summary>
            <param name="consumerKey">The consumer key.</param>
            <returns>The consumer secret.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderChannel.InitializeBindingElements(DotNetOpenAuth.Messaging.ITamperProtectionChannelBindingElement,DotNetOpenAuth.Messaging.Bindings.INonceStore,DotNetOpenAuth.OAuth.ChannelElements.ITokenManager,DotNetOpenAuth.OAuth.SecuritySettings)">
            <summary>
            Initializes the binding elements for the OAuth channel.
            </summary>
            <param name="signingBindingElement">The signing binding element.</param>
            <param name="store">The nonce store.</param>
            <param name="tokenManager">The token manager.</param>
            <param name="securitySettings">The security settings.</param>
            <returns>
            An array of binding elements used to initialize the channel.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory">
            <summary>
            An OAuth-protocol specific implementation of the <see cref="T:DotNetOpenAuth.Messaging.IMessageFactory"/>
            interface.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory.tokenManager">
            <summary>
            The token manager to use for discerning between request and access tokens.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory.#ctor(DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory"/> class.
            </summary>
            <param name="tokenManager">The token manager instance to use.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory.GetNewRequestMessage(DotNetOpenAuth.Messaging.MessageReceivingEndpoint,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="recipient">The intended or actual recipient of the request message.</param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            A newly instantiated <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived object that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
            <remarks>
            The request messages are:
            UnauthorizedTokenRequest
            AuthorizedTokenRequest
            UserAuthorizationRequest
            AccessProtectedResourceRequest
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory.GetNewResponseMessage(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Analyzes an incoming request message payload to discover what kind of 
            message is embedded in it and returns the type, or null if no match is found.
            </summary>
            <param name="request">
            The message that was sent as a request that resulted in the response.
            Null on a Consumer site that is receiving an indirect message from the Service Provider.
            </param>
            <param name="fields">The name/value pairs that make up the message payload.</param>
            <returns>
            The <see cref="T:DotNetOpenAuth.Messaging.IProtocolMessage"/>-derived concrete class that this message can
            deserialize to.  Null if the request isn't recognized as a valid protocol message.
            </returns>
            <remarks>
            The response messages are:
            None.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement">
            <summary>
            A binding element that signs outgoing messages and verifies the signature on incoming messages.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement.tokenManager">
            <summary>
            The token manager for the service provider.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement.#ctor(DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement"/> class.
            </summary>
            <param name="tokenManager">The token manager.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement.IsSignatureValid(DotNetOpenAuth.OAuth.ChannelElements.ITamperResistantOAuthMessage)">
            <summary>
            Determines whether the signature on some message is valid.
            </summary>
            <param name="message">The message to check the signature on.</param>
            <returns>
            	<c>true</c> if the signature on the message is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement.GetSignature(DotNetOpenAuth.OAuth.ChannelElements.ITamperResistantOAuthMessage)">
            <summary>
            Calculates a signature for a given message.
            </summary>
            <param name="message">The message to sign.</param>
            <returns>
            The signature for the message.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.RsaSha1ServiceProviderSigningBindingElement.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            A new instance of the binding element.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.StandardTokenGenerator">
            <summary>
            A cryptographically strong random string generator for tokens and secrets.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.StandardTokenGenerator.GenerateRequestToken(System.String)">
            <summary>
            Generates a new token to represent a not-yet-authorized request to access protected resources.
            </summary>
            <param name="consumerKey">The consumer that requested this token.</param>
            <returns>The newly generated token.</returns>
            <remarks>
            This method should not store the newly generated token in any persistent store.
            This will be done in <see cref="M:DotNetOpenAuth.OAuth.ChannelElements.ITokenManager.StoreNewRequestToken(DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest,DotNetOpenAuth.OAuth.Messages.ITokenSecretContainingMessage)"/>.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.StandardTokenGenerator.GenerateAccessToken(System.String)">
            <summary>
            Generates a new token to represent an authorized request to access protected resources.
            </summary>
            <param name="consumerKey">The consumer that requested this token.</param>
            <returns>The newly generated token.</returns>
            <remarks>
            This method should not store the newly generated token in any persistent store.
            This will be done in <see cref="M:DotNetOpenAuth.OAuth.ChannelElements.ITokenManager.ExpireRequestTokenAndStoreNewAccessToken(System.String,System.String,System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.StandardTokenGenerator.GenerateSecret">
            <summary>
            Returns a cryptographically strong random string for use as a token secret.
            </summary>
            <returns>The generated string.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.StandardTokenGenerator.GenerateCryptographicallyStrongString">
            <summary>
            Returns a new random string.
            </summary>
            <returns>The new random string.</returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement">
            <summary>
            A binding element for Service Providers to manage the 
            callbacks and verification codes on applicable messages.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement.tokenManager">
            <summary>
            The token manager offered by the service provider.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement.securitySettings">
            <summary>
            The security settings for this service provider.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement.#ctor(DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager,DotNetOpenAuth.OAuth.ServiceProviderSecuritySettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement"/> class.
            </summary>
            <param name="tokenManager">The token manager.</param>
            <param name="securitySettings">The security settings.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for sending based on the rules of this channel binding element.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Performs any transformation on an incoming message that may be necessary and/or
            validates an incoming message based on the rules of this channel binding element.
            </summary>
            <param name="message">The incoming message to process.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the binding element rules indicate that this message is invalid and should
            NOT be processed.
            </exception>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement.VerifyThrowTokenNotExpired(DotNetOpenAuth.OAuth.Messages.AccessProtectedResourceRequest)">
            <summary>
            Ensures that access tokens have not yet expired.
            </summary>
            <param name="message">The incoming message carrying the access token.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement.VerifyThrowTokenTimeToLive(DotNetOpenAuth.OAuth.Messages.ITokenContainingMessage)">
            <summary>
            Ensures that short-lived request tokens included in incoming messages have not expired.
            </summary>
            <param name="message">The incoming message.</param>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the token in the message has expired.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement.Channel">
            <summary>
            Gets or sets the channel that this binding element belongs to.
            </summary>
            <remarks>
            This property is set by the channel when it is first constructed.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ChannelElements.TokenHandlingBindingElement.Protection">
            <summary>
            Gets the protection commonly offered (if any) by this binding element.
            </summary>
            <remarks>
            This value is used to assist in sorting binding elements in the channel stack.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.ServiceProvider">
            <summary>
            A web application that allows access via OAuth.
            </summary>
            <remarks>
            <para>The Service Provider’s documentation should include:</para>
            <list>
            <item>The URLs (Request URLs) the Consumer will use when making OAuth requests, and the HTTP methods (i.e. GET, POST, etc.) used in the Request Token URL and Access Token URL.</item>
            <item>Signature methods supported by the Service Provider.</item>
            <item>Any additional request parameters that the Service Provider requires in order to obtain a Token. Service Provider specific parameters MUST NOT begin with oauth_.</item>
            </list>
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ServiceProvider.ApplicationStoreKey">
            <summary>
            The name of the key to use in the HttpApplication cache to store the
            instance of <see cref="T:DotNetOpenAuth.Messaging.Bindings.NonceMemoryStore"/> to use.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ServiceProvider.VerifierCodeLength">
            <summary>
            The length of the verifier code (in raw bytes before base64 encoding) to generate.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.ServiceProvider.channel">
            <summary>
            The field behind the <see cref="P:DotNetOpenAuth.OAuth.ServiceProvider.OAuthChannel"/> property.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth.ServiceProvider"/> class.
            </summary>
            <param name="serviceDescription">The endpoints and behavior on the Service Provider.</param>
            <param name="tokenManager">The host's method of storing and recalling tokens and secrets.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager,DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth.ServiceProvider"/> class.
            </summary>
            <param name="serviceDescription">The endpoints and behavior on the Service Provider.</param>
            <param name="tokenManager">The host's method of storing and recalling tokens and secrets.</param>
            <param name="messageTypeProvider">An object that can figure out what type of message is being received for deserialization.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager,DotNetOpenAuth.Messaging.Bindings.INonceStore)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth.ServiceProvider"/> class.
            </summary>
            <param name="serviceDescription">The endpoints and behavior on the Service Provider.</param>
            <param name="tokenManager">The host's method of storing and recalling tokens and secrets.</param>
            <param name="nonceStore">The nonce store.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.#ctor(DotNetOpenAuth.OAuth.ServiceProviderDescription,DotNetOpenAuth.OAuth.ChannelElements.IServiceProviderTokenManager,DotNetOpenAuth.Messaging.Bindings.INonceStore,DotNetOpenAuth.OAuth.ChannelElements.OAuthServiceProviderMessageFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth.ServiceProvider"/> class.
            </summary>
            <param name="serviceDescription">The endpoints and behavior on the Service Provider.</param>
            <param name="tokenManager">The host's method of storing and recalling tokens and secrets.</param>
            <param name="nonceStore">The nonce store.</param>
            <param name="messageTypeProvider">An object that can figure out what type of message is being received for deserialization.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.CreateVerificationCode(DotNetOpenAuth.OAuth.VerificationCodeFormat,System.Int32)">
            <summary>
            Creates a cryptographically strong random verification code.
            </summary>
            <param name="format">The desired format of the verification code.</param>
            <param name="length">The length of the code.
            When <paramref name="format"/> is <see cref="F:DotNetOpenAuth.OAuth.VerificationCodeFormat.IncludedInCallback"/>,
            this is the length of the original byte array before base64 encoding rather than the actual
            length of the final string.</param>
            <returns>The verification code.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadRequest">
            <summary>
            Reads any incoming OAuth message.
            </summary>
            <returns>The deserialized message.</returns>
            <remarks>
            Requires HttpContext.Current.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadRequest(System.Web.HttpRequestBase)">
            <summary>
            Reads any incoming OAuth message.
            </summary>
            <param name="request">The HTTP request to read the message from.</param>
            <returns>The deserialized message.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadTokenRequest">
            <summary>
            Gets the incoming request for an unauthorized token, if any.
            </summary>
            <returns>The incoming request, or null if no OAuth message was attached.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if an unexpected OAuth message is attached to the incoming request.</exception>
            <remarks>
            Requires HttpContext.Current.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadTokenRequest(System.Web.HttpRequestBase)">
            <summary>
            Reads a request for an unauthorized token from the incoming HTTP request.
            </summary>
            <param name="request">The HTTP request to read from.</param>
            <returns>The incoming request, or null if no OAuth message was attached.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if an unexpected OAuth message is attached to the incoming request.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.PrepareUnauthorizedTokenMessage(DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest)">
            <summary>
            Prepares a message containing an unauthorized token for the Consumer to use in a 
            user agent redirect for subsequent authorization.
            </summary>
            <param name="request">The token request message the Consumer sent that the Service Provider is now responding to.</param>
            <returns>The response message to send using the <see cref="P:DotNetOpenAuth.OAuth.ServiceProvider.Channel"/>, after optionally adding extra data to it.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadAuthorizationRequest">
            <summary>
            Gets the incoming request for the Service Provider to authorize a Consumer's
            access to some protected resources.
            </summary>
            <returns>The incoming request, or null if no OAuth message was attached.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if an unexpected OAuth message is attached to the incoming request.</exception>
            <remarks>
            Requires HttpContext.Current.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadAuthorizationRequest(System.Web.HttpRequestBase)">
            <summary>
            Reads in a Consumer's request for the Service Provider to obtain permission from
            the user to authorize the Consumer's access of some protected resource(s).
            </summary>
            <param name="request">The HTTP request to read from.</param>
            <returns>The incoming request, or null if no OAuth message was attached.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if an unexpected OAuth message is attached to the incoming request.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.PrepareAuthorizationResponse(DotNetOpenAuth.OAuth.Messages.UserAuthorizationRequest)">
            <summary>
            Prepares the message to send back to the consumer following proper authorization of
            a token by an interactive user at the Service Provider's web site.
            </summary>
            <param name="request">The Consumer's original authorization request.</param>
            <returns>
            The message to send to the Consumer using <see cref="P:DotNetOpenAuth.OAuth.ServiceProvider.Channel"/> if one is necessary.
            Null if the Consumer did not request a callback as part of the authorization request.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.PrepareAuthorizationResponse(DotNetOpenAuth.OAuth.Messages.UserAuthorizationRequest,System.Uri)">
            <summary>
            Prepares the message to send back to the consumer following proper authorization of
            a token by an interactive user at the Service Provider's web site.
            </summary>
            <param name="request">The Consumer's original authorization request.</param>
            <param name="callback">The callback URI the consumer has previously registered
            with this service provider or that came in the <see cref="T:DotNetOpenAuth.OAuth.Messages.UnauthorizedTokenRequest"/>.</param>
            <returns>
            The message to send to the Consumer using <see cref="P:DotNetOpenAuth.OAuth.ServiceProvider.Channel"/>.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadAccessTokenRequest">
            <summary>
            Gets the incoming request to exchange an authorized token for an access token.
            </summary>
            <returns>The incoming request, or null if no OAuth message was attached.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if an unexpected OAuth message is attached to the incoming request.</exception>
            <remarks>
            Requires HttpContext.Current.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadAccessTokenRequest(System.Web.HttpRequestBase)">
            <summary>
            Reads in a Consumer's request to exchange an authorized request token for an access token.
            </summary>
            <param name="request">The HTTP request to read from.</param>
            <returns>The incoming request, or null if no OAuth message was attached.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if an unexpected OAuth message is attached to the incoming request.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.PrepareAccessTokenMessage(DotNetOpenAuth.OAuth.Messages.AuthorizedTokenRequest)">
            <summary>
            Prepares and sends an access token to a Consumer, and invalidates the request token.
            </summary>
            <param name="request">The Consumer's message requesting an access token.</param>
            <returns>The HTTP response to actually send to the Consumer.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadProtectedResourceAuthorization">
            <summary>
            Gets the authorization (access token) for accessing some protected resource.
            </summary>
            <returns>The authorization message sent by the Consumer, or null if no authorization message is attached.</returns>
            <remarks>
            This method verifies that the access token and token secret are valid.
            It falls on the caller to verify that the access token is actually authorized
            to access the resources being requested.
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if an unexpected message is attached to the request.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadProtectedResourceAuthorization(System.ServiceModel.Channels.HttpRequestMessageProperty,System.Uri)">
            <summary>
            Gets the authorization (access token) for accessing some protected resource.
            </summary>
            <param name="request">HTTP details from an incoming WCF message.</param>
            <param name="requestUri">The URI of the WCF service endpoint.</param>
            <returns>The authorization message sent by the Consumer, or null if no authorization message is attached.</returns>
            <remarks>
            This method verifies that the access token and token secret are valid.
            It falls on the caller to verify that the access token is actually authorized
            to access the resources being requested.
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if an unexpected message is attached to the request.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.ReadProtectedResourceAuthorization(System.Web.HttpRequestBase)">
            <summary>
            Gets the authorization (access token) for accessing some protected resource.
            </summary>
            <param name="request">The incoming HTTP request.</param>
            <returns>The authorization message sent by the Consumer, or null if no authorization message is attached.</returns>
            <remarks>
            This method verifies that the access token and token secret are valid.
            It falls on the caller to verify that the access token is actually authorized
            to access the resources being requested.
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if an unexpected message is attached to the request.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.CreatePrincipal(DotNetOpenAuth.OAuth.Messages.AccessProtectedResourceRequest)">
            <summary>
            Creates a security principal that may be used.
            </summary>
            <param name="request">The request.</param>
            <returns>The <see cref="T:System.Security.Principal.IPrincipal"/> instance that can be used for access control of resources.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth.ServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ServiceProvider.HttpApplicationStore">
            <summary>
            Gets the standard state storage mechanism that uses ASP.NET's
            HttpApplication state dictionary to store associations and nonces.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ServiceProvider.ServiceDescription">
            <summary>
            Gets the description of this Service Provider.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ServiceProvider.TokenGenerator">
            <summary>
            Gets or sets the generator responsible for generating new tokens and secrets.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ServiceProvider.TokenManager">
            <summary>
            Gets the persistence store for tokens and secrets.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ServiceProvider.Channel">
            <summary>
            Gets the channel to use for sending/receiving messages.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ServiceProvider.SecuritySettings">
            <summary>
            Gets the security settings for this service provider.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth.ServiceProvider.OAuthChannel">
            <summary>
            Gets or sets the channel to use for sending/receiving messages.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth.VerificationCodeFormat">
            <summary>
            The different formats a user authorization verifier code can take
            in order to be as secure as possible while being compatible with
            the type of OAuth Consumer requesting access.
            </summary>
            <remarks>
            Some Consumers may be set-top boxes, video games, mobile devies, etc.
            with very limited character entry support and no ability to receive
            a callback URI.  OAuth 1.0a requires that these devices operators
            must manually key in a verifier code, so in these cases it better
            be possible to do so given the input options on that device.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.VerificationCodeFormat.IncludedInCallback">
            <summary>
            The strongest verification code.
            The best option for web consumers since a callback is usually an option.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.VerificationCodeFormat.AlphaNumericNoLookAlikes">
            <summary>
            A combination of upper and lowercase letters and numbers may be used,
            allowing a computer operator to easily read from the screen and key
            in the verification code.
            </summary>
            <remarks>
            Some letters and numbers will be skipped where they are visually similar
            enough that they can be difficult to distinguish when displayed with most fonts.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.VerificationCodeFormat.AlphaUpper">
            <summary>
            Only uppercase letters will be used in the verification code.
            Verification codes are case-sensitive, so consumers with fixed
            keyboards with only one character case option may require this option.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.VerificationCodeFormat.AlphaLower">
            <summary>
            Only lowercase letters will be used in the verification code.
            Verification codes are case-sensitive, so consumers with fixed
            keyboards with only one character case option may require this option.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth.VerificationCodeFormat.Numeric">
            <summary>
            Only the numbers 0-9 will be used in the verification code.
            Must useful for consumers running on mobile phone devices.
            </summary>
        </member>
    </members>
</doc>
