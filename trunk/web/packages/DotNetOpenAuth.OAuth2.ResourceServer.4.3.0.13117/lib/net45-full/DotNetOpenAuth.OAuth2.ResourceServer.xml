<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetOpenAuth.OAuth2.ResourceServer</name>
    </assembly>
    <members>
        <member name="T:DotNetOpenAuth.Configuration.OAuth2ResourceServerSection">
            <summary>
            Represents the &lt;oauth2/resourceServer&gt; section in the host's .config file.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.Configuration.OAuth2ResourceServerSection.SectionName">
            <summary>
            The name of the oauth2/client section.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.Configuration.OAuth2ResourceServerSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.Configuration.OAuth2ResourceServerSection"/> class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.Configuration.OAuth2ResourceServerSection.Configuration">
            <summary>
            Gets the configuration section from the .config file.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel">
            <summary>
            The channel for the OAuth protocol.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.MessageTypes">
            <summary>
            The messages receivable by this channel.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.Versions">
            <summary>
            The protocol versions supported by this channel.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.ReadFromRequestCore(System.Web.HttpRequestBase)">
            <summary>
            Gets the protocol message that may be embedded in the given HTTP request.
            </summary>
            <param name="request">The request to search for an embedded message.</param>
            <returns>
            The deserialized message, if one is found.  Null otherwise.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.ReadFromResponseCore(DotNetOpenAuth.Messaging.IncomingWebResponse)">
            <summary>
            Gets the protocol message that may be in the given HTTP response.
            </summary>
            <param name="response">The response that is anticipated to contain an protocol message.</param>
            <returns>
            The deserialized message parts, if found.  Null otherwise.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the response is not valid.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.PrepareDirectResponse(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Queues a message for sending in the response stream where the fields
            are sent in the response stream in querystring style.
            </summary>
            <param name="response">The message to send as a response.</param>
            <returns>
            The pending user agent redirect based message to be sent as an HttpResponse.
            </returns>
            <remarks>
            This method implements spec OAuth V1.0 section 5.3.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.SearchForBearerAccessTokenInRequest(System.Web.HttpRequestBase)">
            <summary>
            Searches for a bearer access token in the request.
            </summary>
            <param name="request">The request.</param>
            <returns>The bearer access token, if one exists.  Otherwise <c>null</c>.</returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzer">
            <summary>
            An interface that resource server hosts should implement if they accept access tokens
            issued by non-DotNetOpenAuth authorization servers.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzer.DeserializeAccessToken(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.String)">
            <summary>
            Reads an access token to find out what data it authorizes access to.
            </summary>
            <param name="message">The message carrying the access token.</param>
            <param name="accessToken">The access token's serialized representation.</param>
            <returns>The deserialized, validated token.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the access token is expired, invalid, or from an untrusted authorization server.</exception>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzerContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzer"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzerContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzerContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzerContract.DotNetOpenAuth#OAuth2#IAccessTokenAnalyzer#DeserializeAccessToken(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.String)">
            <summary>
            Reads an access token to find out what data it authorizes access to.
            </summary>
            <param name="message">The message carrying the access token.</param>
            <param name="accessToken">The access token's serialized representation.</param>
            <returns>The deserialized, validated token.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the access token is expired, invalid, or from an untrusted authorization server.</exception>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ResourceServerStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServerStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServerStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServerStrings.ClientIdentifierLooksLikeResourceOwnerName">
            <summary>
              Looks up a localized string similar to Client Identifier starts with a resource owner prefix.  Authorization aborted..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServerStrings.InvalidAccessToken">
            <summary>
              Looks up a localized string similar to Invalid access token..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServerStrings.MissingAccessToken">
            <summary>
              Looks up a localized string similar to Missing access token..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServerStrings.ResourceOwnerNameLooksLikeClientIdentifier">
            <summary>
              Looks up a localized string similar to Resource owner username starts with a client prefix.  Authorization aborted..
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ResourceServer">
            <summary>
            Provides services for validating OAuth access tokens.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ResourceServer.DefaultScopeSatisfiedCheck">
            <summary>
            A reusable instance of the scope satisfied checker.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ResourceServer.#ctor(DotNetOpenAuth.OAuth2.IAccessTokenAnalyzer)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ResourceServer"/> class.
            </summary>
            <param name="accessTokenAnalyzer">The access token analyzer.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ResourceServer.GetAccessToken(System.Web.HttpRequestBase,System.String[])">
            <summary>
            Discovers what access the client should have considering the access token in the current request.
            </summary>
            <param name="httpRequestInfo">The HTTP request info.</param>
            <param name="requiredScopes">The set of scopes required to approve this request.</param>
            <returns>
            The access token describing the authorization the client has.  Never <c>null</c>.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolFaultResponseException">
            Thrown when the client is not authorized.  This exception should be caught and the
            <see cref="P:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.ErrorResponseMessage"/> message should be returned to the client.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ResourceServer.GetAccessToken(System.Net.Http.HttpRequestMessage,System.String[])">
            <summary>
            Discovers what access the client should have considering the access token in the current request.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="requiredScopes">The set of scopes required to approve this request.</param>
            <returns>
            The access token describing the authorization the client has.  Never <c>null</c>.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolFaultResponseException">
            Thrown when the client is not authorized.  This exception should be caught and the
            <see cref="P:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.ErrorResponseMessage"/> message should be returned to the client.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ResourceServer.GetPrincipal(System.Web.HttpRequestBase,System.String[])">
            <summary>
            Discovers what access the client should have considering the access token in the current request.
            </summary>
            <param name="httpRequestInfo">The HTTP request info.</param>
            <param name="requiredScopes">The set of scopes required to approve this request.</param>
            <returns>
            The principal that contains the user and roles that the access token is authorized for.  Never <c>null</c>.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolFaultResponseException">
            Thrown when the client is not authorized.  This exception should be caught and the
            <see cref="P:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.ErrorResponseMessage"/> message should be returned to the client.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ResourceServer.GetPrincipal(System.ServiceModel.Channels.HttpRequestMessageProperty,System.Uri,System.String[])">
            <summary>
            Discovers what access the client should have considering the access token in the current request.
            </summary>
            <param name="request">HTTP details from an incoming WCF message.</param>
            <param name="requestUri">The URI of the WCF service endpoint.</param>
            <param name="requiredScopes">The set of scopes required to approve this request.</param>
            <returns>
            The principal that contains the user and roles that the access token is authorized for.  Never <c>null</c>.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolFaultResponseException">
            Thrown when the client is not authorized.  This exception should be caught and the
            <see cref="P:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.ErrorResponseMessage"/> message should be returned to the client.
            </exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ResourceServer.GetPrincipal(System.Net.Http.HttpRequestMessage,System.String[])">
            <summary>
            Discovers what access the client should have considering the access token in the current request.
            </summary>
            <param name="request">HTTP details from an incoming HTTP request message.</param>
            <param name="requiredScopes">The set of scopes required to approve this request.</param>
            <returns>
            The principal that contains the user and roles that the access token is authorized for.  Never <c>null</c>.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolFaultResponseException">
            Thrown when the client is not authorized.  This exception should be caught and the
            <see cref="P:DotNetOpenAuth.Messaging.ProtocolFaultResponseException.ErrorResponseMessage"/> message should be returned to the client.
            </exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServer.AccessTokenAnalyzer">
            <summary>
            Gets the access token analyzer.
            </summary>
            <value>The access token analyzer.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServer.ScopeSatisfiedCheck">
            <summary>
            Gets or sets the service that checks whether a granted set of scopes satisfies a required set of scopes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServer.ResourceOwnerPrincipalPrefix">
            <summary>
            Gets or sets the prefix to apply to a resource owner's username when used as the username in an <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
            <value>The default value is the empty string.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServer.ClientPrincipalPrefix">
            <summary>
            Gets or sets the prefix to apply to a client identifier when used as the username in an <see cref="T:System.Security.Principal.IPrincipal"/>.
            </summary>
            <value>The default value is "client:"</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ResourceServer.Channel">
            <summary>
            Gets the channel.
            </summary>
            <value>The channel.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer">
            <summary>
            An access token reader that understands DotNetOpenAuth authorization server issued tokens.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer.#ctor(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer"/> class.
            </summary>
            <param name="authorizationServerPublicSigningKey">The crypto service provider with the authorization server public signing key.</param>
            <param name="resourceServerPrivateEncryptionKey">The crypto service provider with the resource server private encryption key.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer.DeserializeAccessToken(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.String)">
            <summary>
            Reads an access token to find out what data it authorizes access to.
            </summary>
            <param name="message">The message carrying the access token.</param>
            <param name="accessToken">The access token's serialized representation.</param>
            <returns>The deserialized, validated token.</returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the access token is expired, invalid, or from an untrusted authorization server.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer.AuthorizationServerPublicSigningKey">
            <summary>
            Gets the authorization server public signing key.
            </summary>
            <value>The authorization server public signing key.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer.ResourceServerPrivateEncryptionKey">
            <summary>
            Gets the resource server private encryption key.
            </summary>
            <value>The resource server private encryption key.</value>
        </member>
    </members>
</doc>
