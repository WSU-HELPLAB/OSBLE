@using OSBLE.Models.Assignments;
@using OSBLE.Models.Courses.Rubrics;
@using OSBLE.Areas.AssignmentWizard.ViewModels;
@model Assignment
@{
    Html.HiddenFor(m => m.ID);
    bool hasRubric = Model.HasRubric;
    string test;
    RubricSelectionViewModel rubricSelection = ViewBag.rubricSelection;

} 


<style media="screen" type="text/css">

.rubric {
	border-width: 1px;
	border-spacing: 2px;
	border-style: outset;
	border-collapse: collapse;
}
.rubric th {
	border-width: 1px;
	padding: 10px;
	border-style: inset;
}
.rubric td {
	border-width: 1px;
	padding: 10px;
	border-style: inset;
}

td.top
{
   vertical-align:top;
}

ul
{
    list-style-type: none;
    padding:0;
    margin:0;
}

.RubricSelect
{
    display:none;
}

.FloatLeft
{
    float:left;
}


</style>

<html> <body>

@Html.HiddenFor(m => m.ID)
<table>
    <tr>
        <td>
            @if (rubricSelection.CourseIds().Count > 0)
            {
            <text>Load Rubric from</text>
            <select class="CourseSelect">
                <option selected>Select Course</option>
                @foreach (int courseId in rubricSelection.CourseIds())
                {
                    <option id="@courseId" class ="CourseOption">@rubricSelection.GetCourseName(courseId)</option>
                }
            </select>
            }
        </td>

        <td>
            @*Create a hidden dropdown of assignment for each course
            When the user selects a course from the first select, the corresonding
            one here will become visible*@
            <form id="set_rubric" method="post" action="/AssignmentWizard/Rubric/LoadExistingRubric">
                @foreach(int courseId in rubricSelection.CourseIds())
                {
                    <select  id="Assignment_@(courseId)" class="RubricSelect">
                        <option>Select Assignment</option>
                        @foreach (RubricViewModel rvm in rubricSelection.rubricSelection[courseId].rubricViewModel)
                        {
                            <option class="AssignmentOption" value="@rvm.AssignmentID">@rvm.AssignmentName</option>
                        }
                    </select>
                }
            </form>
        </td>
    </tr>

    <tr>
        <td>
            <ul>
                <li>
                    <input type="checkbox" name="globalComments" value="globalComments" />Overall Comments
                </li>
                <li>
                    <input type="checkbox" name="criterionComments" value="criterionComments" />Comments for each criterion
                </li>
            </ul>
        </td>

        <td>
            <textarea name="rubricDescription" rows="2" cols="40">@ViewBag.rubricDescription</textarea>
        </td>
    </tr>
</table>

<table>
    <tr>
        <td>
            @* Start Table for Rubric *@
            <table id="dataTable" class="rubric">
                @*Row for column titles*@
                <tr>
                    <th>
                        Performance Criterion
                    </th>
                        
                    <th>Criterion<br />Weight</th>
                        
                    @* Level Title *@
                    @{
                        int n = 0;
                        foreach (Level level in ViewBag.levels)
                        {
                            <th class="level">
                                    <ul>
                                        <li>
                                        @*<input type="button" value="<" onclick="moveColumnLeft('dataTable', this.parentNode.parentNode.parentNode.cellIndex)" /> *@
                                            <input type="button" value="-" onclick="deleteColumn('dataTable', this.parentNode.parentNode.parentNode.cellIndex)" />
                                            @*<input type="button" value=">" onclick="moveColumnRight('dataTable', this.parentNode.parentNode.parentNode.cellIndex)" /> *@
                                        </li>
                                        <li>Level Point Spread
                                            <select class="SpreadInput" name="rubric:@n:S">
                                                @for (int i = 1; i <= 10; i++)
                                                {
                                                    if (i == 5)
                                                    {
                                                        <option selected value="@i">@i</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@i">@i</option>
                                                    }
                                                }
                                            </select>
                                        </li>
                                        <li>Level Title<input class="Input" name="rubric:@n:L" type="text" value="@level.LevelTitle"/></li>
                                    </ul>
                            </th>
                            n++;
                        }
                    }
                </tr>
                @{
                    n = 0;
                    foreach (List<string> row in ViewBag.rubricTable)
                    {
                        @*Default first row of rubric*@
                        <tr>
                            @*Performance Criterion*@
                            <td>
                                <ul style="float:left;vertical-align:middle">
                                    <li><input type="button" value="^" onclick="moveRowUp('dataTable', this.parentNode.parentNode.parentNode.parentNode.rowIndex)" /></li>
                                    <li><input type="button" value="-" onclick="deleteRow('dataTable', this.parentNode.parentNode.parentNode.parentNode.rowIndex)" /></li>
                                    <li><input type="button" value="v" onclick="moveRowDown('dataTable', this.parentNode.parentNode.parentNode.parentNode.rowIndex)" /></li>
                                </ul>
      
                                <textarea style="float:left"  class="Input center" name="rubric:0:@n" rows="5" cols="20">@row[0]</textarea>
                            </td>

                            @*Criterion Weight*@
                            <td style="vertical-align:top">
                                <input class="Input" type="text" name="rubric:1:@n"  size="1" value="@row[1]"/>
                            </td>

                            @*Level Description*@
                            @for(int d = 2; d < row.Count; d++)
                            {
                                <td>
                                    @* Name=X:Y *@
                                    <textarea class="Input" name="rubric:@d:@n" rows="5" cols="30">@row[d]</textarea>
                                </td>
                            }
                        </tr>
                        n++;
                    }
                }
            </table>
        </td>
        <td class ="top">
            <input type="button" value="+" onclick="addColumn('dataTable')" />
        </td>
    </tr>
    <tr>
        <td>
            <input type="button" value="+" onclick="addRow('dataTable')" />
        </td>
    </tr>
</table>
</body> </html>

<script type="text/javascript">

    $('.CourseOption').click(function () {
        $('.RubricSelect').hide();
        $('#Assignment_' + this.id).show();
    });

    $('.AssignmentOption').click(function () {
        this.parentNode.name = "AssignmentOption";

        var ok = window.confirm("This rubric will be replaced with a new one\n" +
                                "and all progress will be lost\n\n" +
                                "Are you sure you want to continue?");
        if (ok) {
            $('#WizardForm').submit();
        }
    });

    function addRow(tableID) {
        var table = document.getElementById(tableID);

        var rowCount = table.rows.length;
        var columnCount = table.rows[0].cells.length;

        var newRow = table.insertRow(rowCount);

        $(newRow).html(table.rows[rowCount - 1].innerHTML);

        //note: rowCount is now the index of the last row (because a row was added)
        //Modify the Y value of the name (name="rubric:X:Y") for the new rubric
        for (var i = 0; i < columnCount; i++) {
            var name = $(table.rows[rowCount-1].cells[i]).find('.Input').attr("name");
            var spl = name.split(':');
            $(newRow.cells[i]).find(".Input").attr("name", spl[0] + ":" + spl[1] + ":" + (parseInt(spl[2]) + 1));

            //don't copy the values (inputs) from the old cells
            $(newRow.cells[i]).find(".Input").attr('value', "");
            $(newRow.cells[i]).find(".Input").text("");
        }
    }

    function addColumn(tableID) {
        var table = document.getElementById(tableID);

        var rowCount = table.rows.length;
        var columnCount = table.rows[0].cells.length;

        //loop over each row and append a copy of the last cell in that row to the end
        for (var i = 0; i < rowCount; i++) {
            if (i == 0) {
                var element = document.createElement("th");
            }
            else {
                var element = document.createElement("td");
            }

            // assign the class from the cells in the previous column to the corresponding
            // cells in the new column
            $(element).attr('class', $(table.rows[i].cells[columnCount - 1]).attr('class'));

            table.rows[i].appendChild(element);
            element.innerHTML = table.rows[i].cells[columnCount - 1].innerHTML;

            //get name of previous element ( in the form X:Y) and increment X to create a unique 
            //name for the corresponding element in the new column
            var name = $(table.rows[i].cells[columnCount - 1]).find('.Input').attr("name");
            var spl = name.split(':');
            $(element).find('.Input').attr("name", spl[0] + ":" + (parseInt(spl[1]) + 1) + ":" + spl[2]);

            //don't copy the values (inputs) from the old cells
            $(element).find('.Input').attr("value", "");
            $(element).find('.Input').text("");

            //special case to handle level point spread
            if (i == 0) {
                name = $(table.rows[i].cells[columnCount - 1]).find('.SpreadInput').attr("name");
                spl = name.split(':');
                $(element).find('.SpreadInput').attr("name", spl[0] + ":" + (parseInt(spl[1]) + 1) + ":" + spl[2]);
            }
        }   
    }

    function deleteColumn(tableID, columnIndex) {
        var table = document.getElementById(tableID);

        //Delete a column only if there are more than the default amount: 3
        if (table.rows[0].cells.length > 3) {
            var n = columnIndex + 1;
            $('td:nth-child(' + n + '), th:nth-child(' + n + ')').remove();
        }
    }

    function deleteRow(tableID, rowIndex) {
        var table = document.getElementById(tableID);

        var row = $(table.rows[rowIndex]);

        //Delete a row only if there are more than the default amount: 2
        if (table.rows.length > 2) {
            document.getElementById(tableID).deleteRow(rowIndex);
        }
    }

    function moveRowUp(tableID, rowIndex) {
        var table = document.getElementById(tableID);
        var row = $(table.rows[rowIndex]);

        
        //swap the names in each cell to preserve order
        if (rowIndex > 1) {
            var row2 = table.rows[rowIndex];
            var row = table.rows[rowIndex - 1];

            animateSwap(row, row2, table);
        }
    }

    function moveRowDown(tableID, rowIndex) {
        var table = document.getElementById(tableID);

        if (rowIndex < table.rows.length - 1) {
            var row = table.rows[rowIndex];
            var row2 = table.rows[rowIndex + 1];

            animateSwap(row, row2, table);
        }
    }

    function animateSwap(topRow, bottomRow, table) {
        swapped = false;
        var animationTime = 200;
        var i = 0;
        $.each($(topRow).find('td'), function () {

            var oldOffset = $(this).position();
            var newOffset = $(bottomRow.cells[i]).position();

            var $tempTop = $(this).clone().appendTo(table);
            $tempTop
                .css('position', 'absolute')
                .css('left', oldOffset.left)
                .css('top', oldOffset.top)
                .css('zIndex', 1000)
                .css('border-style', 'none')
                .css('vertical-align', 'middle');

            $tempTop.height($(this).height());
            //$tempTop.width($(this).width())
           // alert($tempTop.height());
            //alert($tempTop.find('.Input').val());
            $tempTop.find('.Input').css('vertical-align', 'middle');

            var $tempBottom = $(bottomRow.cells[i]).clone().appendTo(table);
            $tempBottom
                .css('position', 'absolute')
                .css('left', newOffset.left)
                .css('top', newOffset.top)
                .css('zIndex', 1001)
                .css('border-style', 'none')
                .css('vertical-align', 'middle');

            $tempBottom.height($(bottomRow.cells[i]).height());

            $tempTop.find('textarea').text($(this).find('textarea').val());
            $tempBottom.find('textarea').text($(bottomRow.cells[i]).find('textarea').val());

            $(this).css('visibility', 'hidden');
            $(bottomRow.cells[i]).css('visibility', 'hidden');

            $tempBottom.animate({
                'top': oldOffset.top
            }, animationTime, function () {
                $tempBottom.remove();
                $(table).find('td').css('visibility', 'visible');
            });

            //'top': newOffset.top
            $tempTop.animate({
                'top': newOffset.top
            }, animationTime, function () {
                $tempTop.remove();
                //if this is the last td, perform the actual swap
                if (!swapped) {
                    $(topRow).insertAfter($(topRow).next());
                    for (var n = 0; i < table.rows[0].cells.length; n++) {
                        var name = $(row.cells[n]).find('.Input').attr('name');
                        var name2 = $(row2.cells[n]).find('.Input').attr('name');

                        $(bottomRow.cells[n]).find('.Input').attr('name', name);
                        $(topRow.cells[n]).find('.Input').attr('name', name2);
                    }
                    swapped = true;
                }
            });
            i++;
        });
    }

</script>


