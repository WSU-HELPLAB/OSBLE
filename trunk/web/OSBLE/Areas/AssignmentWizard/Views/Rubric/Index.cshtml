@using OSBLE.Models.Assignments;
@using OSBLE.Models.Courses.Rubrics;
@using OSBLE.Areas.AssignmentWizard.ViewModels;
@model Assignment
@{
    Html.HiddenFor(m => m.ID);
    bool hasRubric = Model.HasRubric;
    string test;
    RubricSelectionViewModel rubricSelection = ViewBag.rubricSelection;

    } 


<style media="screen" type="text/css">

.rubric {
	border-width: 1px;
	border-spacing: 2px;
	border-style: outset;
	border-collapse: collapse;
}
.rubric th {
	border-width: 1px;
	padding: 10px;
	border-style: inset;
}
.rubric td {
	border-width: 1px;
	padding: 10px;
	border-style: inset;
}

textarea.center
{
    vertical-align:middle;
}

td.top
{
    vertical-align:top;
}

.ul
{
    list-style-type: none;
    padding:0;
    margin:0;
}

.RubricSelect
{
    display:none;
}

</style>

<html> <body>

@Html.HiddenFor(m => m.ID)

    <table>
    <tr>
        <td>
        <select>
            @foreach(int courseId in rubricSelection.CourseIds())
            {
                    <option id="@courseId" class ="CourseOption">@rubricSelection.GetCourseName(courseId)</option>
            }
        </select>

        @*Create a hidden dropdown of assignment for each course
        When the user selects a course from the first select, the corresonding
        one here will become visible*@
            <form id="set_rubric" method="post" action="/AssignmentWizard/Rubric/LoadExistingRubric">
                @foreach(int courseId in rubricSelection.CourseIds())
                {
                    <select  id="Assignment_@(courseId)" class="RubricSelect">
                        @foreach (RubricViewModel rvm in rubricSelection.rubricSelection[courseId].rubricViewModel)
                        {                                                                                                                        
                            <option class="AssignmentOption" value="@rvm.AssignmentID">@rvm.AssignmentName</option>
                        }
                    </select>
                }
            </form>
            
                [Rubric Description]
          </td>
    </tr>
        <tr>
            <td>
                <ul class="ul">
                    <li>
                        <input type="checkbox" name="globalComments" value="globalComments" />Overall Comments
                    </li>
                    <li>
                        <input type="checkbox" name="criterionComments" value="criterionComments" />Comments for each criterion
                    </li>
                </ul>
            </td>
        </tr>

        <tr>
            <td>
                @* Start Table for Rubric *@
                <table id="dataTable" class="rubric">
                    @*Row for column titles*@
                    <tr>
                        <th>
                            Performance Criterion
                        </th>
                        
                        <th>Criterion<br />Weight</th>
                        
                        @* Level Title *@
                        @{
                            int n = 0;
                            foreach (Level level in ViewBag.levels)
                            {
                                <th class="level">
                                        <ul class="ul" >
                                            <li>
                                            @*<input type="button" value="<" onclick="moveColumnLeft('dataTable', this.parentNode.parentNode.parentNode.cellIndex)" /> *@
                                                <input type="button" value="-" onclick="deleteColumn('dataTable', this.parentNode.parentNode.parentNode.cellIndex)" />
                                                @*<input type="button" value=">" onclick="moveColumnRight('dataTable', this.parentNode.parentNode.parentNode.cellIndex)" /> *@
                                            </li>
                                            <li>Level Point Spread
                                            <select class="SpreadInput" name="rubric:@n:S">
                                                    @for (int i = 1; i <= 10; i++)
                                                    {
                                                        if (i == 5)
                                                        {
                                                            <option selected value="@i">@i</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@i">@i</option>
                                                        }
                                                    }
                                            </select>
                                            </li>
                                            <li>Level Title<input class="Input" name="rubric:@n:L" type="text" value="@level.LevelTitle"/></li>
                                        </ul>
                                </th>
                                n++;
                            }
                        }
                    </tr>
                    @{
                        n = 0;
                        foreach (List<string> row in ViewBag.rubricTable)
                        {
                            @*Default first row of rubric*@
                            <tr>
                                @*Performance Criterion*@
                                <td>
                                    <ul class="ul" style="float:left;">
                                    <li><input type="button" value="^" onclick="moveRowUp('dataTable', this.parentNode.parentNode.parentNode.parentNode.rowIndex)" /></li>
                                    <li><input type="button" value="-" onclick="deleteRow('dataTable', this.parentNode.parentNode.parentNode.parentNode.rowIndex)" /></li>
                                    <li><input type="button" value="v" onclick="moveRowDown('dataTable', this.parentNode.parentNode.parentNode.parentNode.rowIndex)" /></li>
                                    </ul>
                                    <textarea class="Input center" name="rubric:0:@n" rows="5" cols="20">@row[0]</textarea>
                                </td>

                                @*Criterion Weight*@
                                <td>
                                    <input class="Input" type="text" name="rubric:1:@n"  size="1" value="@row[1]"/>
                                </td>

                                
                                @*Level Description*@
                                    @for(int d = 2; d < row.Count; d++)
                                    {
                                        <td>
                                            @* Name=X:Y *@
                                            <textarea class="Input" name="rubric:@d:@n" rows="5" cols="30">@row[d]</textarea>
                                        </td>
                                    }
                            </tr>
                            n++;
                        }
                    }
                </table>
            </td>
            <td class ="top">
                <input type="button" value="+" onclick="addColumn('dataTable')" />
            </td>
        </tr>
        <tr>
            <td>
                <input type="button" value="+" onclick="addRow('dataTable')" />
            </td>
        </tr>
    </table>
</body> </html>

<script type="text/javascript">

    $('.CourseOption').click(function () {
        $('.RubricSelect').hide();
        $('#Assignment_' + this.id).show();
    });



    $('.AssignmentOption').click(function () {
        this.parentNode.name = "AssignmentOption";
        $('#WizardForm').submit();
    });



    function addRow(tableID) {
        var table = document.getElementById(tableID);

        var rowCount = table.rows.length;
        var columnCount = table.rows[0].cells.length;

        var newRow = table.insertRow(rowCount);

        $(newRow).html(table.rows[rowCount - 1].innerHTML);

        //note: rowCount is now the index of the last row (because a row was added)
        //Modify the Y value of the name (name="rubric:X:Y") for the new rubric
        for (var i = 0; i < columnCount; i++) {
            var name = $(table.rows[rowCount-1].cells[i]).find('.Input').attr("name");
            var spl = name.split(':');
            $(newRow.cells[i]).find(".Input").attr("name", spl[0] + ":" + spl[1] + ":" + (parseInt(spl[2]) + 1));

            //don't copy the values (inputs) from the old cells
            $(newRow.cells[i]).find('.Input').attr("value", ""); 
        }
    }

    function addColumn(tableID) {
        var table = document.getElementById(tableID);

        var rowCount = table.rows.length;
        var columnCount = table.rows[0].cells.length;

        //loop over each row and append a copy of the last cell in that row to the end
        for (var i = 0; i < rowCount; i++) {
            var element = document.createElement("th");

            // assign the class from the cells in the previous column to the corresponding
            // cells in the new column
            $(element).attr('class', $(table.rows[i].cells[columnCount - 1]).attr('class'));

            table.rows[i].appendChild(element);
            element.innerHTML = table.rows[i].cells[columnCount - 1].innerHTML;

            //get name of previous element ( in the form X:Y) and increment X to create a unique 
            //name for the corresponding element in the new column
            var name = $(table.rows[i].cells[columnCount - 1]).find('.Input').attr("name");
            var spl = name.split(':');
            $(element).find('.Input').attr("name", spl[0] + ":" + (parseInt(spl[1]) + 1) + ":" + spl[2]);

            //don't copy the values (inputs) from the old cells
            $(element).find('.Input').attr("value", ""); 

            //special case to handle level point spread
            if (i == 0) {
                name = $(table.rows[i].cells[columnCount - 1]).find('.SpreadInput').attr("name");
                spl = name.split(':');
                $(element).find('.SpreadInput').attr("name", spl[0] + ":" + (parseInt(spl[1]) + 1) + ":" + spl[2]);
            }
        }   
    }

    function deleteColumn(tableID, columnIndex) {
        var table = document.getElementById(tableID);

        //Delete a column only if there are more than the default amount: 3
        if (table.rows[0].cells.length > 3) {
            var n = columnIndex + 1;
            $('td:nth-child(' + n + '), th:nth-child(' + n + ')').remove();
        }
    }

    function deleteRow(tableID, rowIndex) {
        var table = document.getElementById(tableID);

        var row = $(table.rows[rowIndex]);

        //Delete a row only if there are more than the default amount: 2
        if (table.rows.length > 2) {
            document.getElementById(tableID).deleteRow(rowIndex);
        }
    }

    function moveRowUp(tableID, rowIndex) {
        var table = document.getElementById(tableID);
        var row = $(table.rows[rowIndex]);

        //prevent moving the title row
        if (rowIndex > 1) {
            row.insertBefore(row.prev())
        }

        //swap the names in each cell to preserve order
        row = table.rows[rowIndex];
        row2 = table.rows[rowIndex - 1];
        for (var i = 0; i < table.rows[0].cells.length; i++) {
            var name = $(row.cells[i]).find('.Input').attr('name');
            var name2 = $(row2.cells[i]).find('.Input').attr('name');

            $(row2.cells[i]).find('.Input').attr('name', name);
            $(row.cells[i]).find('.Input').attr('name', name2);
        }
   }

    function moveRowDown(tableID, rowIndex) {
        var table = document.getElementById(tableID);

        var row = $(table.rows[rowIndex]);
        row.insertAfter(row.next());

        //swap the names in each cell to preserve order
        row = table.rows[rowIndex];
        row2 = table.rows[rowIndex + 1];
        for (var i = 0; i < table.rows[0].cells.length; i++) {
            var name = $(row.cells[i]).find('.Input').attr('name');
            var name2 = $(row2.cells[i]).find('.Input').attr('name');

            $(row2.cells[i]).find('.Input').attr('name', name);
            $(row.cells[i]).find('.Input').attr('name', name2);
        }
    }


    // Not currently used:
//    function moveColumnLeft(tableID, cellIndex) {
//        var table = document.getElementById(tableID);

//        if (cellIndex > 2) {
//            for (var i = 0; i < table.rows.length; i++) {
//                var temp = table.rows[i].cells[cellIndex].innerHTML;
//                table.rows[i].cells[cellIndex].innerHTML = table.rows[i].cells[cellIndex - 1].innerHTML;
//                table.rows[i].cells[cellIndex - 1].innerHTML = temp;
//            }
//        }
//    }

//    function moveColumnRight(tableID, cellIndex) {

//        var n = cellIndex + 1;
//       $('td:nth-child(' + n + '), th:nth-child(' + n + ')').hide();
//       // var temp = table.rows[i].cells[cellIndex].innerHTML;
//       // table.rows[i].cells[cellIndex].innerHTML = table.rows[i].cells[cellIndex + 1].innerHTML;
//       // table.rows[i].cells[cellIndex + 1].innerHTML = temp;
//    }

</script>


