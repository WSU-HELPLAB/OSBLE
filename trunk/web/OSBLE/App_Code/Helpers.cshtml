@using OSBLE.Models
@using System.Text.RegularExpressions
@using System.Collections
@using System.Web.Mvc


@helper DisplaySection(string sectionNum)
    {
        if (sectionNum != "0")
        {
    <text>Section @sectionNum</text>
        }
        else
        {
    <text>All Sections</text>
        }
}
@* Only use this helper in a place that requires an active course (uses [RequireActiveCourse] attribute) *@
@helper DisplayName(UserProfile user, CoursesUsers activeCourse, bool show = false)
    {
        if (!activeCourse.CourseRole.Anonymized && (activeCourse.CourseRole.CanGrade || (user.ID == activeCourse.UserProfileID) || show))
        {
    <text>@user.FirstName @user.LastName</text>
        }
        else
        {
    <text>Anonymous</text>
        }
}
@helper DisplayNameForDashboard(UserProfile user, Course course, CoursesUsers activeCourse, Hashtable allCoursesUsers, bool show = false)
    {
        @*
        I need to simplify this. A lot.
        Right now this will anonymize a user by their order in the students list.
        How anonymous this is depends. Some lists may be entered alphabetically 
        which wouldn't seen very anonymous. On the other hand, observers are supposed
        to be trusted so this may be fine.            
        *@
        List<CoursesUsers> cus = (List<CoursesUsers>)allCoursesUsers[course.ID];
        CoursesUsers thisUserCu = cus.Where(c => c.UserProfileID == user.ID).FirstOrDefault();

        bool instructor = false, ta = false;
        int anonymous = 0;

        if (thisUserCu != null)
        {
            if (thisUserCu.CourseRole.CanModify == true)
            {
                instructor = true;
                show = true;
            }
            else if (thisUserCu.CourseRole.CanGrade == true)
            {
                ta = true;
                show = true;
            }

            anonymous = cus.IndexOf(thisUserCu);
        }
        else
        {
            show = false;
        }

        if (show || (activeCourse.UserProfileID == user.ID))
        {
    <text>@user.FirstName @user.LastName</text>
            if (instructor)
            {
                <text> <small><em>(Instructor)</em></small></text>
            }
            else if (ta)
            {
                <text> <small><em>(TA)</em></small></text>
            }
        }
        else
        {
    <text>Anonymous @anonymous</text>
        }
}
@helper DisplayDate(DateTime dt)
    {
    @dt.ToLongDateString()<text> </text>@dt.ToShortTimeString()
}
@helper MailButton()
    {<img src="../../Content/images/mail_up.png" />}
@helper AddButton()
    {<img src="../../Content/images/add_up.png" alt="Add Button" />}
@helper EditButton()
    {<img src="../../Content/images/edit_up.png" alt="Edit Button" />}
@helper DeleteButton()
    {<img src="../../Content/images/delete_up.png" alt="Delete Button" />}
@helper DeleteSubmit()
    {<input type="image" src="../../Content/images/delete_up.png" alt="Delete Button" />}
@helper DisplayLastFourID(string Identification)
    { <text>(@Identification.Substring(Math.Max(Identification.Length - 4, 0), Math.Min(Identification.Length, 4)))</text>}
@helper DisplayFullNameOrPending(UserProfile user)
    {
        if (user.UserName != null)
        {
    <text>@user.FirstName @user.LastName</text>
        }
        else
        {
    <text><em>Pending @Helpers.DisplayLastFourID(user.Identification) </em></text>
        }
}
@helper ProfilePicture(string url)
    {
    <img src="@url" alt="Profile Picture" class="profile_picture" />
}
@helper SmallProfilePicture(string url)
    {
    <img src="@url" alt="Profile Picture" class="small_profile_picture" />
}
@helper Linkify(string text)
    {
        List<string> links = LinkifyHelper(text);
        bool isLink = false;
        foreach (string s in links)
        {
            if (isLink)
            {<a href="@s">@s</a>
                isLink = !isLink;
            }
            else
            {
    <text>@Helpers.nl2br(@s)</text>
                isLink = !isLink;
            }
        }
}
@helper DefaultProfilePicture()
    {
    <img src="/Content/images/default.jpg" alt="Profile Picture" class="profile_picture" />
}
@helper nl2br(string content)
    {
        string[] s = content.Split('\n');
        for (int i = 0; i < s.Length; i++)
        {
            @s[i]
            if (i != s.Length - 1)
            {
                <text><br /></text>
            }
        }
}

@functions{
    #region C# functions

    /// <summary>
    /// This takes a string and splits it where a link is detected.
    /// It will insert a blank string at the front
    /// </summary>
    /// <param name="text"></param>
    /// <returns></returns>
    static List<string> LinkifyHelper(string text)
    {
        int offset = 0;

        Regex reg = new Regex(@"(https?://[\w\.]+[/.*]?.*)");

        List<string> textSplit = reg.Split(text).ToList();

        if (reg.IsMatch(textSplit[0]))
        {
            textSplit.Insert(0, "");
        }

        return textSplit;
    }
    

#endregion
    }