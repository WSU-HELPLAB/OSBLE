@model OSBLE.Models.Gradables.StudioAssignment.SubmissionActivitySettings
@{
    ViewBag.Title = "Create";
}
<h2>
    Create</h2>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script type="text/javascript">

    function updateDates() {
        updateDueDate();
        updateReleaseDate();
    }

    function updateReleaseDate() {
        $("#ReleaseDate").val($("#ReleaseDate_Date").val() + " " + $("#ReleaseDate_Time").val())
    }

    function updateDueDate() {
        $("#DueDate").val($("#DueDate_Date").val() + " " + $("#DueDate_Time").val())
    }
</script>
@Html.ValidationSummary(true, "The due date must come after the release date")
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Assignment</legend>
        @Html.HiddenFor(model => model.ReleaseDate, new { @id = "ReleaseDate" })
        @Html.HiddenFor(model => model.DueDate, new { @id = "DueDate" })
        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Description)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Description)
            @Html.ValidationMessageFor(model => model.Description)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.ReleaseDate)
        </div>
        <div class="editor-label">
            @Html.TextBox("ReleaseDate_Date", convertToMonthDayYearFormat(Model.ReleaseDate), new { @id = "ReleaseDate_Date", @class = "date_picker", size = 9 })
        </div>
        <div class="editor-label">
            @Html.TextBox("ReleaseDate_Time", convertTime(Model.ReleaseDate), new { @id = "ReleaseDate_Time", @class = "time_picker", size = 9 })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.DueDate)
        </div>
        <div class="editor-label">
            @Html.TextBox("DueDate_Date", convertToMonthDayYearFormat(Model.DueDate), new { @id = "DueDate_Date", @class = "date_picker", size = 9 })
        </div>
        <div class="editor-label">
            @Html.TextBox("DueDate_Time", convertTime(Model.DueDate), new { @id = "DueDate_Time", @class = "time_picker", size = 9 })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.isGradeable)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.isGradeable)
            @Html.ValidationMessageFor(model => model.isGradeable)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.isTeam)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.isTeam)
            @Html.ValidationMessageFor(model => model.isTeam)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.InstructorCanReview)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.InstructorCanReview)
            @Html.ValidationMessageFor(model => model.InstructorCanReview)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.WeightID, "Weight")
        </div>
        <div class="editor-field">
            @Html.DropDownList("WeightID", String.Empty)
            @Html.ValidationMessageFor(model => model.WeightID)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.WeightID, "Deliverable")
        </div>
        <div class="editor-field">
            @Html.DropDownList("Deliverable", ViewBag.Deliverable as SelectList)
            @Html.ValidationMessageFor(model => model.Deliverables)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.PossiblePoints)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.PossiblePoints)
            @Html.ValidationMessageFor(model => model.PossiblePoints)
        </div>
        <p>
            <input type="submit" value="Create" id="submit" onclick="updateDates" />
        </p>
    </fieldset>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@functions
{
    public string convertToMonthDayYearFormat(DateTime date)
    {
        return addLostZeros(date.Month.ToString(), 2, true) + "/" + addLostZeros(date.Day.ToString(), 2, true) + "/" + addLostZeros(date.Year.ToString(), 4, true);
    }

    public string convertTime(DateTime time)
    {
        string timeStr;
        bool isAM = true;
        string hr;
        string min;
        if (time.Hour > 12)
        {
            isAM = false;
            hr = (time.Hour - 12).ToString();
        }
        else
        {
            hr = time.Hour.ToString();
        }
        min = time.Minute.ToString();

        hr = addLostZeros(hr, 2, true);
        min = addLostZeros(min, 2, true);

        timeStr = hr + ":" + min;
        if (isAM)
        {
            timeStr += " AM";
        }
        else
        { 
            timeStr += " PM";
        }
        return timeStr;
    }
    
    public string addLostZeros(string s, int desiredDigits, bool addToFront)
    {
        int i = desiredDigits - s.Count();
        while (i > 0)
        {
            if (addToFront)
            {
                s = s.Insert(0, "0");
            }
            else
            { 
            s += "0";
            }
            i--;
        }
        return s;
    }
}
