@using OSBLE.Models
@using OSBLE.Models.Assignments
@{
    List<Assignment> assignments = ViewBag.Assignments;
    int PastCount = ViewBag.PastCount;
    int PresentCount = ViewBag.PresentCount;
    int FutureCount = ViewBag.FutureCount;
    int DraftCount = ViewBag.DraftCount;
    bool isDraftAssignment = false, isFutureAssignment = false;
}

<table class="assignTable" cellspacing="0" id="assignmentListTable">
<tr>
    <th colspan="2" style="font-size:larger">Assignment</th>
    <th style="font-size:larger">Due Date</th>
    <th style="font-size:larger">Student Activity</th>
    <th style="font-size:larger; padding-left: 20px">Grading Progress</th>
    <th style="font-size:larger; padding-left: 20px">Files</th>
</tr>

    @{
        for(int i = 0; i < assignments.Count; i++)
        {
            if (i == 0 && PastCount > 0)
            {
                <tr>
                    <td colspan="100%" style="padding-right: 0; font-size: large" class="osbleColorBold">
                        Past (@PastCount)
                    </td>
                </tr>
            }
            
            else if (i == (PastCount) && PresentCount > 0)
            {
                
                if (PastCount > 0)
                {
                    //Only put a an empty row if there is something above this category
                    <tr>
                        <td style="padding-bottom: 10px">
                        </td>
                    </tr>
                }
                <tr>
                    <td colspan="100%" style="padding-right: 0; font-size: large" class="osbleColorBold">
                        Present (@PresentCount)
                    </td>
                </tr>
            }
            else if (i == (PastCount + PresentCount) && FutureCount > 0)
            {
                isFutureAssignment = true;
                if ((PastCount + PresentCount) > 0)
                {
                    //Only put a an empty row if there is something above this category
                    <tr>
                        <td style="padding-bottom: 10px">
                        </td>
                    </tr>
                }
                <tr>
                    <td colspan="100%" style="padding-right: 0; font-size: large" class="osbleColorBold">
                        Future (@FutureCount)
                    </td>
                </tr>
            }
            else if (i == (PastCount + PresentCount + FutureCount) && DraftCount > 0)
            {
                isFutureAssignment = false;
                isDraftAssignment = true;
                if ((PastCount + PresentCount) > 0)
                {
                    //Only put a an empty row if there is something above this category
                    <tr>
                        <td style="padding-bottom: 10px">
                        </td>
                    </tr>
                }
                <tr>
                    <td colspan="100%" style="padding-right: 0; font-size: large" class="osbleColorBold">
                        Draft (@DraftCount)
                    </td>
                </tr>
            }

            //Now that headers are in place, inserting a assignment
            <tr class="checkeredRow"  >
                <td style="padding-right:0; white-space:nowrap"><!--Cell for icons-->
                    @if (assignments[i].IsDraft)
                    {
                        <a title="Click to Publish"  class="pointerOnMouseOver" href="/Assignment/ToggleDraft?assignmentID=@assignments[i].ID" >@Helpers.PublishButton()</a>
                    }
                    else
                    {
                        <a title="Click to Unpublish"  class="pointerOnMouseOver" href="/Assignment/ToggleDraft?assignmentID=@assignments[i].ID">@Helpers.UnPublishButton()</a>
                    }
                    <a title="Click to Edit" href="@Url.Action("Index", "Home", new { area = "AssignmentWizard", assignmentId = assignments[i].ID })">@Helpers.EditButton()</a>
                    <a title="Click to Delete" class="pointerOnMouseOver" onclick="openConfirmDeleteWindow(@assignments[i].ID)">@Helpers.DeleteButton()</a>
                </td>
                <td > <!--Cell for name-->
                    @Html.ActionLink(assignments[i].AssignmentName, "Index", "Home", new { area = "AssignmentDetails", assignmentId = assignments[i].ID }, null)
                </td>
                <td > <!--Cell for DueDate-->
                <time 
                class="utc-time"
                datetime="@Helpers.DateAsUnixTime(assignments[i].DueDate)" 
                data-original-date="@Helpers.RawDate(assignments[i].DueDate)" 
                data-date-format="MM/DD/YYYY hh:mm A">
                    @assignments[i].DueDate.ToShortDateString() @assignments[i].DueDate.ToShortTimeString() (UTC)
                </time>
                    
                </td>

                <!--Cell for Student Activity-->
                <td>                    
                    @if (isDraftAssignment)
                    {
                        
                    }
                    else if(assignments[i].Type == AssignmentTypes.CriticalReviewDiscussion || assignments[i].Type ==  AssignmentTypes.DiscussionAssignment)
                    {
                        @:@assignments[i].GetInitialPostsCount() of @ViewBag.TotalDiscussionPosters initial posts made.<br />
                        @:@assignments[i].GetPostsCount() total posts. @assignments[i].GetNewPostsCount(ViewBag.ActiveCourseUser.ID) unread posts.
                    }
                    else if (assignments[i].Type == AssignmentTypes.TeamEvaluation)
                    {
                        @:@assignments[i].GetCompletedTeamEvaluationsCount() of @assignments[i].GetTotalTeamEvaluationCount() evaluations completed.
                    }
                    else if (assignments[i].HasDeliverables)
                    {
                        @:@assignments[i].GetSubmissionCount() of @assignments[i].AssignmentTeams.Count submissions received.<br />
                        @:@Html.ActionLink("Download all", "GetAllSubmissionsForAssignment", "FileHandler", new { assignmentID = assignments[i].ID }, new { onclick = "create_and_open_downloading_submission_dialog()" })
                    }
                </td>

                <!-- Cell for Grading Progress -->
                <td style="padding-left: 20px">
                    @if (assignments[i].HasRubric && !(isFutureAssignment || isDraftAssignment))
                    {
                    
                            @: @assignments[i].GetPublishedCount() of @assignments[i].AssignmentTeams.Count published.&nbsp @Html.ActionLink("Grade Now", "Index", "Rubric", new { assignmentId = assignments[i].ID, cuId = assignments[i].AssignmentTeams.FirstOrDefault().Team.TeamMembers.FirstOrDefault().CourseUserID }, new { })<br />
                            @: @assignments[i].GetSavedAsDraftCount() saved as draft.&nbsp @Html.ActionLink("Publish All", "PublishAllRubrics", "Assignment", new { area = "", assignmentId = assignments[i].ID }, new { })
                    
                    }
                </td>

                <!-- Cell for file manager button -->
                <td style="padding-left: 20px">
                    <input type="button" value="Manage..." onclick="assignmentfilemanager_open('@assignments[i].AssignmentName', @assignments[i].ID);" />
                </td>
            </tr>                
        }
    }
</table>


<!-- E.O. After the table we have the hidden file manager stuff -->
<script src="../../Scripts/CourseFilesUploader.js" type="text/javascript"></script>
<script>
    function assignmentfilemanager_open(assignmentName, assignmentID)
    {
        // Hide most of the stuff on the page first
        document.getElementById("assignmentListTable").style.display = "none";
        document.getElementById("assignments_view_header").style.display = "none";
        
        // Set the header with the assignment name
        document.getElementById("filesAssignNameTH").innerHTML = "Files for Assignment: " + assignmentName;
        
        // Show the file manager content
        document.getElementById("assignmentFileManagerDIV").style.display = "inline";

        // Update file listings
        assignmentfilemanager_update(assignmentID);
    }

    function assignmentfilemanager_update(assignmentID)
    {
        // Reset status to loading
        document.getElementById("filesAssignDesc").innerHTML = "(please wait...)";
        document.getElementById("filesAssignSolution").innerHTML = "(please wait...)";

        // Get the current course ID
        var selectCourseObj = document.getElementById("course_select");
        var courseID = selectCourseObj.value;
        
        // Do the service request to get the file list for this assignment
        var req = new XMLHttpRequest();
        req.addEventListener("load",
            function(args) { assignmentfilemanager_listcompletion(args, assignmentID); },
            false);
        //req.addEventListener("error", assignmentfilemanager_fail, false);
        //req.addEventListener("abort", assignmentfilemanager_canceled, false);
        req.open("GET", "../Services/CourseFilesOps.ashx?cmd=assignment_files_list&courseID=" + 
            courseID + "&assignmentID=" + assignmentID);
        req.send();
    }

    function assignmentfilemanager_close()
    {
        document.getElementById("assignmentFileManagerDIV").style.display = "none";
        document.getElementById("assignmentListTable").style.display = "inline";
        document.getElementById("assignments_view_header").style.display = "inline";
    }

    function assignmentfilemanager_listcompletion(args, assignmentID)
    {
        // DEBUG:
        //alert(args.target.responseText);
        
        var doc = args.target.responseXML;
        var root = doc.firstChild;
        if ("true" != root.getAttribute("success"))
        {
            var msg = "(update failed, please refresh the page and contact support if the problem persists)";
            document.getElementById("filesAssignDesc").innerHTML = msg;
            document.getElementById("filesAssignSolution").innerHTML = msg;
        }
        else
        {
            // Find the <file_list> node
            var lists = doc.getElementsByTagName("file_list");
            if (0 == lists.length)
            {
                alert("Update failed (invalid XML returned)");
                return;
            }

            var listNode = lists[0];
            var descHTML = "<ul>";
            var solHTML = "<ul>";
            if (listNode.childNodes.length > 0 && 1 == listNode.childNodes[0].nodeType)
            {
                var files = listNode.getElementsByTagName("file");

                // Go through the list of files
                for (var i=0; i<files.length; i++)
                {
                    var tempNode = files[i];
                    if (null == tempNode || 1 != tempNode.nodeType) { continue; }

                    // Look for the "assignment_description" node
                    var descNodes = tempNode.getElementsByTagName("assignment_description");
                    if (descNodes && descNodes.length > 0)
                    {
                        // Only take it if it has the right assignment ID. At the time of this 
                        // writing all files with this attribute should have the right ID or 
                        // else they wouldn't even have been returned in the request. But this 
                        // just makes it slightly more robust.
                        if (assignmentID == descNodes[0].childNodes[0].nodeValue)
                        {
                            descHTML += ("<li>" + tempNode.getAttribute("name") + "</li>");
                        }
                    }

                    // Look for the "assignment_solution" node
                    var solNodes = tempNode.getElementsByTagName("assignment_solution");
                    if (solNodes && solNodes.length > 0)
                    {
                        if (assignmentID == solNodes[0].childNodes[0].nodeValue)
                        {
                            solHTML += ("<li>" + tempNode.getAttribute("name") + "</li>");
                        }
                    }
                }
            }

            descHTML += "</ul>";
            solHTML += "</ul>";

            // When a file upload completes we want to refresh the list
            var onCompletion = "assignmentfilemanager_update(" + assignmentID.toString() + ");";

            // Add the upload controls HTML too
            var srvcArgsDesc = "&assignmentID=" + assignmentID + "&fileusage=assignment_description";
            var srvcArgsSol = "&assignmentID=" + assignmentID + "&fileusage=assignment_solution";
            descHTML += fileuploader_getcontrolshtml("src_assignment_description", false, srvcArgsDesc, onCompletion);
            solHTML += fileuploader_getcontrolshtml("src_assignment_solution", false, srvcArgsSol, onCompletion);
    
            // Put the upload controls in
            document.getElementById("filesAssignDesc").innerHTML = descHTML;
            document.getElementById("filesAssignSolution").innerHTML = solHTML;
        }
    }
</script>
<div style="display: none" id="assignmentFileManagerDIV">
    <h2 id="filesAssignNameTH">Assignment: (name here)</h2>
    <table class="assignTable" id="assignmentFilesTable" border="0" cellspacing="0" cellpadding="5">
        <tr>
            <th style="border-right: 1px solid #808080; border-bottom: 1px solid #808080">Assignment Description Files:</th>
            <td id="filesAssignDesc" style="border-bottom: 1px solid #808080">(please wait...)</td>
        </tr>
        <tr>
            <th style="border-right: 1px solid #808080;">Assignment Solution Files:<br /> (will not be visible to students)</th>
            <td id="filesAssignSolution">(please wait...)</td>
        </tr>
    </table>
    <br />
    <input type="button" value="Go back to assignment list" onclick="assignmentfilemanager_close();" />
</div>
<!-- E.O. End file manager stuff -->