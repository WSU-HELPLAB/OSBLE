@using OSBLE.Models
@using OSBLE.Models.Assignments
@using OSBLE.Models.Courses
@using OSBLE.Models.Assignments
@model Assignment

@{
    Assignment assignment = Model;
    ViewBag.Title = "Assignment Details";
}

<h2>
@if (ViewBag.ActiveCourse.AbstractRole.CanModify)
{
    if (assignment.IsDraft)
    {
        <a title="Click to Publish"  class="pointerOnMouseOver" onclick="toggleDraft(@assignment.ID)">@Helpers.PublishButton()</a>
    }
    else
    {
        <a title="Click to Unpublish"  class="pointerOnMouseOver" onclick="toggleDraft(@assignment.ID)">@Helpers.UnPublishButton()</a>
    }
    <a title="Click to Edit" href="@Url.Action("Index", "Home", new { area = "AssignmentWizard", assignmentId = assignment.ID })">@Helpers.EditButton()</a>
    <a title="Click to Delete" class="pointerOnMouseOver" onclick="openConfirmDeleteWindow(@assignment.ID)">@Helpers.DeleteButton()</a>
}

@assignment.AssignmentName
</h2>    

<table id="assignmentDetailsHeader">
    <tr><!--Released row-->
        <td>
            <text class="osbleColorBold">Released:</text>
        </td>
        <td>
             @assignment.ReleaseDate
        </td>
    </tr>
    <tr><!--Due row-->
        <td>
            <text class="osbleColorBold">Due:</text>
        </td>
        <td>
            @assignment.DueDate
        </td>
    </tr>
    <tr><!--Grading row-->
        <td>
            <text class="osbleColorBold">Grading:</text>
        </td>
        <td>
            Worth @assignment.PointsPossible points in "@assignment.Category.Name" category.
        </td>
    </tr>
    <tr><!--Late Policy row-->
        <td>
            <text class="osbleColorBold">Late Policy:</text> 
        </td>
        <td>
            @if (assignment.HoursLateWindow == 0)
            {
                @:No late assignments accepted.
            }
            else
            {
                @:Assignments accepted up to  @assignment.HoursLateWindow hours late, docking @assignment.DeductionPerUnit% per hour.
            }
        </td>
    </tr>
    <tr><!--Description row-->
        <td>
            <text class="osbleColorBold">Description:</text> 
        </td>
        <td>
            @assignment.AssignmentDescription
        </td>
    </tr>
    @if (assignment.HasDeliverables)
    {
        int i = 0;
        int j = 1;
        
        <tr><!--Deliverables row-->
            <td style="vertical-align:top;">
                <text class="osbleColorBold">Deliverables: </text>
            </td>
            <td>
        @foreach (Deliverable d in assignment.Deliverables)
        {
                
            @:@(i + 1).
            @:@d.Name (
            foreach (string str in @ViewBag.filetypeList[i])
            {
                if (j == @ViewBag.filetypeList[i].Length)
                {
                    @:@str
                }
                else
                {
                    @:@(str + ", ")
                }
                j++;
            }
            @:)
            <br /> 
            
            i++;
            j = 1;
        }
        </td>
        </tr>
    }
    @if (assignment.HasRubric)
    {
        <tr><!--Rubric row-->
            <td><text class="osbleColorBold">Rubric:</text></td>
            <td>
                @if (ViewBag.ActiveCourse.AbstractRole.CanModify)
                {
                    @Html.ActionLink("View Rubric", "Index", "Rubric", new { assignmentId = assignment.ID, cuId = ViewBag.CurrentUserID }, new { });
                }
                else
                {
                    @Html.ActionLink("View Rubric", "View", "Rubric", new { assignmentId = assignment.ID, cuId = ViewBag.CurrentUserID }, new { });
                }
            </td>
        </tr>
    }
    @if (ViewBag.TeamMembers != null)
    {
        <tr><!--Team name row-->
            <td>
                <text class="osbleColorBold">Team:</text>
            </td>
            <td>
                @ViewBag.TeamName
            </td>
        </tr>
        <tr><!--Team members row-->
            <td style="vertical-align:text-top">
                <text class="osbleColorBold">Members:</text>
            </td>
            <td>
                <ul class="user_list">
                    @foreach (CourseUser cu in ViewBag.TeamMembers)
                    {
                        <li>
                            <div class="user_controls">
                                @if (cu.UserProfile.UserName != null)
                                {
                                    <a title="Mail This User" href="@Url.Action("CreateTeamMember", "Mail", new { id = cu.UserProfile.ID })">@Helpers.MailButton()</a>
                                }
                            </div>
                            @Helpers.SmallProfilePicture(@Url.Action("ProfilePicture", "Roster", new { userProfile = cu.UserProfile.ID }))
                            <span class="roster_name">@Helpers.DisplayFullNameOrPending(cu.UserProfile)</span>
                        </li>
                    }
                </ul>
                <a title="Email whole team" href="@Url.Action("CreateEntireTeam", "Mail", new { teamID = ViewBag.TeamID })">Email the whole team</a>
            </td>
        </tr>
    }
    
    @if (ViewBag.ActiveCourse.AbstractRole.CanModify)
    {
        int submittedCount = 0;
        int totalStudentCount = 0;
        int totalScores = 0;
        foreach (Tuple<Score, Team, string> da in ViewBag.ScoresAndTeams)
        {
            if (da.Item3 != "No Submission")
            {
                submittedCount++;
            }
            if (da.Item1 != null)
            {
                if (da.Item1.Points >= 0)
                {
                    totalScores++;
                }
            }
            totalStudentCount++;
        }
        List<OSBLE.Models.Courses.Rubrics.RubricEvaluation> r = ViewBag.RubricEvals;
        if (assignment.HasDeliverables)
        {
            @:<tr>
                <td><text class="osbleColorBold">Submissions:</text></td>
                if (submittedCount > 0)
                {
                    <td>@submittedCount of @totalStudentCount have been submitted&nbsp @Html.ActionLink("[Download All]", "GetAllSubmissionsForActivity", "FileHandler", new { assignmentID = assignment.ID }, new { onclick = "create_and_open_downloading_submission_dialog()", style="text-decoration:none"})</td>    
                }
                else
                {
                    <td>@submittedCount of @totalStudentCount have been submitted</td>
                }
        }
        <tr>
            <td style="vertical-align:top"><text class="osbleColorBold" >Grading progress:</text></td>
            <td>
                @totalScores of @assignment.AssignmentTeams.Count() have been published<br />
                @if(r.Count() > 0)
                {
                    @:@r.Count() have been saved as draft&nbsp<a style="cursor:pointer" onclick="publishAllGrades(@assignment.ID);">[Publish All]</a>
                }
                else
                {
                    @:@r.Count() have been saved as draft
                }
            </td>
        </tr>
    }   
   
    
        
       
 </table>

@if (ViewBag.ActiveCourse.AbstractRole.CanModify)
{
    <table class="assignDetailsTable" cellspacing="0">
    <!-- Look up activityTeachertable for similar set up
    For name: If a team, display team name and on next line display team members. Have option to email whole team or individual
    for grade: if a rubric assignment, link to rubric tool. Else just show the grade. Display No Grade for NGs and underline them with link if there is a rubric
    For inline comments: Only show if assignment has comment categories. Then allow user to go each students
    For late penalty: display the currently used late penalty. Have edit option there
    For Submission: have a download option with the time submitted or say "Nothing Submitted"
    -->
    <th>Name</th>
    <th>Grade</th>
    @if (assignment.HasCommentCategories)
    {
        <th>Inline Comments</th>    
    }
    
    @if (assignment.HasDeliverables)
    {
        <th>Submission</th>
        @*<th>Submit for Student</th>*@
    }
    <th>Late Penalty</th>
    <br />

    @foreach (Tuple<Score, Team, string> da in ViewBag.ScoresAndTeams)
    {
        <tr>    
            <td> <!--Cell for name-->
                @if (assignment.HasTeams)
                {
                    <span style="text-decoration: underline">@da.Item2.Name</span>
                    <a title="Email this team" href="@Url.Action("CreateEntireTeam", "Mail", new { teamID = da.Item2.ID })">@Helpers.MailButton()</a>
                    <br/>
                    var teamList = "";
                    int i = 1;
                    foreach (TeamMember tm in da.Item2.TeamMembers)
                    {
                        if(i == da.Item2.TeamMembers.Count) 
                        {
                            teamList += " & " + tm.CourseUser.UserProfile.FirstName + " " + tm.CourseUser.UserProfile.LastName;
                        }
                        else if(i == 1)
                        {
                            teamList += tm.CourseUser.UserProfile.FirstName + " " + tm.CourseUser.UserProfile.LastName;
                        }
                        else 
                        {
                            teamList += ", " + tm.CourseUser.UserProfile.FirstName + " " + tm.CourseUser.UserProfile.LastName;
                        }
                        i++;
                    }
                    <span>@teamList</span>
                }
                else
                {
                    <a title="Email this User" href="@Url.Action("CreateUser", "Mail", new { id = da.Item2.TeamMembers.FirstOrDefault().CourseUser.UserProfileID })">@Helpers.MailButton()</a>
                    @(da.Item2.TeamMembers.FirstOrDefault().CourseUser.UserProfile.LastName + ", " + da.Item2.TeamMembers.FirstOrDefault().CourseUser.UserProfile.FirstName)
                    
                }
            
            </td>
            <td> <!--Cell for grade-->                
                @if (assignment.HasRubric)
                {
                    if (da.Item1 == null)
                    {
                        List<OSBLE.Models.Courses.Rubrics.RubricEvaluation> r = ViewBag.RubricEvals;
                        r.OrderBy(o => o.Recipient.TeamMembers.FirstOrDefault().CourseUser.UserProfile.LastName);
                        bool found = false;
                        foreach (OSBLE.Models.Courses.Rubrics.RubricEvaluation eval in r)
                        {
                            if (eval.Recipient.ID == da.Item2.ID)
                            {
                                if (!eval.IsPublished)
                                {
                                    found = true;
                                }
                            }
                        }
                        if (found)
                        {
                            @Html.ActionLink("Saved as Draft", "Index", "Rubric", new { assignmentId = assignment.ID, cuId = da.Item2.TeamMembers.FirstOrDefault().CourseUserID }, new { })
                        }
                        else
                        {
                            @Html.ActionLink("Not Graded", "Index", "Rubric", new { assignmentId = assignment.ID, cuId = da.Item2.TeamMembers.FirstOrDefault().CourseUserID }, new { })
                        }

                    }
                    else
                    {
                        @Html.ActionLink(da.Item1.getGradeAsPercent(da.Item1.Assignment.PointsPossible), "Index", "Rubric", new { assignmentId = da.Item1.AssignmentID, cuId = da.Item2.TeamMembers.FirstOrDefault().CourseUserID }, new { });
                    }
                }
                else
                {
                    if (da.Item1 == null)
                    {
                        <a href="#" onclick="goToCategoryTab(@assignment.CategoryID, @da.Item2.TeamMembers.FirstOrDefault().CourseUser.ID);" style="cursor:pointer;">Not Graded</a>
                    }
                    else
                    {
                        <a href="#" onclick="goToCategoryTab(@da.Item1.Assignment.CategoryID, @da.Item2.TeamMembers.FirstOrDefault().CourseUser.ID);" style="cursor:pointer;">@da.Item1.getGradeAsPercent(da.Item1.Assignment.PointsPossible)></a>
                    }
                }    
            </td>
            @if (assignment.HasCommentCategories)
            {
                <td> <!--Cell for inline comments - only allow them to edit if there has been something submitted-->
                    @if (da.Item3 != "No Submission")
                    {
                        @Html.ActionLink("View/Edit...", "InlineReview", "Assignment", new { assignmentID = assignment.ID, teamID = da.Item2.ID }, new { })
                    }
                    else
                    {
                        @:Nothing to Review
                    }
                </td>
            }
            
            @if (assignment.HasDeliverables)
            {
                <td><!--Cell for submission download - only allow if there is a time submitted-->
                    @if (da.Item3 != "No Submission")
                    {
                        @(Html.ActionLink(da.Item3, "GetSubmissionZip", "FileHandler", new { assignmentID = assignment.ID, teamID = da.Item2.ID }, new { onclick = "create_and_open_downloading_submission_dialog()" }))
                    }
                    else
                    {
                        @:Nothing Received
                    }
                </td>
                @*<td><!--Cell for submitting on behalf of students -->
                    @{
                    AjaxOptions options = new AjaxOptions()
                    {
                        LoadingElementId = "Loading",
                        HttpMethod = "Get",
                        UpdateTargetId = "submitFiles",
                        OnComplete = "SubmissionLoaded"
                    };
                    @Ajax.ActionLink("Submit", "Create", "Submission", new { id = assignment.ID, up = da.Item2.Team.TeamMembers.FirstOrDefault().CourseUser.UserProfile }, options, new object());
                    }
                </td>
                *@
            }
            <td style="vertical-align:bottom;" class="latePenaltyTd"> <!--Cell for late penalty-->
                @if (da.Item1 == null)
                {
                    @:0.00 % <a class="latePenaltyA" style="display:none;" onclick="openManualLatePenWindow(0, @da.Item2.TeamMembers.FirstOrDefault().CourseUser.ID, @assignment.ID);">@Helpers.EditButton()</a>
                }
                else
                {
                    @da.Item1.getAppliedLatePenaltyAsDecimal().ToString("P") <a class="latePenaltyA" style="display:none;" onclick="openManualLatePenWindow(@da.Item1.ID, @da.Item2.TeamMembers.FirstOrDefault().CourseUser.ID, @assignment.ID);">@Helpers.EditButton()</a>
                }
            </td>
        </tr>
    }
</table>
    if (assignment.HasDeliverables)
    {
        <br />
    }
}




<script type="text/javascript">
    

    function create_and_open_downloading_submission_dialog() {

        //create the div that we will then make into a dialog
        $('body').append(
      '<div id="downloading_submission_dialog" title="Download Submission"> \
       <p>The zip is being generated and will automatically start downloading when it is ready, please do not leave the page or click the link again</p> \
   </div>');

        //make the div we just created into a dialog box
        $('#downloading_submission_dialog').dialog({
            modal: false,
            autoOpen: true,
            resizable: true,
            width: 350,
            height: 300,
            closeOnEscape: true,
            close: remove_downloading_submission_dialog,
            buttons: { "OK": remove_downloading_submission_dialog }
        });

        $('#downloading_submission_dialog').dialog('open');
        return false;
    }

    function remove_downloading_submission_dialog() {

        //change the dialog back into a normal div (that is what destroy does although it does not destroy the div)
        $('#downloading_submission_dialog').dialog("destroy");

        //then remove the div
        $('#downloading_submission_dialog').remove();
    }


    function SubmissionLoaded() {
        $('#submit_files_dialog').dialog('open');

    }

    function goToCategoryTab(catID, stuID) {
        $.ajax({
            type: "POST",
            url: "/Gradebook/SetTabStudent",
            data: { studentId: stuID.toString() },
            success: function () {
                location.href = "/Gradebook/Tab/?categoryId=" + catID;
            }
        });
        hideTabColors();
    }

    /*Functions and variables for deleteAssignment modal box*/
    var assignmentToDeleteID = -1;
    function openConfirmDeleteWindow(assignmentID) {
        assignmentToDeleteID = assignmentID;
        $("#confirmDeleteWindow").dialog({
            modal: true,
            resizable: false,
            width: 310,
            height: 135,
            closeOnEscape: false
        });
    }

    function deleteAssignment() {
        $.ajax({
           async: false,
           url: "/Assignment/Delete",
           data: { id: assignmentToDeleteID }           
        });       

        var replaceString = "http://" + window.location.host + "/Assignment";
        window.location.assign(replaceString);
        hideConfirmDeleteWindow();
    }

   function hideConfirmDeleteWindow() {
        $("#confirmDeleteWindow").dialog('close');
    }

    function publishAllGrades(aId) {
        $.ajax({
            async: false,
            url: "/Assignment/PublishAllGrades",
            data: { assignmentId: aId }
        });
        window.location.reload(true);
    }

    var scoreId;
    var userId;
    var assId;    

    $(".latePenaltyTd").mouseenter(function () {
        $(this).find("a").show();
    });

    $(".latePenaltyTd").mouseleave(function () {
        $(this).find("a").hide();
    });

    function openManualLatePenWindow(sId, uId, aId) {
        scoreId = sId;
        userId = uId;
        assId = aId;

        //$("#EditLatePercentWindowID").dialog("open");

        $("#EditLatePercentWindowID").dialog({
            autoOpen: true,
            modal: true,
            resizable: false,
            width: 370,
            height: 150,
            closeOnEscape: false
        });
    }

    function closeManualLatePenWindow() {
        $("#EditLatePercentWindowID").dialog("close");
    }

    function setManualLatePen() {
        if ($("#radioBtn1").attr('checked') == "checked") {
            $.ajax({
                async: false,
                url: "/Assignment/ModifyLatePenalty",
                data: { scoreId: scoreId, courseUserId: userId, latePenalty: -1, assignmentId: assId }
            });
        }
        else {
            var lp = $("#manualLatePen").val();
            $.ajax({
                async: false,
                url: "/Assignment/ModifyLatePenalty",
                data: { scoreId: scoreId, courseUserId: userId, latePenalty: lp, assignmentId: assId }
            });
        }
        window.location.reload(true);
    }

    
    function toggleDraft(id){
        $.ajax({
            async: false,
            url: "/Assignment/ToggleDraft",
            data: { assignmentID: id },
        });
        window.location.reload(true);
    }

</script>

<!--Element for modal confirmation box-->
<div id="confirmDeleteWindow" style="display:none;" title="Delete Assignment">
    <div id="confirmForm">
        <text>Are you sure you want to delete that assignment?</text>
        <div class="yesAndNoDiv">
            <input value="Delete" type="submit" onclick="deleteAssignment();"/>
            <input value="Cancel" type="button" onclick="hideConfirmDeleteWindow()" />
        </div>
    </div>
</div>


<!--Elements for loading message and submit box-->
<br /><text id="Loading" style="display:none"> <br />Please Wait...</text>
<div id="submit_files_dialog" style="display:none">
    <div id= "submitFiles"></div>
    <script type="text/javascript">
        $(function () {
            $('#submit_files_dialog').dialog(
            {
                modal: true,
                autoOpen: false,
                height: 600,
                width: 500
            });
        });
    </script>
    </div>
</div>

<!-- Pop-up window for editing late percentage -->
<div id="EditLatePercentWindowID" style="display: none;" title="Edit Score">
   <input type="radio" id="radioBtn1" name="group1"/> Use default late penalty<br />
   <input type="radio" id="radioBtn2" name="group1"/> Use a custom late penalty of <input size="5" id="manualLatePen"/>%<br />
   <td>
       <text id="latePenErrorText" style="color:Red; float:left; font-size:smaller"></text><br />
       <div style="float:right">
           <input type="button" onclick="setManualLatePen();" value="Apply Changes" />
           <input type="button" onclick="closeManualLatePenWindow();" value="Cancel" />
       </div>
   </td>
</div>
