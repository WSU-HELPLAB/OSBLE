@using OSBLE.Models
@using OSBLE.Models.Assignments
@using OSBLE.Models.Courses
@using OSBLE.Models.Assignments.Activities.Scores
@model Assignment

@{
    Assignment assignment = Model;   
}

<h2>
@if (ViewBag.ActiveCourse.AbstractRole.CanModify)
{
    if (assignment.IsDraft)
    {
        <a title="Click to Publish"  class="pointerOnMouseOver" onclick="toggleDraft(@assignment.ID)">@Helpers.PublishedIcon()</a>
    }
    else
    {
        <a title="Click to Unpublish"  class="pointerOnMouseOver" onclick="toggleDraft(@assignment.ID)">@Helpers.PublishedIcon()</a>
    }
    <a title="Edit" href="@Url.Action("Index", "Home", new { area = "AssignmentWizard", assignmentId = assignment.ID })">@Helpers.EditButton()</a>
    <a title="Delete" class="pointerOnMouseOver" onclick="openConfirmDeleteWindow(@assignment.ID)">@Helpers.DeleteButton()</a>
}
@assignment.AssignmentName
</h2>    

<table>
    <tr><!--Released row-->
        <td>
            <text class="osbleColorBold">Released:</text>
        </td>
        <td>
             @assignment.ReleaseDate
        </td>
    </tr>
    <tr><!--Due row-->
        <td>
            <text class="osbleColorBold">Due:</text>
        </td>
        <td>
            @assignment.DueDate
        </td>
    </tr>
    <tr><!--Grading row-->
        <td>
            <text class="osbleColorBold">Grading:</text>
        </td>
        <td>
            Worth @assignment.PointsPossible in @assignment.Category.Name category.
        </td>
    </tr>
    <tr><!--Late Policy row-->
        <td>
            <text class="osbleColorBold">Late Policy:</text> 
        </td>
        <td>
            @if (assignment.HoursLateWindow == 0)
            {
                @:No late assignments accepted.
            }
            else
            {
                @:Assignments accepted up to  @assignment.HoursLateWindow hours late, docking @assignment.DeductionPerHourLate% per hour.
            }
        </td>
    </tr>
    <tr><!--Description row-->
        <td>
            <text class="osbleColorBold">Description:</text> 
        </td>
        <td>
            @assignment.AssignmentDescription
        </td>
    </tr>
    @if (assignment.HasDeliverables)
    {
        int i = 0;
        int j = 1;
        
        <tr><!--Deliverables row-->
            <td>
                <text class="osbleColorBold">Deliverables:</text><br />
            </td>
        </tr>
        foreach (Deliverable d in assignment.Deliverables)
        {
            <tr>
                <td></td>
                <td>
                    @(i+1).
                    @d.Name (
                    @foreach (string str in @ViewBag.filetypeList[i])
                    {
                        if (j == @ViewBag.filetypeList[i].Length)
                        {
                            @(str)
                        }
                        else
                        {
                            @(str + ", ")
                        }
                        j++;
                    }
                    )
                </td>
            </tr>
                    i++;
                    j = 1;
        }
    }
    @if (assignment.HasRubric)
    {
        <tr><!--Rubric row-->
            <td><text class="osbleColorBold">Rubric:</text></td>
            <td>
                @if (ViewBag.ActiveCourse.AbstractRole.CanModify)
                {
                    @Html.ActionLink("View Rubric", "Index", "Rubric", new { assignmentId = assignment.ID, cuId = ViewBag.CurrentUserID }, new { });
                }
                else
                {
                    @Html.ActionLink("View Rubric", "View", "Rubric", new { assignmentId = assignment.ID, cuId = ViewBag.CurrentUserID }, new { });
                }
            </td>
        </tr>
    }
    @if (ViewBag.TeamMembers != null)
    {
        <tr><!--Team name row-->
            <td>
                <text class="osbleColorBold">Team:</text>
            </td>
            <td>
                @ViewBag.TeamName
            </td>
        </tr>
        <tr><!--Team members row-->
            <td style="vertical-align:text-top">
                <text class="osbleColorBold">Members:</text>
            </td>
            <td>
                <ul class="user_list">
                    @foreach (CourseUser cu in ViewBag.TeamMembers)
                    {
                        <li>
                            <div class="user_controls">
                                @if (cu.UserProfile.UserName != null)
                                {
                                    <a title="Mail This User" href="@Url.Action("CreateTeamMember", "Mail", new { id = cu.UserProfile.ID })">@Helpers.MailButton()</a>
                                }
                            </div>
                            @Helpers.SmallProfilePicture(@Url.Action("ProfilePicture", "Roster", new { userProfile = cu.UserProfile.ID }))
                            <span class="roster_name">@Helpers.DisplayFullNameOrPending(cu.UserProfile)</span>
                        </li>
                    }
                </ul>
                <a title="Email whole team" href="@Url.Action("CreateEntireTeam", "Mail", new { teamID = ViewBag.TeamID })">Email the whole team</a>
            </td>
        </tr>
    }
 </table>

@if (ViewBag.ActiveCourse.AbstractRole.CanModify)
{
    <table class="assignTable">
    <!-- Look up activityTeachertable for similar set up
    For name: If a team, display team name and on next line display team members. Have option to email whole team or individual
    for grade: if a rubric assignment, link to rubric tool. Else just show the grade. Display No Grade for NGs and underline them with link if there is a rubric
    For inline comments: Only show if assignment has comment categories. Then allow user to go each students
    For late penalty: display the currently used late penalty. Have edit option there
    For Submission: have a download option with the time submitted or say "Nothing Submitted"
    -->
    <th>Name</th>
    <th>Grade</th>
    @if (assignment.HasCommentCategories)
    {
        <th>Inline Comments</th>    
    }
    <th>Late Penalty</th>
    @if (assignment.HasDeliverables)
    {
        <th>Submission</th>
        @*<th>Submit for Student</th>*@
    }
    

    @foreach (Tuple<Score, AssignmentTeam, string> da in ViewBag.ScoresAndTeams)
    {
        <tr>    
            <td> <!--Cell for name-->
                @if (assignment.HasTeams)
                {
                    <span style="text-decoration: underline">@da.Item2.Team.Name</span>
                    <a title="Email this team" href="@Url.Action("CreateEntireTeam", "Mail", new { teamID = da.Item2.TeamID })">@Helpers.MailButton()</a>
                    <br/>
                    var teamList = "";
                    foreach (TeamMember tm in da.Item2.Team.TeamMembers)
                    {
                        teamList += tm.CourseUser.UserProfile.FirstName + " " + tm.CourseUser.UserProfile.LastName + ", ";
                    }
                    <span>@teamList</span>
                }
                else
                {
                    <a title="Email this User" href="@Url.Action("CreateUser", "Mail", new { id = da.Item2.Team.TeamMembers.FirstOrDefault().CourseUser.UserProfileID })">@Helpers.MailButton()</a>
                    @(da.Item2.Team.TeamMembers.FirstOrDefault().CourseUser.UserProfile.LastName + ", " + da.Item2.Team.TeamMembers.FirstOrDefault().CourseUser.UserProfile.FirstName)
                    
                }
            
            </td>
            <td> <!--Cell for grade-->
                @if (assignment.HasRubric)
                {
                    if (da.Item1 == null)
                    {
                        //Could do a check to see if it is a draft, if it is could say "Draft"
                        @Html.ActionLink("Not Graded", "Index", "Rubric", new { assignmentId = da.Item2.AssignmentID, cuId = ViewBag.CurrentUserID }, new { })
                    }
                    else
                    {
                        @Html.ActionLink(da.Item1.getGradeAsPercent(da.Item2.Assignment.PointsPossible), "Index", "Rubric", new { assignmentId = da.Item2.AssignmentID,cuId = ViewBag.CurrentUserID  }, new { });
                    }
                }
                else
                {
                    if (da.Item1 == null)
                    {
                        <span>Not Graded</span>
                    }
                    else
                    {
                        <span>@da.Item1.getGradeAsPercent(da.Item2.Assignment.PointsPossible)</span>
                    }
                }    
            </td>
            @if (assignment.HasCommentCategories)
            {
                <td> <!--Cell for inline comments - only allow them to edit if there has been something submitted-->
                    @if (da.Item3 != "No Submission")
                    {
                        @Html.ActionLink("View/Edit...", "InlineReview", "Assignment", new { assignmentID = assignment.ID, teamID = da.Item2.TeamID }, new { })
                    }
                    else
                    {
                        @:Nothing to Review
                    }
                </td>
            }
            <td> <!--Cell for late penalty-->
                @if (da.Item1 == null)
                {
                    @:0.00%
                }
                else
                {
                    @da.Item1.getAppliedLatePenaltyAsDecimal().ToString("P");
                }
            </td>
            @if (assignment.HasDeliverables)
            {
                <td><!--Cell for submission download - only allow if there is a time submitted-->
                    @if (da.Item3 != "No Submission")
                    {
                        @(Html.ActionLink(da.Item3, "GetSubmissionZip", "FileHandler", new { assignmentID = assignment.ID, teamID = da.Item2.TeamID }, new { onclick = "create_and_open_downloading_submission_dialog()" }))
                    }
                    else
                    {
                        @:Nothing Received
                    }
                </td>
                @*<td><!--Cell for submitting on behalf of students -->
                    @{
                    //Student with deliverables. Can submit
                    AjaxOptions options = new AjaxOptions()
                    {
                        LoadingElementId = "Loading",
                        HttpMethod = "Get",
                        UpdateTargetId = "submitFiles",
                        OnComplete = "SubmissionLoaded"
                    };
                    @Ajax.ActionLink("Submit", "Create", "Submission", new { id = assignment.ID, up = da.Item2.Team.TeamMembers.FirstOrDefault().CourseUser.UserProfile }, options, new object());
                    }
                </td>
                *@
            }
        </tr>
    }
</table>
    if (assignment.HasDeliverables)
    {
        <br />@Html.ActionLink("Download all submissions for this activity", "GetAllSubmissionsForActivity", "FileHandler", new { assignmentID = assignment.ID }, new { onclick = "create_and_open_downloading_submission_dialog()" })
    }
}




<script type="text/javascript">
    function create_and_open_downloading_submission_dialog() {

        //create the div that we will then make into a dialog
        $('body').append(
      '<div id="downloading_submission_dialog" title="Download Submission"> \
       <p>The zip is being generated and will automatically start downloading when it is ready, please do not leave the page or click the link again</p> \
   </div>');

        //make the div we just created into a dialog box
        $('#downloading_submission_dialog').dialog({
            modal: false,
            autoOpen: true,
            resizable: true,
            width: 350,
            height: 300,
            closeOnEscape: true,
            close: remove_downloading_submission_dialog,
            buttons: { "OK": remove_downloading_submission_dialog }
        });

        $('#downloading_submission_dialog').dialog('open');
        return false;
    }

    function remove_downloading_submission_dialog() {

        //change the dialog back into a normal div (that is what destroy does although it does not destroy the div)
        $('#downloading_submission_dialog').dialog("destroy");

        //then remove the div
        $('#downloading_submission_dialog').remove();
    }


    function SubmissionLoaded() {
        $('#submit_files_dialog').dialog('open');

    }

    /*Functions and variables for deleteAssignment modal box*/
    var assignmentToDeleteID = -1;
    function openConfirmDeleteWindow(assignmentID) {
        assignmentToDeleteID = assignmentID;
        $("#confirmDeleteWindow").dialog({
            modal: true,
            resizable: false,
            width: 310,
            height: 135,
            closeOnEscape: false
        });
    }

    function deleteAssignment() {
        $.ajax({
           async: false,
           url: "/Assignment/Delete",
           data: { id: assignmentToDeleteID },
        });       

        var replaceString = "http://" + window.location.host + "/Assignment";
        window.location.assign(replaceString);
        hideConfirmDeleteWindow();
    }

   function hideConfirmDeleteWindow() {
        $("#confirmDeleteWindow").dialog('close');
    }
</script>

<!--Element for modal confirmation box-->
<div id="confirmDeleteWindow" style="display:none;" title="Change Category Weight">
    <form id="confirmForm" onsubmit="deleteAssignment();">
        <text>Are you sure you want to delete that assignment?</text>
        <div class="yesAndNoDiv">
            <input value="Delete" type="submit"/>
            <input value="Cancel" type="button" onclick="hideConfirmDeleteWindow()" />
        </div>
    </form>
</div>


<!--Elements for loading message and submit box-->
<br /><text id="Loading" style="display:none"> <br />Please Wait...</text>
<div id="submit_files_dialog" style="display:none">
    <div id= "submitFiles"></div>
    <script type="text/javascript">
        $(function () {
            $('#submit_files_dialog').dialog(
            {
                modal: true,
                autoOpen: false,
                height: 600,
                width: 500
            });
        });
    </script>
    </div>
</div>
