@using OSBLE.Models
@using OSBLE.Models.Assignments
@using OSBLE.Models.Courses
@using OSBLE.Models.Assignments
@model Assignment

@{
    Assignment assignment = Model;
    ViewBag.Title = "Assignment Details";

    int submittedCount = 0;
    int totalStudentCount = 0;
    int totalScores = 0;
    foreach (Tuple<Score, Team, string> da in ViewBag.ScoresAndTeams)
    {
        if (da.Item3 != "No Submission")
        {
            submittedCount++;
        }
        if (da.Item1 != null)
        {
            if (da.Item1.Points >= 0)
            {
                totalScores++;
            }
        }
        totalStudentCount++;
    }
    List<OSBLE.Models.Courses.Rubrics.RubricEvaluation> r = ViewBag.RubricEvals;
    if (assignment.HasDeliverables)
    {
        <tr>
            <td><text class="osbleColorBold">Submissions:</text></td>
            @if (submittedCount > 0)
            {
                <td>@submittedCount of @totalStudentCount have been submitted&nbsp @Html.ActionLink("[Download All]", "GetAllSubmissionsForActivity", "FileHandler", new { assignmentID = assignment.ID }, new { onclick = "create_and_open_downloading_submission_dialog()", style = "text-decoration:none" })</td>    
            }
            else
            {
                <td>@submittedCount of @totalStudentCount have been submitted</td>
            }
        </tr>  
    }
    <tr>
        <td style="vertical-align:top"><text class="osbleColorBold" >Grading progress:</text></td>
        <td>
            @totalScores of @assignment.AssignmentTeams.Count() have been published<br />
            @if (r.Count() > 0)
            {
                @:@r.Count() have been saved as draft&nbsp<a style="cursor:pointer" onclick="publishAllGrades(@assignment.ID);">[Publish All]</a>
            }
            else
            {
                @:@r.Count() have been saved as draft
            }
        </td>
    </tr> 
    }
 </table>
@{    
    <table class="assignDetailsTable" cellspacing="0">
    <!-- Look up activityTeachertable for similar set up
    For name: If a team, display team name and on next line display team members. Have option to email whole team or individual
    for grade: if a rubric assignment, link to rubric tool. Else just show the grade. Display No Grade for NGs and underline them with link if there is a rubric
    For inline comments: Only show if assignment has comment categories. Then allow user to go each students
    For late penalty: display the currently used late penalty. Have edit option there
    For Submission: have a download option with the time submitted or say "Nothing Submitted"
    -->
    <th>Name</th>
    <th>Grade</th>
    @if (assignment.HasCommentCategories)
    {
        <th>Inline Comments</th>    
    }
    
    @if (assignment.HasDeliverables || assignment.AssignmentTypeID == 3)
    {
        <th>Submission</th>
        @*<th>Submit for Student</th>*@
    }
    <th>Late Penalty</th>
    <br />

    @foreach (Tuple<Score, Team, string> da in ViewBag.ScoresAndTeams)
    {
        <tr>    
            <td> <!--Cell for name-->
                @if (assignment.HasTeams)
                {
                    <span style="text-decoration: underline">@da.Item2.Name</span>
                    <a title="Email this team" href="@Url.Action("CreateEntireTeam", "Mail", new { teamID = da.Item2.ID })">@Helpers.MailButton()</a>
                    <br/>
                    var teamList = "";
                    int i = 1;
                    foreach (TeamMember tm in da.Item2.TeamMembers)
                    {
                        if (i == da.Item2.TeamMembers.Count)
                        {
                            teamList += " & " + tm.CourseUser.UserProfile.FirstName + " " + tm.CourseUser.UserProfile.LastName;
                        }
                        else if (i == 1)
                        {
                            teamList += tm.CourseUser.UserProfile.FirstName + " " + tm.CourseUser.UserProfile.LastName;
                        }
                        else
                        {
                            teamList += ", " + tm.CourseUser.UserProfile.FirstName + " " + tm.CourseUser.UserProfile.LastName;
                        }
                        i++;
                    }
                    <span>@teamList</span>
                }
                else
                {
                    <a title="Email this User" href="@Url.Action("CreateUser", "Mail", new { id = da.Item2.TeamMembers.FirstOrDefault().CourseUser.UserProfileID })">@Helpers.MailButton()</a>
                    @(da.Item2.TeamMembers.FirstOrDefault().CourseUser.UserProfile.LastName + ", " + da.Item2.TeamMembers.FirstOrDefault().CourseUser.UserProfile.FirstName)
                    
                }
            
            </td>
            <td> <!--Cell for grade-->                
                @if (assignment.HasRubric)
                {
                    if (da.Item1 == null)
                    {
                        r.OrderBy(o => o.Recipient.TeamMembers.FirstOrDefault().CourseUser.UserProfile.LastName);
                        bool found = false;
                        foreach (OSBLE.Models.Courses.Rubrics.RubricEvaluation eval in r)
                        {
                            if (eval.Recipient.ID == da.Item2.ID)
                            {
                                if (!eval.IsPublished)
                                {
                                    found = true;
                                }
                            }
                        }
                        if (found)
                        {
                            @Html.ActionLink("Saved as Draft", "Index", "Rubric", new { assignmentId = assignment.ID, cuId = da.Item2.TeamMembers.FirstOrDefault().CourseUserID }, new { })
                        }
                        else
                        {
                            @Html.ActionLink("Not Graded", "Index", "Rubric", new { assignmentId = assignment.ID, cuId = da.Item2.TeamMembers.FirstOrDefault().CourseUserID }, new { })
                        }

                    }
                    else
                    {
                        @Html.ActionLink(da.Item1.getGradeAsPercent(da.Item1.Assignment.PointsPossible), "Index", "Rubric", new { assignmentId = da.Item1.AssignmentID, cuId = da.Item2.TeamMembers.FirstOrDefault().CourseUserID }, new { });
                    }
                }
                else
                {
                    if (da.Item1 == null)
                    {
                        <a href="#" onclick="goToCategoryTab(@assignment.CategoryID, @da.Item2.TeamMembers.FirstOrDefault().CourseUser.ID);" style="cursor:pointer;">Not Graded</a>
                    }
                    else
                    {
                        <a href="#" onclick="goToCategoryTab(@da.Item1.Assignment.CategoryID, @da.Item2.TeamMembers.FirstOrDefault().CourseUser.ID);" style="cursor:pointer;">@da.Item1.getGradeAsPercent(da.Item1.Assignment.PointsPossible)</a>
                    }
                }    
            </td>
            @if (assignment.HasCommentCategories)
            {
                <td> <!--Cell for inline comments - only allow them to edit if there has been something submitted-->
                    @if (da.Item3 != "No Submission")
                    {
                        @Html.ActionLink("View/Edit...", "InlineReview", "Assignment", new { assignmentID = assignment.ID, teamID = da.Item2.ID }, new { })
                    }
                    else
                    {
                        @:Nothing to Review
                    }
                </td>
            }
            
            @if (assignment.HasDeliverables || assignment.AssignmentTypeID == 3)
            {
                <td><!--Cell for submission download - only allow if there is a time submitted-->
                @if (assignment.AssignmentTypeID == 3)
                {
                    @(Html.ActionLink("View/Participate in Discussion", "TeacherIndex", "DiscussionAssignment", new { assignmentId = assignment.ID, courseUserId = da.Item2.TeamMembers.FirstOrDefault().CourseUserID }, new { }))
                }
                else
                {

                    if (da.Item3 != "No Submission")
                    {
                        @(Html.ActionLink(da.Item3, "GetSubmissionZip", "FileHandler", new { assignmentID = assignment.ID, teamID = da.Item2.ID }, new { onclick = "create_and_open_downloading_submission_dialog()" }))
                    }
                    else
                    {
                        @:Nothing Received
                    }

                }
                </td>
                @*<td><!--Cell for submitting on behalf of students -->
                    @{
                    AjaxOptions options = new AjaxOptions()
                    {
                        LoadingElementId = "Loading",
                        HttpMethod = "Get",
                        UpdateTargetId = "submitFiles",
                        OnComplete = "SubmissionLoaded"
                    };
                    @Ajax.ActionLink("Submit", "Create", "Submission", new { id = assignment.ID, up = da.Item2.Team.TeamMembers.FirstOrDefault().CourseUser.UserProfile }, options, new object());
                    }
                </td>
                *@
            }
            <td style="vertical-align:bottom;" class="latePenaltyTd"> <!--Cell for late penalty-->
                @if (da.Item1 == null)
                {
                    @:0.00 % <a class="latePenaltyA" style="display:none;" onclick="openManualLatePenWindow(0, @da.Item2.TeamMembers.FirstOrDefault().CourseUser.ID, @assignment.ID);">@Helpers.EditButton()</a>
                }
                else
                {
                    @da.Item1.getAppliedLatePenaltyAsDecimal().ToString("P") <a class="latePenaltyA" style="display:none;" onclick="openManualLatePenWindow(@da.Item1.ID, @da.Item2.TeamMembers.FirstOrDefault().CourseUser.ID, @assignment.ID);">@Helpers.EditButton()</a>
                }
            </td>
        </tr>
    }
</table>
    if (assignment.HasDeliverables)
    {
        <br />
    }
}


<!-- Pop-up window for editing late percentage -->
<div id="EditLatePercentWindowID" style="display: none;" title="Edit Score">
   <input type="radio" id="radioBtn1" name="group1"/> Use default late penalty<br />
   <input type="radio" id="radioBtn2" name="group1"/> Use a custom late penalty of <input size="5" id="manualLatePen"/>%<br />
   <td>
       <text id="latePenErrorText" style="color:Red; float:left; font-size:smaller"></text><br />
       <div style="float:right">
           <input type="button" onclick="setManualLatePen();" value="Apply Changes" />
           <input type="button" onclick="closeManualLatePenWindow();" value="Cancel" />
       </div>
   </td>
</div>
