@using OSBLE.Models
@using OSBLE.Models.Assignments
@using OSBLE.Models.Courses
@using OSBLE.Models.Assignments
@using OSBLE.Models.ViewModels
@model Assignment

@{
    Assignment assignment = Model;
    ViewBag.Title = "Assignment Details";

    List<CourseUser> cuList = ViewBag.ObserverCU;

    int submittedCount = 0;
    int totalStudentCount = 0;
    int totalScores = 0;
    foreach (AssignmentDetailsViewModel advm in ViewBag.AssignmentDetailsVMList)
    {
        if (advm.submissionTime != null)
        {
            submittedCount++;
        }
        if (advm.score != null && advm.score.Points >= 0)
        {
            totalScores++;
        }
        totalStudentCount++;
    }
    List<OSBLE.Models.Courses.Rubrics.RubricEvaluation> r = ViewBag.RubricEvals;
    if (assignment.HasDeliverables)
    {
        @:<tr>
            <td><text class="osbleColorBold">Submissions:</text></td>
        if (submittedCount > 0)
        {
                <td>@submittedCount of @totalStudentCount have been submitted&nbsp @Html.ActionLink("[Download All]", "GetAllSubmissionsForActivity", "FileHandler", new { assignmentID = assignment.ID }, new { onclick = "create_and_open_downloading_submission_dialog()", style = "text-decoration:none" })</td>    
        }
        else
        {
                <td>@submittedCount of @totalStudentCount have been submitted</td>
        }
    }
    <tr>
        <td style="vertical-align:top"><text class="osbleColorBold" >Grading progress:</text></td>
        <td>
            @totalScores of @assignment.AssignmentTeams.Count() have been published<br />
            @r.Count() have been saved as draft
        </td>
    </tr>
}  

 </table>
    
<table class="assignDetailsTable" cellspacing="0">
<!-- Look up activityTeachertable for similar set up
For name: If a team, display team name and on next line display team members. Have option to email whole team or individual
for grade: if a rubric assignment, link to rubric tool. Else just show the grade. Display No Grade for NGs and underline them with link if there is a rubric
For inline comments: Only show if assignment has comment categories. Then allow user to go each students
For late penalty: display the currently used late penalty. Have edit option there
For Submission: have a download option with the time submitted or say "Nothing Submitted"
-->
<th>Name</th>
<th>Grade</th>
@if (assignment.HasCommentCategories)
{
    <th>Inline Comments</th>    
}
    
@if (assignment.HasDeliverables)
{
    <th>Submission</th>
}
@if (assignment.AssignmentTypeID == 3)
{
    <th>Posts</th> 
    <th>Replies</th> 
    <th>All</th> 
}
<th>Late Penalty</th>
<br />

@if (assignment.AssignmentTypeID == 3 && assignment.HasDiscussionTeams)
{
    foreach (DiscussionTeam dt in ViewBag.DiscussionTeamList)
    {
            <tr>
                <td colspan="2">@Html.ActionLink("Anonymous Team" +  dt.TeamID, "ObserverIndex", "DiscussionAssignment", new { assignmentId = assignment.ID, courseUserId = dt.Team.TeamMembers.FirstOrDefault().CourseUserID, postOrReply = 3 }, new { })</td>
                <td id="posts-@dt.TeamID"></td>
                <td id="replies-@dt.TeamID"></td>
                <td id="all-@dt.TeamID" colspan="2"></td>
            </tr>
        foreach (TeamMember tm in dt.Team.TeamMembers)
        {
            foreach (AssignmentDetailsViewModel advm in ViewBag.AssignmentDetailsVMList)
            {
                if (tm.CourseUserID == advm.team.TeamMembers.FirstOrDefault().CourseUserID)
                {
                        <tr>
                        <td>&nbsp&nbsp&nbsp Anonymous @tm.CourseUserID</td>
                        <td> <!--td for grade-->
                            @if (assignment.HasRubric)
                            {
                                if (advm.score == null)
                                {
                                    r.OrderBy(o => o.Recipient.TeamMembers.FirstOrDefault().CourseUser.UserProfile.LastName);
                                    bool found = false;
                                    foreach (OSBLE.Models.Courses.Rubrics.RubricEvaluation eval in r)
                                    {
                                        if (eval.Recipient.ID == advm.team.ID)
                                        {
                                            if (!eval.IsPublished)
                                            {
                                                found = true;
                                            }
                                        }
                                    }
                                    if (found)
                                    {
                                        @Html.ActionLink("View", "Rubric", new { assignmentId = assignment.ID, cuId = advm.team.TeamMembers.FirstOrDefault().CourseUserID }, new { })
                                    }
                                    else
                                    {
                                        @Html.ActionLink("View Rubric", "ViewAsUneditable", "Rubric", new { assignmentId = assignment.ID }, new { })
                                    }

                                }
                                else
                                {
                                    @Html.ActionLink(advm.score.getGradeAsPercent(advm.score.Assignment.PointsPossible), "View", "Rubric", new { assignmentId = advm.score.AssignmentID, cuId = advm.team.TeamMembers.FirstOrDefault().CourseUserID }, new { });
                                }
                            }
                            else
                            {
                                if (advm.score == null)
                                {
                                    <a href="#" onclick="goToCategoryTab(@assignment.CategoryID, @advm.team.TeamMembers.FirstOrDefault().CourseUser.ID);" style="cursor:pointer;">Not Graded</a>
                                }
                                else
                                {
                                    <a href="#" onclick="goToCategoryTab(@advm.score.Assignment.CategoryID, @advm.team.TeamMembers.FirstOrDefault().CourseUser.ID);" style="cursor:pointer;">@advm.score.getGradeAsPercent(advm.score.Assignment.PointsPossible)</a>
                                }
                            }
                        </td> 
                        <td><!--postcount-->
                            @(Html.ActionLink((advm.postCount.ToString()), "ObserverIndex", "DiscussionAssignment", new { assignmentId = assignment.ID, courseUserId = advm.team.TeamMembers.FirstOrDefault().CourseUserID, postOrReply = 0 }, new { }))
                        </td>  
                        <td><!--replycount-->
                            @(Html.ActionLink((advm.replyCount.ToString()), "ObserverIndex", "DiscussionAssignment", new { assignmentId = assignment.ID, courseUserId = advm.team.TeamMembers.FirstOrDefault().CourseUserID, postOrReply = 1 }, new { }))
                        </td> 
                        <td><!--post&reply count-->
                            @(Html.ActionLink((advm.replyCount + advm.postCount).ToString(), "ObserverIndex", "DiscussionAssignment", new { assignmentId = assignment.ID, courseUserId = advm.team.TeamMembers.FirstOrDefault().CourseUserID, postOrReply = 2 }, new { }))
                        </td>   
                        <td style="vertical-align:bottom;" class="latePenaltyTd"> <!--Cell for late penalty-->
                            @if (advm.score == null)
                            {
                                @:0.00 % <a class="latePenaltyA" style="display:none;" onclick="openManualLatePenWindow(0, @advm.team.TeamMembers.FirstOrDefault().CourseUser.ID, @assignment.ID);">@Helpers.EditButton()</a>
                            }
                            else
                            {
                                @advm.score.getAppliedLatePenaltyAsDecimal().ToString("P") <a class="latePenaltyA" style="display:none;" onclick="openManualLatePenWindow(@advm.score.ID, @advm.team.TeamMembers.FirstOrDefault().CourseUser.ID, @assignment.ID);">@Helpers.EditButton()</a>
                            }
                        </td>
                        </tr>
                }
            }
        }
    }
}
else
{
    foreach (AssignmentDetailsViewModel advm in ViewBag.AssignmentDetailsVMList)
    {
            <tr>    
                <td> <!--Cell for name-->
                    @if (assignment.HasTeams)
                    {
                        <span style="text-decoration: underline">Anonymous Team @advm.team.ID</span>
                        <a title="Email this team" href="@Url.Action("CreateEntireTeam", "Mail", new { teamID = advm.team.ID })">@Helpers.MailButton()</a>
                        <br/>
                        var teamList = "";
                        int i = 1;
                        foreach (TeamMember tm in advm.team.TeamMembers)
                        {

                            if (i == advm.team.TeamMembers.Count)
                            {
                                teamList += " & Anonymous " + tm.CourseUserID;
                            }
                            else if (i == 1)
                            {
                                teamList += " Anonymous " + tm.CourseUserID;
                            }
                            else
                            {
                                teamList += ", Anonymous " + tm.CourseUserID;
                            }
                            i++;
                        }
                        <span>@teamList</span>
                    }
                    else
                    {
                        <a title="Email this User" href="@Url.Action("CreateUser", "Mail", new { id = advm.team.TeamMembers.FirstOrDefault().CourseUser.UserProfileID })">@Helpers.MailButton()</a>
                        @(" Anonymous " + advm.team.TeamMembers.FirstOrDefault().CourseUserID)
                    }
            
                </td>
                <td> <!--Cell for grade-->                
                    @if (assignment.HasRubric)
                    {
                        if (advm.score == null)
                        {
                            r.OrderBy(o => o.Recipient.TeamMembers.FirstOrDefault().CourseUser.UserProfile.LastName);
                            bool found = false;
                            foreach (OSBLE.Models.Courses.Rubrics.RubricEvaluation eval in r)
                            {
                                if (eval.Recipient.ID == advm.team.ID)
                                {
                                    found = true;
                                }
                            }
                            if (found)
                            {
                                    @Html.ActionLink("View", "Rubric", new { assignmentId = assignment.ID, cuId = advm.team.TeamMembers.FirstOrDefault().CourseUserID }, new { })
                            }
                            else
                            {
                                    @Html.ActionLink("View Rubric", "ViewAsUneditable", "Rubric", new { assignmentId = assignment.ID }, new { })
                            }

                        }
                        else
                        {
                                @Html.ActionLink(advm.score.getGradeAsPercent(advm.score.Assignment.PointsPossible), "View", "Rubric", new { assignmentId = advm.score.AssignmentID, cuId = advm.team.TeamMembers.FirstOrDefault().CourseUserID }, new { });
                        }
                    }
                    else
                    {
                        if (advm.score == null)
                        {
                            //If the assignment is a team evaluation
                            if (assignment.AssignmentTypeID == 4)
                            {
                                //@Html.ActionLink("Team Evaluation", "TeacherTeamEvaluation", "Assignment", new { teamId = advm.team.ID, assignmentId = assignment.ID }, new { })
                                //<a href="#" onclick="goToCategoryTab(@da.Item1.Assignment.CategoryID, @da.Item2.TeamMembers.FirstOrDefault().CourseUser.ID);" style="cursor:pointer;">@da.Item1.getGradeAsPercent(da.Item1.Assignment.PointsPossible)></a>
                            }
                            else
                            {
                                <a href="#" onclick="goToCategoryTab(@assignment.CategoryID, @advm.team.TeamMembers.FirstOrDefault().CourseUser.ID);" style="cursor:pointer;">Not Graded</a>
                            }
                        }
                        else
                        {
                            <a href="#" onclick="goToCategoryTab(@advm.score.Assignment.CategoryID, @advm.team.TeamMembers.FirstOrDefault().CourseUser.ID);" style="cursor:pointer;">@advm.score.getGradeAsPercent(advm.score.Assignment.PointsPossible)</a>
                        }
                    }    
                </td>
                @if (assignment.HasCommentCategories)
                {
                    <td> <!--Cell for inline comments - only allow them to edit if there has been something submitted-->
                        @if (advm.submissionTime != null)
                        {
                            @Html.ActionLink("View/Edit...", "InlineReview", "Assignment", new { assignmentID = assignment.ID, teamID = advm.team.ID }, new { })
                        }
                        else
                        {
                            @:Nothing to Review
                        }
                    </td>
                }
            
                @if (assignment.HasDeliverables)
                {
                    <td><!--Cell for submission download - only allow if there is a time submitted-->
                        @if (assignment.AssignmentTypeID == 3)
                        {
                            @(Html.ActionLink("View/Participate in Discussion", "TeacherIndex", "DiscussionAssignment", new { assignmentId = assignment.ID, courseUserId = advm.team.TeamMembers.FirstOrDefault().CourseUserID }, new { }))
                        }
                        else
                        {
                            if (advm.submissionTime != null)
                            {
                                @(Html.ActionLink(advm.submissionTime.ToString(), "GetSubmissionZip", "FileHandler", new { assignmentID = assignment.ID, teamID = advm.team.ID }, new { onclick = "create_and_open_downloading_submission_dialog()" }))
                            }
                            else
                            {
                                @:Nothing Received
                            }
                        }
                    </td>
                }
                @if (assignment.AssignmentTypeID == 3)
                {
                    <td><!--postcount-->
                        @(Html.ActionLink((advm.postCount.ToString()), "ObserverIndex", "DiscussionAssignment", new { assignmentId = assignment.ID, courseUserId = advm.team.TeamMembers.FirstOrDefault().CourseUserID, postOrReply = 0 }, new { }))
                    </td>  
                    <td><!--replycount-->
                        @(Html.ActionLink((advm.replyCount.ToString()), "ObserverIndex", "DiscussionAssignment", new { assignmentId = assignment.ID, courseUserId = advm.team.TeamMembers.FirstOrDefault().CourseUserID, postOrReply = 1 }, new { }))
                    </td> 
                    <td><!--post&reply count-->
                        @(Html.ActionLink((advm.replyCount + advm.postCount).ToString(), "ObserverIndex", "DiscussionAssignment", new { assignmentId = assignment.ID, courseUserId = advm.team.TeamMembers.FirstOrDefault().CourseUserID, postOrReply = 2 }, new { }))
                    </td>  
                }
                <td style="vertical-align:bottom;" class="latePenaltyTd"> <!--Cell for late penalty-->
                        @if (advm.score == null)
                        {
                            @:0.00 % <a class="latePenaltyA" style="display:none;" onclick="openManualLatePenWindow(0, @advm.team.TeamMembers.FirstOrDefault().CourseUser.ID, @assignment.ID);">@Helpers.EditButton()</a>
                        }
                        else
                        {
                            @advm.score.getAppliedLatePenaltyAsDecimal().ToString("P") <a class="latePenaltyA" style="display:none;" onclick="openManualLatePenWindow(@advm.score.ID, @advm.team.TeamMembers.FirstOrDefault().CourseUser.ID, @assignment.ID);">@Helpers.EditButton()</a>
                        }
                </td>
            </tr>
    }
}
</table>
