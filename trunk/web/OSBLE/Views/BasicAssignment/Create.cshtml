@model OSBLE.Models.ViewModels.BasicAssignmentViewModel
@using OSBLE.Models.Assignments.Activities
@{
    ViewBag.Title = "Create Basic Assignment";
}
<h2>
    Create Basic Assignment</h2>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/osble.assignments.js")" type="text/javascript"></script>

<script type="text/javascript">

    $(function () {
        //set up event listeners 

        $('#ReleaseDate_Date').change(function () {
            updateReleaseDate();
        });

        $('#ReleaseDate_Time').change(function () {
            updateReleaseDate();
        });

        $('#DueDate_Date').change(function () {
            updateDueDate();
        });

        $('#DueDate_Time').change(function () {
            updateDueDate();
        });

        $('#StudioAssignment_Name').change(function () {
            updateDueDate();
        });

        $('#DueDate_Time').change(function () {
            updateSubmissionName();
        });

        $('#isTeam').change(function () {
            if ($(this).attr('checked')) {

                DisplayTeamOptions();
            }
            else {

                HideTeamOptions();
            }
        });

        $("input[name='team_generation_options']").change(function () {
            if ($("input[name='team_generation_options']:checked").val() == 'PreviousAssignment') {
                DisplayPreviousAssignment();
            }
            else if ($("input[name='team_generation_options']:checked").val() == 'RandomTeams') {
                DisplayRandomTeams();
            }
            else if ($("input[name='team_generation_options']:checked").val() == 'ManualTeams') {
                DisplayManualTeams();
            }
            else {
                throw "Unknown Radio Button Checked: team_generation_options"
            }
        });

        $('#total_teams').focus(function () {
            //Uncheck everything that is checked
            $("input[name='team_or_people']:checked").removeAttr('checked');
            //Check the first radio button with the name team_or_people aka the one associated with total teams
            $("input[name='team_or_people']:eq(0)").attr('checked', 'checked');
        });

        $('#people_per_team').focus(function () {
            //Uncheck everything that is checked
            $("input[name='team_or_people']:checked").removeAttr('checked');
            //Check the second radio button with the name team_or_people aka the one associated with people_per_team
            $("input[name='team_or_people']:eq(1)").attr('checked', 'checked');
        });

        //set up default radio buttons

        //Uncheck everything that is checked
        $("input[name='team_generation_options']:checked").removeAttr('checked');
        //Check the first radio button with the name team_generation_options
        $("input[name='team_generation_options']:eq(0)").attr('checked', 'checked');

        //Uncheck everything that is checked
        $("input[name='team_or_people']:checked").removeAttr('checked');
        //Check the first radio button with the name team_or_people aka the one associated with total teams
        $("input[name='team_or_people']:eq(0)").attr('checked', 'checked');

        $('#isTeam').removeAttr('checked');

        //Call any needed functions (note events wont be called on this function so we got to call them manually

        DisplayPreviousAssignment();

    });

    function DisplayManualTeams() {
        $('#RandomTeams').hide();
        $('#PreviousAssignmentDiv').hide();
        $('#ManualTeams').show('blind');
    }

    function DisplayRandomTeams() {
        $('#PreviousAssignmentDiv').hide();
        $('#ManualTeams').hide();
        $('#RandomTeams').show('blind');
    }

    function DisplayPreviousAssignment() {
        $('#RandomTeams').hide();
        $('#ManualTeams').hide();
        $('#PreviousAssignmentDiv').show('blind');
    }

    function DisplayTeamOptions() {
        $('#Team_Options').show('blind');
    }

    function HideTeamOptions() {
        $('#Team_Options').hide('blind');
    }

    function updateReleaseDate() {
        $('#ReleaseDate').val($('#ReleaseDate_Date').val() + ' ' + $('#ReleaseDate_Time').val());
    }

    function updateDueDate() {
        $('#DueDate').val($('#DueDate_Date').val() + ' ' + $('#DueDate_Time').val());
    }
    function updateSubmissionName() {
        $('#SubmissionName').val($('#StudioAssignment_Name').val() + ' Submission');
    }

</script>
@{
    
    SubmissionActivity submission = Model.Submission;
    StopActivity stop = Model.Stop;


    @Html.ValidationSummary(true, "The due date must come after the release date")
    using (Html.BeginForm())
    {
        Html.ValidationSummary(true);

        @Html.HiddenFor(model => submission.ReleaseDate, new { @id = "ReleaseDate" })
        @Html.HiddenFor(model => stop.ReleaseDate, new { @id = "DueDate" })
        @Html.HiddenFor(model => submission.Name, new { @id = "SubmissionName" })
        <div class="editor-label">
            @Html.LabelFor(model => model.Assignment.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Assignment.Name)
            @Html.ValidationMessageFor(model => model.Assignment.Name)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Assignment.Description)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Assignment.Description, new { rows = 5, cols = 65 })
            @Html.ValidationMessageFor(model => model.Assignment.Description)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => submission.ReleaseDate)
        </div>
        <div class="editor-label">
            @Html.TextBox("ReleaseDate_Date", convertToMonthDayYearFormat(submission.ReleaseDate), new { @id = "ReleaseDate_Date", @class = "date_picker", size = 9 })
            @Html.TextBox("ReleaseDate_Time", convertTime(submission.ReleaseDate), new { @id = "ReleaseDate_Time", @class = "time_picker", size = 9 })
        </div>
        <!--Stop date-->
        <div class="editor-label">
            @Html.Label("Due Date")
        </div>
        <div class="editor-label">
            @Html.TextBox("DueDate_Date", convertToMonthDayYearFormat(stop.ReleaseDate), new { @id = "DueDate_Date", @class = "date_picker", size = 9 })
            @Html.TextBox("DueDate_Time", convertTime(stop.ReleaseDate), new { @id = "DueDate_Time", @class = "time_picker", size = 9 })
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => submission.isTeam)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(model => submission.isTeam, new { id = "isTeam" })
            @Html.ValidationMessageFor(model => submission.isTeam)
        </div>
        <div id="Team_Options" style="display: none">
            <input type="radio" name="team_generation_options" value="PreviousAssignment" />
            Use teams defined in previous course assignment
            <br />
            <ul id="PreviousAssignmentDiv" style="display: none" class="team_generation_options">
                <li>Select box goes here. </li>
                <br />
                <li>
                    <button type="button">
                        Generate Teams</button>
                </li>
            </ul>
            <input type="radio" name="team_generation_options" value="RandomTeams" />
            Generate teams randomly
            <br />
            <ul id="RandomTeams" style="display: none" class="team_generation_options">
                <li>
                    <input type="radio" name="team_or_people" value="Teams" />
                    Specify the number of total teams
                    <input type="text" id="total_teams" />

                </li>
                <br />
                <li>
                    <input type="radio" name="team_or_people" value="People"/>
                    Specify the number of people per team 
                    <input type="text" id="people_per_team"/>
                </li>
                <br />
                <li>
                    <button type="button">
                        Generate Teams</button>
                </li>
            </ul>
            <input type="radio" name="team_generation_options" value="ManualTeams" />
            Specify teams manually
            <ul id="ManualTeams" style="display: none" class="team_generation_options">
                <li>
                    <button type="button">
                        Create Teams
                    </button>
                </li>
            </ul>
            <!-- in the future generate teams with mixed ability and Generate teams with same-ability will need to go here -->
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => submission.InstructorCanReview)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => submission.InstructorCanReview)
            @Html.ValidationMessageFor(model => submission.InstructorCanReview)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Assignment.Category, "Category")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Assignment.CategoryID, ViewBag.Categories as SelectList)
            @Html.ValidationMessageFor(model => model.Assignment.Category)
        </div>


        <h3>Deliverables</h3>

    <table id="deliverables_table">
    <tr>
        <td>
            <table>
                <tr>
                    <td>
                        File Name
                    </td>
                    <td>
                        <input type="text" id="new_deliverable_name" />
                    </td>
                </tr>
                <tr>
                    <td>
                        Type
                    </td>
                    <td>
                        <select id="new_deliverable_type">
                        @foreach (SelectListItem dt in ViewBag.DeliverableTypes)
                        {
                            <option value="@dt.Value">@dt.Text</option>
                        }
                        </select>
                    </td>
                </tr>            
            </table>
        </td>
        <td>
            <select size="5" id="deliverable_list">
                
            </select>
        </td>
    </tr>
    <tr>
        <td>
            <input type="button" value="Add New Deliverable" id="add_new_deliverable" />       
        </td>
        <td>
            <input type="button" value="Remove Selected Deliverable" id="remove_selected_deliverable" />       
        </td>
    </tr>
    </table>
    
    <div id="deliverable_data">
    
    </div>

    <script type="text/javascript">
        $(function () {
            @foreach(Deliverable d in Model.Assignment.Deliverables) {
                <text>
                addNewDeliverable({ name: '@d.Name', fileType: @d.Type });
                </text>
            }
        });       
    </script>
    
        <h3>Grading</h3>
        <div class="editor-label">
            @Html.LabelFor(model => model.Assignment.PointsPossible, "Points Possible")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Assignment.PointsPossible)
            @Html.ValidationMessageFor(model => model.Assignment.PointsPossible)
        </div>

    <h3>Late Policy</h3>
    
    <p>
        Students may submit assignments up to @Html.TextBoxFor(model => model.Submission.MinutesLateWithNoPenalty, new { size = 3 })
        minutes late at no penalty, after which a penalty of @Html.TextBoxFor(model => model.Submission.PercentPenalty, new { size = 3 })
        percent per @Html.TextBoxFor(model => model.Submission.HoursLatePerPercentPenalty, new { size = 3 })
        hours late will be applied.<br />
        @Html.ValidationMessageFor(model => model.Submission.MinutesLateWithNoPenalty)
        @Html.ValidationMessageFor(model => model.Submission.PercentPenalty)
        @Html.ValidationMessageFor(model => model.Submission.HoursLatePerPercentPenalty)
    </p>
    
    
    <p>
        Assignments that are submitted more than @Html.TextBoxFor(model => model.Submission.HoursLateUntilZero, new { size = 3 })
        hours after the due date and time will receive an automatic 0.<br />
        @Html.ValidationMessageFor(model => model.Submission.HoursLateUntilZero)
    </p>
        <p>
            <input type="submit" value="Create Basic Assignment" id="submitButton"/>
        </p>
    
    }
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
}
@functions
{
    public string convertToMonthDayYearFormat(DateTime date)
    {
        return addLostZeros(date.Month.ToString(), 2, true) + "/" + addLostZeros(date.Day.ToString(), 2, true) + "/" + addLostZeros(date.Year.ToString(), 4, true);
    }

    public string convertTime(DateTime time)
    {
        string timeStr;
        bool isAM = true;
        string hr;
        string min;
        if (time.Hour > 12)
        {
            isAM = false;
            hr = (time.Hour - 12).ToString();
        }
        else
        {
            hr = time.Hour.ToString();
        }
        min = time.Minute.ToString();

        hr = addLostZeros(hr, 2, true);
        min = addLostZeros(min, 2, true);

        timeStr = hr + ":" + min;
        if (isAM)
        {
            timeStr += " AM";
        }
        else
        {
            timeStr += " PM";
        }
        return timeStr;
    }

    public string addLostZeros(string s, int desiredDigits, bool addToFront)
    {
        int i = desiredDigits - s.Count();
        while (i > 0)
        {
            if (addToFront)
            {
                s = s.Insert(0, "0");
            }
            else
            {
                s += "0";
            }
            i--;
        }
        return s;
    }
}
