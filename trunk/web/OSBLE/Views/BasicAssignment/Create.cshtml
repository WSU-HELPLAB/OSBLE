@model OSBLE.Models.ViewModels.BasicAssignmentViewModel
@using OSBLE.Models.Assignments.Activities
@using OSBLE.Models.AbstractCourses;
@using OSBLE.Models
@{
    ViewBag.Title = "Create Basic Assignment";
}
<h2>
    Create Basic Assignment @Helpers.CreateToolTip(ToolTips.BasicAssignmentTitle)
</h2>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/json2.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/osble.assignments.js")" type="text/javascript"></script>
<script type="text/javascript">

    var isTeamGenerationReady = false;

    $(function () {
        //set up event listeners 

        $('#ReleaseDate_Date').change(function () {
            updateReleaseDate();
        });

        $('#ReleaseDate_Time').change(function () {
            updateReleaseDate();
        });

        $('#DueDate_Date').change(function () {
            updateDueDate();
        });

        $('#DueDate_Time').change(function () {
            updateDueDate();
        });

        $('#Assignment_Name').change(function () {
            updateActivitiesName();
        });

        $('#UseRubric').change(function () {
            if ($(this).attr('checked')) {
                $('#edit_rubric_div').show('highlight');
            }
            else {
                $('#edit_rubric_div').hide('blind');
            }
        });


        $('#isTeam').change(function () {
            if ($(this).attr('checked')) {
                DisplayTeamOptions();
            }
            else {
                HideTeamOptions();
            }
        });

        $("input[name='team_generation_options']").change(function () {
            if ($("input[name='team_generation_options']:checked").val() == 'PreviousAssignment') {
                DisplayPreviousAssignment();
            }
            else if ($("input[name='team_generation_options']:checked").val() == 'RandomTeams') {
                DisplayRandomTeams();
            }
            else if ($("input[name='team_generation_options']:checked").val() == 'ManualTeams') {
                DisplayManualTeams();
            }
            else {
                throw "Unknown Radio Button Checked: team_generation_options"
            }
        });

        $('#total_teams').focus(function () {
            //Uncheck everything that is checked
            $("input[name='team_or_people']:checked").removeAttr('checked');
            //Check the first radio button with the name team_or_people aka the one associated with total teams
            $("input[name='team_or_people']:eq(0)").attr('checked', 'checked');
        });

        $('#people_per_team').focus(function () {
            //Uncheck everything that is checked
            $("input[name='team_or_people']:checked").removeAttr('checked');
            //Check the second radio button with the name team_or_people aka the one associated with people_per_team
            $("input[name='team_or_people']:eq(1)").attr('checked', 'checked');
        });

        //Create the Silverlight dialog box
        $('#team_generation_dialog').dialog({
            modal: true,
            autoOpen: false,
            resizable: false,
            draggable: false,
            width: 850,
            height: 650
        });

        //Create the Silverlight dialog box
        $('#rubric_dialog').dialog({
            modal: true,
            autoOpen: false,
            resizable: false,
            draggable: false,
            width: 850,
            height: 650
        });

        //set up default radio buttons

        //Uncheck everything that is checked
        $("input[name='team_generation_options']:checked").removeAttr('checked');
        //Check the first radio button with the name team_generation_options
        $("input[name='team_generation_options']:eq(0)").attr('checked', 'checked');

        //Uncheck everything that is checked
        $("input[name='team_or_people']:checked").removeAttr('checked');
        //Check the first radio button with the name team_or_people aka the one associated with total teams
        $("input[name='team_or_people']:eq(0)").attr('checked', 'checked');

        $('#isTeam').removeAttr('checked');

        //Call any needed functions (note events wont be called on this function so we got to call them manually

        DisplayPreviousAssignment();

        // Set up add to gradebook checkbox

        $('#add_to_gradebook').change(function () {
            if ($('#add_to_gradebook').attr('checked')) {
                $('#grading').show('blind');
                $('html,body').animate({
                    scrollTop: $("#grading").offset().top
                }, 2000);
            } else {
                $('#grading').hide('blind');
            }
        });

        UpdateGradeCategory();

        $('#grade_category').change(function () {
            UpdateGradeCategory();
        });



    });  // end init


    function UpdateGradeCategory() {
        $('#grade_category_label').html($('#grade_category').selectedTexts()[0]);
    }

    function updateActivitiesName() {
        $('#SubmissionName').val($('#Assignment_Name').val() + ' Submission');
        $('#StopName').val($('#Assignment_Name').val() + ' Stop');
    }


    // due date

    function updateDueDate() {
        $('#DueDate').val($('#DueDate_Date').val() + ' ' + $('#DueDate_Time').val());
    }


    // release date

    function updateReleaseDate() {
        $('#ReleaseDate').val($('#ReleaseDate_Date').val() + ' ' + $('#ReleaseDate_Time').val());
    }


    // teams

    function DisplayTeamOptions() {
        $('#Team_Options').show('blind');
    }
    function HideTeamOptions() {
        $('#Team_Options').hide('blind');
    }

    function OpenTeamGeneration() {
        $('#team_generation_dialog').dialog('open'); return false;
    }
    function CloseTeamGenerationWindow() {
        $('#team_generation_dialog').dialog('close'); return false;
    }

    function DisplayManualTeams() {
        $('#RandomTeams').hide();
        $('#PreviousAssignmentDiv').hide();
        $('#ManualTeams').show('blind');
    }
    function DisplayRandomTeams() {
        $('#PreviousAssignmentDiv').hide();
        $('#ManualTeams').hide();
        $('#RandomTeams').show('blind');
    }
    function DisplayPreviousAssignment() {
        $('#RandomTeams').hide();
        $('#ManualTeams').hide();
        $('#PreviousAssignmentDiv').show('blind');
    }

    function OpenPreviousTeam() {
        OpenTeamGeneration();
        if (isTeamGenerationReady) {
            var jsonData = $('#SerializedTeamMembersJSON').val();
            document.getElementById("team_creation_silverlight").Content.MainPage.SetAvailableTeamMembers(jsonData);
        }
    }

    function GenerateTeamsRandomly() {
        if ($("input[name='team_or_people']:checked").val() == 'Teams') {
            var teams = parseInt($('#total_teams').val());
            if (isNaN(teams) || teams == 0) {
                alert('Specify number of total teams, must be a number');
            }
            else {
                OpenTeamGeneration();
                if (isTeamGenerationReady) {
                    document.getElementById("team_creation_silverlight").Content.MainPage.GenerateTeamsFromNumberOfTeams(parseInt($('#total_teams').val()));
                }
            }
        }
        else {
            var teams = parseInt($('#people_per_team').val());
            if (isNaN(teams) || teams == 0) {
                alert('Specify number of people per team, must be a number');
            }
            else {
                OpenTeamGeneration();
                if (isTeamGenerationReady) {
                    document.getElementById("team_creation_silverlight").Content.MainPage.GenerateTeamsFromNumberOfPeople(parseInt($('#people_per_team').val()));
                }
            }
        }
    }

    function TeamGenerationReady() {

        isTeamGenerationReady = true;
        if ($("input[name='team_generation_options']:checked").val() == 'RandomTeams') {
            if ($("input[name='team_or_people']:checked").val() == 'Teams') {
                document.getElementById("team_creation_silverlight").Content.MainPage.GenerateTeamsFromNumberOfTeams(parseInt($('#total_teams').val()));
            }
            else {
                document.getElementById("team_creation_silverlight").Content.MainPage.GenerateTeamsFromNumberOfPeople(parseInt($('#people_per_team').val()));
            }
        }
        else if ($("input[name='team_generation_options']:checked").val() == 'PreviousAssignment') {
            var jsonData = $('#SerializedTeamMembersJSON').val();
            document.getElementById("team_creation_silverlight").Content.MainPage.SetAvailableTeamMembers(jsonData);
        }
    }


    // rubric
    function OpenRubricDialog() {
        $('#rubric_dialog').dialog('open'); return false;
    }

    function CloseRubric() {
        $('#rubric_dialog').dialog('close');
        $.ajax({
            type: "POST",
            url: "/BasicAssignment/GetRubrics",
            data: "",
            success: function (msg) {
                $('#RubricSelect').html(msg);
            }
        });
        return false;
    }

</script>
@{
    
    
    SubmissionActivity submission = Model.Submission;
    StopActivity stop = Model.Stop;
    submission.isTeam = false;

    Html.ValidationSummary();
    using (Html.BeginForm())
    {

        Html.ValidationSummary(true);

    @Html.Hidden("newTeams", "", new { id = "newTeams" })
    @Html.HiddenFor(model => submission.ReleaseDate, new { @id = "ReleaseDate" })
    @Html.HiddenFor(model => stop.ReleaseDate, new { @id = "DueDate" })
    @Html.HiddenFor(model => submission.Name, new { @id = "SubmissionName" })
    @Html.HiddenFor(model => stop.Name, new { @id = "StopName" })
        
    <div class="editor-label">
        @Html.LabelFor(model => model.Assignment.Name)
    </div>
    <div class="editor-field">
        @Html.EditorFor(model => model.Assignment.Name)
        @Html.ValidationMessageFor(model => model.Assignment.Name)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.Assignment.Description)
    </div>
    <div class="editor-field">
        @Html.TextAreaFor(model => model.Assignment.Description, new { rows = 5, cols = 65 })
        @Html.ValidationMessageFor(model => model.Assignment.Description)
    </div>
        
    <div class="editor-label">
        @Html.LabelFor(model => submission.ReleaseDate)
        @Helpers.CreateToolTip(ToolTips.BasicAssignmentReleaseDate)
    </div>
    <div class="editor-label">
        @Html.TextBox("ReleaseDate_Date", convertToMonthDayYearFormat(submission.ReleaseDate), new { @id = "ReleaseDate_Date", @class = "date_picker", size = 9 })
        @Html.TextBox("ReleaseDate_Time", convertTime(submission.ReleaseDate), new { @id = "ReleaseDate_Time", @class = "time_picker", size = 9 })
    </div>
    <!--Stop date-->
    <div class="editor-label">
        @Html.Label("Due Date")
        @Helpers.CreateToolTip(ToolTips.BasicAssignmentDueDate)
    </div>
    <div class="editor-label">
        @Html.TextBox("DueDate_Date", convertToMonthDayYearFormat(stop.ReleaseDate), new { @id = "DueDate_Date", @class = "date_picker", size = 9 })
        @Html.TextBox("DueDate_Time", convertTime(stop.ReleaseDate), new { @id = "DueDate_Time", @class = "time_picker", size = 9 })
    </div>

    <div class="editor-label">
        @Html.CheckBoxFor(model => submission.isTeam, new { id = "isTeam" }) @Html.LabelFor(model => submission.isTeam)
    </div>
    <div id="Team_Options" class="indented_options" style="display: none">
        <input type="radio" name="team_generation_options" value="PreviousAssignment" />
        Use teams defined in previous course assignment
        <br />
        <ul id="PreviousAssignmentDiv" style="display: none" class="team_generation_options">
            <li>
                @Html.DropDownListFor(m => m.SerializedTeamMembersJSON, ViewBag.PastTeamAssignments as SelectList)
            </li>
            <br />
            <li>
                <button type="button" onclick="OpenPreviousTeam()">
                    View Teams</button>
            </li>
        </ul>
        <input type="radio" name="team_generation_options" value="RandomTeams" />
        Generate teams randomly
        <br />
        <ul id="RandomTeams" style="display: none" class="team_generation_options">
            <li>
                <input type="radio" name="team_or_people" value="Teams" />
                Specify the number of total teams
                <input type="text" id="total_teams" size="3" />
            </li>
            <br />
            <li>
                <input type="radio" name="team_or_people" value="People" />
                Specify the number of people per team
                <input type="text" id="people_per_team" size="3" />
            </li>
            <br />
            <li>
                <button type="button" onclick="GenerateTeamsRandomly()">
                    Generate Teams...
                </button>
            </li>
        </ul>
        <input type="radio" name="team_generation_options" value="ManualTeams" />
        Specify teams manually
        <ul id="ManualTeams" style="display: none" class="team_generation_options">
            <li>
                <button type="button" onclick="OpenTeamGeneration()">
                    Create Teams...
                </button>
            </li>
        </ul>
        <!-- in the future generate teams with mixed ability and Generate teams with same-ability will need to go here -->
    </div>
    
    <div class="editor-label">
        @Html.CheckBoxFor(model => submission.InstructorCanReview, new { id = "InstructorCanReview" }) @Html.LabelFor(model => submission.InstructorCanReview)
    </div>
    <div id="line_review_config" class="indented_options" style="display: none;">
        <input type="radio" name="line_review_options" value="ManualConfig" />Create New Categories<br />
        <div id="manual_config_options" class="indented_options" style="display: none;" >
            <p>Category Configuration Name:<input id="category_config_name" name="category_config_name" type="text" /> </p>
            <p>
                <a href="#" id="add_new_category" title="Add New Category" style="text-decoration:none;">
                    <img src="@Url.Content("~/Content/images/add_up.png")" alt="Add New Category" /> Add a Category
                </a>
            </p>
            <div id="category_data"></div>
            <br style="clear: both;" />
        </div>
        <input type="radio" name="line_review_options" value="AutoConfig" />Use Previous Configuration <br />
        <div id="auto_config_options" class="indented_options" style="display: none;" >
            <br /> Select a configuration <br />
            <select id="comment_category_selection" name="comment_category_selection"> 
                @foreach (CommentCategoryConfiguration c in ViewBag.CommentCategories)
                {
                    <option value="@c.ID" >@c.Name</option>
                }
            </select>
        </div>
        <br />
    </div>

    <div class="editor-label">
        @Html.EditorFor(m => Model.UseRubric) @Html.LabelFor(m => Model.UseRubric)
        @Helpers.CreateToolTip(ToolTips.BasicAssignmentUseRubric)
    </div>
    <div id="edit_rubric_div" style="display: none">
        <ul id="rubic_ul" class="team_generation_options">
            <li id="RubricSelect">
                @Html.Partial("_RubricSelect")
            </li>
            <li>
                <button type="button" onclick="OpenRubricDialog()" value="Create Rubric">
                    Create Rubric
                </button>
            </li>
        </ul>
    </div>

    <h3>
        Deliverables @Helpers.CreateToolTip(ToolTips.BasicAssignmentDeliverables)
    </h3>
   
    <!--
    <table id="deliverables_table">
        <tr>
            <td>
                <table>
                    <tr>
                        <td> File&nbsp;Name </td>
                        <td> <input type="text" id="new_deliverable_name" /> </td>
                    </tr>
                    <tr>
                        <td> Type </td>
                        <td>
                            <select id="new_deliverable_type">
                                @foreach (SelectListItem dt in ViewBag.DeliverableTypes)
                                {
                                    <option value="@dt.Value">@dt.Text</option>
                                }
                            </select>
                        </td>
                    </tr>
                </table>
            </td>
            <td>
                <div>
                    <a href="#" id="add_new_category" title="Add New Category" style="text-decoration:none;">
                        <img src="@Url.Content("~/Content/images/add_up.png")" alt="Add New Category" /> Add a Category
                    </a>
                </div>
                <div id="category_data"></div>
            </td>
            
        </tr>
    </table>        <tr id="_options" style="display: none;">
            <td> Line Review <br />&nbsp;&nbsp;&nbsp;Configuration </td>
            <td class="indented_options">
                <select id="comment_category_selection">
                    <!-
                    <option value="null">[None Selected]</option>
                    <option value="2">Aaaaaaaaaa</option>
                    <option value="5">Bbbbbbbbbb</option>
                    <option value="6">Cccccccccc</option> ->
                </select>
                <div id="saved_config_display">
                    <!-<table>
                        <tr>
                            <td>Severity</td>
                            <td>
                                <select>
                                    <option value="a">1</option>
                                    <option value="b">2</option>
                                    <option value="c">3</option>
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td>Scope</td>
                            <td>
                                <select>
                                    <option value="a">1</option>
                                    <option value="b">2</option>
                                    <option value="c">3</option>
                                </select>
                            </td>
                        </tr>
                    </table> ->
                </div>
            </td>
        </tr>
-->
    
    <table id="deliverables_table" cellspacing="6px">
        <tr>
            <td>
                File&nbsp;Name
            </td>
            <td>
                <input type="text" id="new_deliverable_name" />
            </td>
        </tr>
        <tr>
            <td>
                Type
            </td>
            <td>
                <select id="new_deliverable_type">
                    @foreach (SelectListItem dt in ViewBag.DeliverableTypes)
                    {
                        <option value="@dt.Value">@dt.Text</option>
                    }
                </select>
            </td>
        </tr>
    </table>
    <div>
        <a href="#" id="add_new_deliverable" title="Add New Deliverable" style="text-decoration: none;">
            <img src="@Url.Content("~/Content/images/add_up.png")" alt="Add New Deliverable" />
            Save Deliverable </a>
    </div>
    
    <div id="deliverable_data">
    </div>
    
    <div id="deliverables_after">
    </div>

    <script type="text/javascript">
        $(function () {
            @foreach (Deliverable d in Model.Assignment.Deliverables)
            {
                <text>
                addNewDeliverable({ name: '@d.Name', fileType: @d.Type });
                </text>
            }
        });       
    </script>
    
    <h3>Grading</h3>
    
        <div class="editor-label">
        @Html.CheckBoxFor(model => model.isGradable, new { id = "add_to_gradebook" }) @Html.Label("Will This Assignment Be Graded?")@Helpers.CreateToolTip(ToolTips.BasicAssignmentAddToGradebook)
        </div>
    <div id='grading'>    
        <div class="editor-label">
            @Html.LabelFor(model => model.Assignment.Category, "Category")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Assignment.CategoryID, ViewBag.Categories as SelectList, new { id = "grade_category" })
            @Html.ValidationMessageFor(model => model.Assignment.Category)
        </div>
        <div id="grade_options" class="indented_options">
            <div class="editor-field">
                Worth
                @Html.TextBoxFor(model => model.Assignment.PointsPossible, new { id = "points_possible", size = 3 })
                Points for the entire Assignment in Category <span id="grade_category_label"></span>
                @Html.ValidationMessageFor(model => model.Assignment.PointsPossible)
            </div>
            <div class="editor-field">
                Worth
                @Html.TextBoxFor(model => model.Submission.PointsPossible, new { id = "submission_points_possible", size = 3 })
                Points For Submission Activity <span id="grade_category_label"></span>
                @Html.ValidationMessageFor(model => model.Submission.PointsPossible)
            </div>
            <h3>
                Late Policy @Helpers.CreateToolTip(ToolTips.BasicAssignmentLatePolicy)
            </h3>
            <p>
                Students may submit assignments up to @Html.TextBoxFor(model => model.Submission.MinutesLateWithNoPenalty, new { size = 3 })
                minutes late at no penalty, after which a penalty of @Html.TextBoxFor(model => model.Submission.PercentPenalty, new { size = 3 })
                percent per @Html.TextBoxFor(model => model.Submission.HoursLatePerPercentPenalty, new { size = 3 })
                hours late will be applied.<br />
                @Html.ValidationMessageFor(model => model.Submission.MinutesLateWithNoPenalty)
                @Html.ValidationMessageFor(model => model.Submission.PercentPenalty)
                @Html.ValidationMessageFor(model => model.Submission.HoursLatePerPercentPenalty)
            </p>
            <p>
                Assignments that are submitted more than @Html.TextBoxFor(model => model.Submission.HoursLateUntilZero, new { size = 3 })
                hours after the due date and time will receive an automatic 0.<br />
                @Html.ValidationMessageFor(model => model.Submission.HoursLateUntilZero)
            </p>
        </div>
    </div>
    <p>
        @Html.HiddenFor(model => model.Assignment.IsDraft, new { id = "is_draft" })
        <input type="submit" value="Create Basic Assignment" /> <input type="submit" value="Save as Draft" id="save_draft" />@Helpers.CreateToolTip(ToolTips.BasicAssignmentIsDraft)
        <script type="text/javascript">
            $(function () {
                $('#save_draft').click(function () {
                    alert('This assignment will be saved as a draft and will not be released even if the release date passes');
                    $('#is_draft').val('True');
                });
            });
        </script>
    </p>
    
    }
    <p>
        @Html.ActionLink("Back to List", "Index", "Home")
    </p>
}
<div id="team_generation_dialog" title="Edit Teams">
    @Html.DisplayFor(m => m.TeamCreation)
</div>
<div id="rubric_dialog" title="Edit Rubric">
    @Html.DisplayFor(m => m.RubricCreation)
</div>
@functions
{
    public string convertToMonthDayYearFormat(DateTime date)
    {
        return addLostZeros(date.Month.ToString(), 2, true) + "/" + addLostZeros(date.Day.ToString(), 2, true) + "/" + addLostZeros(date.Year.ToString(), 4, true);
    }

    public string convertTime(DateTime time)
    {
        string timeStr;
        bool isAM = true;
        string hr;
        string min;
        if (time.Hour > 12)
        {
            isAM = false;
            hr = (time.Hour - 12).ToString();
        }
        else
        {
            hr = time.Hour.ToString();
        }
        min = time.Minute.ToString();

        hr = addLostZeros(hr, 2, true);
        min = addLostZeros(min, 2, true);

        timeStr = hr + ":" + min;
        if (isAM)
        {
            timeStr += " AM";
        }
        else
        {
            timeStr += " PM";
        }
        return timeStr;
    }

    public string addLostZeros(string s, int desiredDigits, bool addToFront)
    {
        int i = desiredDigits - s.Count();
        while (i > 0)
        {
            if (addToFront)
            {
                s = s.Insert(0, "0");
            }
            else
            {
                s += "0";
            }
            i--;
        }
        return s;
    }
}
