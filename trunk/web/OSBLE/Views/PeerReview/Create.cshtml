@model OSBLE.Models.Assignments.Activities.PeerReviewActivity
@using OSBLE.Models.Assignments.Activities
@using OSBLE.Models
@{
    ViewBag.Title = "Create Peer Review";
}
<h2>Create Peer Review</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/osble.assignments.js")" type="text/javascript"></script>

<script type="text/javascript">

    $(function () {

        $('#CanStudentAccessReviews').change(function () {
            if ($(this).attr('checked')) {

                DisplayCanStudentAccessReviewsOptions();
            }
            else {

                HideCanStudentAccessReviewsOptions();
            }
        });

        $('#CanReviewerViewOthersReviews').change(function () {
            if ($(this).attr('checked')) {

                DisplayCanReviewerViewOthersReviewsOptions();
            }
            else {

                HideCanReviewerViewOthersReviewsOptions();
            }
        });

        $('#UseRubric').change(function () {
            if ($(this).attr('checked')) {
                DisplayUseRubricOptions();
            }
            else {
                HideUseRubricOptions();
            }
        });
        // only all reviews or random reviews can be checked
        $('#InstructorCompletesRubricAllReviews').change(function () {
            if ($(this).attr('checked')) {
                $('#InstructorCompletesRubricRandomReview').removeAttr('checked');
            }
            else {
                $('#InstructorCompletesRubricRandomReview').attr('checked', true);
            }
        });
        // only all reviews or random reviews can be checked
        $('#InstructorCompletesRubricRandomReview').change(function () {
            if ($(this).attr('checked')) {

                $('#InstructorCompletesRubricAllReviews').removeAttr('checked');
            }
            else {

                $('#InstructorCompletesRubricAllReviews').attr('checked', true);
            }
        });

        $('#add_to_gradebook').change(function () {
            if ($('#add_to_gradebook').attr('checked')) {
                $('#grade_options').show('blind');
            } else {
                $('#grade_options').hide();
            }
        });
    });

    function DisplayCanStudentAccessReviewsOptions() {
        $('#CanStudentAccessReviews_options').show('highlight');
        // default
        $('#HasStudentCompletedAssignedReviews').attr('checked', true);
    }

    function HideCanStudentAccessReviewsOptions() {
        $('#CanStudentAccessReviews_options').hide('highlight');
        // unchecking default box
        $('#HasStudentCompletedAssignedReviews').removeAttr('checked');
    }

    function DisplayCanReviewerViewOthersReviewsOptions() {
        $('#CanReviewerAccessReviews_options').show('highlight');
        // default
        $('#HasReviewerCompletedAssignedReviews').attr('checked', true);
    }

    function HideCanReviewerViewOthersReviewsOptions() {
        $('#CanReviewerAccessReviews_options').hide('highlight');
        $('#HasReviewerCompletedAssignedReviews').removeAttr('checked');
    }

    function DisplayUseRubricOptions() {
        $('#UseRubric_options').show('highlight');
        //default
        $('#InstructorCompletesRubricRandomReview').attr('checked', true);
    }

    function HideUseRubricOptions() {
        $('#UseRubric_options').hide('highlight');
        // unchecking the children boxes
        $('#InstructorCompletesRubricRandomReview').removeAttr('checked');
        $('#InstructorCompletesRubricAllReviews').removeAttr('checked');
    }

</script>

@{
   
    using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)
        <fieldset>
            <legend>PeerReviewActivity</legend>

            <div class="editor-label">
                @Html.LabelFor(model => model.Name)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>
            
            <div class="editor-label">
                @Html.LabelFor(model => model.AbstractAssignmentID, "AbstractAssignment")
            </div>
            <div class="editor-field">
                @Html.DropDownList("AbstractAssignmentID", String.Empty)
                @Html.ValidationMessageFor(model => model.AbstractAssignmentID)
            </div>

            <h2>Settings</h2>

            <div class="editor-label">
                @Html.LabelFor(model => model.UseOnlySubmittedStudents)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.UseOnlySubmittedStudents, new { id = "UseOnlySubmittedStudent" })
                @Html.ValidationMessageFor(model => model.UseOnlySubmittedStudents)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.UseModerators)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.UseModerators, new { id = "UseModerators" })
                @Html.ValidationMessageFor(model => model.UseModerators)
            </div>

            <h3>Anonymity of Review</h3>

            <div class="editor-label">
                @Html.LabelFor(model => model.IsAuthorAnonymous)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.IsAuthorAnonymous, new { id = "IsAuthorAnonymous" })
                @Html.ValidationMessageFor(model => model.IsAuthorAnonymous)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.IsReviewersAnonymous)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.IsReviewersAnonymous, new { id = "IsReviewerAnonymous" })
                @Html.ValidationMessageFor(model => model.IsReviewersAnonymous)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.IsReviewersRoleAnonymous)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.IsReviewersRoleAnonymous, new { id = "IsReviewersRoleAnonymous" })
                @Html.ValidationMessageFor(model => model.IsReviewersRoleAnonymous)
            </div>

            <h3>Basis of Review</h3>

            <div class="editor-label">
                @Html.LabelFor(model => model.UseInlineComments)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.UseInlineComments, new { id = "UseInlineComments" })
                @Html.ValidationMessageFor(model => model.UseInlineComments)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.UseRubric)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.UseRubric, new { id = "UseRubric" })
                @Html.ValidationMessageFor(model => model.UseRubric)
            </div>
            <div id="UseRubric_options" class="indented_options" style="display: none">
                      
                 <div class="editor-label">
                    @Html.LabelFor(model => model.InstructorCompletesRubricRandomReview)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.InstructorCompletesRubricRandomReview, new { id = "InstructorCompletesRubricRandomReview" })
                    @Html.ValidationMessageFor(model => model.InstructorCompletesRubricRandomReview)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.InstructorCompletesRubricAllReviews)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.InstructorCompletesRubricAllReviews, new { id = "InstructorCompletesRubricAllReviews" })
                    @Html.ValidationMessageFor(model => model.InstructorCompletesRubricAllReviews)
                </div>
            </div>

            <h3>Author access to completed reviews</h3>

            <div class="editor-label">
                @Html.LabelFor(model => model.CanStudentAccessReviews)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.CanStudentAccessReviews, new { id = "CanStudentAccessReviews" })
                @Html.ValidationMessageFor(model => model.CanStudentAccessReviews)
            </div>
            <div id="CanStudentAccessReviews_options"  class="indented_options" style="display: none">
                <div class="editor-label">
                    @Html.LabelFor(model => model.HasStudentCompletedAssignedReviews)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.HasStudentCompletedAssignedReviews, new { id = "HasStudentCompletedAssignedReviews" })
                    @Html.ValidationMessageFor(model => model.HasStudentCompletedAssignedReviews)
                </div>
            </div>

            <h3>Reviewer access to completed reviews of other reviewers</h3>

            <div class="editor-label">
                @Html.LabelFor(model => model.CanReviewerViewOthersReviews)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.CanReviewerViewOthersReviews, new { id = "CanReviewerViewOthersReviews" })
                @Html.ValidationMessageFor(model => model.CanReviewerViewOthersReviews)
            </div>
            <div id="CanReviewerAccessReviews_options"  class="indented_options" style="display: none">
                <div class="editor-label">
                    @Html.LabelFor(model => model.HasReviewerCompletedAssignedReviews)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.HasReviewerCompletedAssignedReviews, new { id = "HasReviewerCompletedAssignedReviews" })
                    @Html.ValidationMessageFor(model => model.HasReviewerCompletedAssignedReviews)
                </div>
            </div>

            <div class="editor-label">
                Add to Gradebook
            </div>
            <div class="editor-field">
                <input type="checkbox" id="add_to_gradebook" checked="checked" />
            </div>
            <div id="grade_options" class="indented_options">
                <div class="editor-field">
                    Worth
                    @Html.TextBoxFor(model => model.PointsPossible, new { id = "points_possible", size = 3 })
                    Points in Category <span id="grade_category_label"></span>

                    @Html.ValidationMessageFor(model => model.PointsPossible)
                </div>
        

                <h3>Late Policy</h3>
    
                <p>
                    Students may submit assignments up to @Html.TextBoxFor(model => model.MinutesLateWithNoPenalty, new { size = 3 })
                    minutes late at no penalty, after which a penalty of @Html.TextBoxFor(model => model.PercentPenalty, new { size = 3 })
                    percent per @Html.TextBoxFor(model => model.HoursLatePerPercentPenalty, new { size = 3 })
                    hours late will be applied.<br />
                    @Html.ValidationMessageFor(model => model.MinutesLateWithNoPenalty)
                    @Html.ValidationMessageFor(model => model.PercentPenalty)
                    @Html.ValidationMessageFor(model => model.HoursLatePerPercentPenalty)
                </p>
    
    
                <p>
                    Assignments that are submitted more than @Html.TextBoxFor(model => model.HoursLateUntilZero, new { size = 3 })
                    hours after the due date and time will receive an automatic 0.<br />
                    @Html.ValidationMessageFor(model => model.HoursLateUntilZero)
                </p>

            </div>

            <p>
                <input type="submit" value="Create Peer Review" id="submitButton"/>
            </p>
        </fieldset>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
}

