@model OSBLE.Models.Assignments.Activities.PeerReviewActivity
@using OSBLE.Models.Assignments.Activities
@using OSBLE.Models
@{
    ViewBag.Title = "Create Peer Review";
}
<h2>Create Peer Review</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/osble.assignments.js")" type="text/javascript"></script>

<script type="text/javascript">
    $('#CanStudentAccessReviews').change(function () {
        if ($(this).attr('checked')) {

            DisplayCanStudentAccessReviewsOptions();
        }
        else {

            HideCanStudentAccessReviewsOptions();
        }
    });

    $('#UseRubric').change(function () {
        if ($(this).attr('checked')) {

            DisplayUseRubricOptions();
        }
        else {

            HideUseRubricOptions();
        }
    });

    function DisplayCanStudentAccessReviewsOptions() {
        $('#CanStudentAccessReviews_options').show('highlight');
    }

    function HideCanStudentAccessReviewsOptions() {
        $('#CanStudentAccessReviews_options').hide('highlight');
    }
    function DisplayCanStudentAccessReviewsOptions() {
        $('#UseRubric_options').show('highlight');
    }

    function HideCanStudentAccessReviewsOptions() {
        $('#UseRubric_options').hide('highlight');
    }

</script>

@{
   

    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)
        <fieldset>
            <legend>PeerReviewActivity</legend>

            <div class="editor-label">
                @Html.LabelFor(model => model.Name)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.ReleaseDate)
            </div>
            <div class="editor-label">
                @Html.TextBox("ReleaseDate_Date", convertToMonthDayYearFormat(Model.ReleaseDate), new { @id = "ReleaseDate_Date", @class = "date_picker", size = 9 })
                @Html.TextBox("ReleaseDate_Time", convertTime(Model.ReleaseDate), new { @id = "ReleaseDate_Time", @class = "time_picker", size = 9 })
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.AbstractAssignmentID, "AbstractAssignment")
            </div>
            <div class="editor-field">
                @Html.DropDownList("AbstractAssignmentID", String.Empty)
                @Html.ValidationMessageFor(model => model.AbstractAssignmentID)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.UseOnlySubmittedStudents)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.UseOnlySubmittedStudents, new { id = "UseOnlySubmittedStudent" })
                @Html.ValidationMessageFor(model => model.UseOnlySubmittedStudents)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.UseModerators)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.UseModerators, new { id = "UseModerators" })
                @Html.ValidationMessageFor(model => model.UseModerators)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.IsAuthorAnonymous)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.IsAuthorAnonymous, new { id = "IsAuthorAnonymous" })
                @Html.ValidationMessageFor(model => model.IsAuthorAnonymous)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.IsReviewersAnonymous)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.IsReviewersAnonymous, new { id = "IsReviewerAnonymous" })
                @Html.ValidationMessageFor(model => model.IsReviewersAnonymous)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.IsReviewersRoleAnonymous)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.IsReviewersRoleAnonymous, new { id = "IsReviewersRoleAnonymous" })
                @Html.ValidationMessageFor(model => model.IsReviewersRoleAnonymous)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.UseInlineComments)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.UseInlineComments, new { id = "UseInlineComments" })
                @Html.ValidationMessageFor(model => model.UseInlineComments)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.UseRubric)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.UseRubric, new { id = "UseRubric" })
                @Html.ValidationMessageFor(model => model.UseRubric)
            </div>
            <div id="UseRubric_options" class="indented_options" style="display: none">
                 <div class="editor-label">
                    @Html.LabelFor(model => model.InstructorCompletesRubricRandomReview)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.InstructorCompletesRubricRandomReview, new { id = "InstructorCompletesRubricRandomReview" })
                    @Html.ValidationMessageFor(model => model.InstructorCompletesRubricRandomReview)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.InstructorCompletesRubricAllReviews)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.InstructorCompletesRubricAllReviews, new { id = "InstructorCompletesRubricAllReviews" })
                    @Html.ValidationMessageFor(model => model.InstructorCompletesRubricAllReviews)
                </div>
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.CanStudentAccessReviews)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.CanStudentAccessReviews, new { id = "CanStudentAccessReviews" })
                @Html.ValidationMessageFor(model => model.CanStudentAccessReviews)
            </div>
            <div id="CanStudentAccessReviews_options"  class="indented_options" style="display: none">
                <div class="editor-label">
                    @Html.LabelFor(model => model.HasStudentCompletedAssignedReviews)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.HasStudentCompletedAssignedReviews, new { id = "HasStudentCompletedAssignedReviews" })
                    @Html.ValidationMessageFor(model => model.HasStudentCompletedAssignedReviews)
                </div>
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.CanReviewerViewOthersReviews)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.CanReviewerViewOthersReviews, new { id = "CanReviewerViewOthersReviews" })
                @Html.ValidationMessageFor(model => model.CanReviewerViewOthersReviews)
            </div>

           

            <div class="editor-label">
                @Html.LabelFor(model => model.MinutesLateWithNoPenalty)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.MinutesLateWithNoPenalty)
                @Html.ValidationMessageFor(model => model.MinutesLateWithNoPenalty)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.PercentPenalty)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.PercentPenalty)
                @Html.ValidationMessageFor(model => model.PercentPenalty)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HoursLatePerPercentPenalty)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HoursLatePerPercentPenalty)
                @Html.ValidationMessageFor(model => model.HoursLatePerPercentPenalty)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.HoursLateUntilZero)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.HoursLateUntilZero)
                @Html.ValidationMessageFor(model => model.HoursLateUntilZero)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.PointsPossible)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.PointsPossible)
                @Html.ValidationMessageFor(model => model.PointsPossible)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.ColumnOrder)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ColumnOrder)
                @Html.ValidationMessageFor(model => model.ColumnOrder)
            </div>

            <p>
                <input type="submit" value="Create Peer Review" id="submitButton"/>
            </p>
        </fieldset>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
}

@functions
{
    public string convertToMonthDayYearFormat(DateTime date)
    {
        return addLostZeros(date.Month.ToString(), 2, true) + "/" + addLostZeros(date.Day.ToString(), 2, true) + "/" + addLostZeros(date.Year.ToString(), 4, true);
    }

    public string convertTime(DateTime time)
    {
        string timeStr;
        bool isAM = true;
        string hr;
        string min;
        if (time.Hour > 12)
        {
            isAM = false;
            hr = (time.Hour - 12).ToString();
        }
        else
        {
            hr = time.Hour.ToString();
        }
        min = time.Minute.ToString();

        hr = addLostZeros(hr, 2, true);
        min = addLostZeros(min, 2, true);

        timeStr = hr + ":" + min;
        if (isAM)
        {
            timeStr += " AM";
        }
        else
        {
            timeStr += " PM";
        }
        return timeStr;
    }

    public string addLostZeros(string s, int desiredDigits, bool addToFront)
    {
        int i = desiredDigits - s.Count();
        while (i > 0)
        {
            if (addToFront)
            {
                s = s.Insert(0, "0");
            }
            else
            {
                s += "0";
            }
            i--;
        }
        return s;
    }
}