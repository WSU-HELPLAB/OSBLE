@using OSBLE.Controllers;
@using OSBLE.Models.Courses;
@using OSBLE.Models.Assignments;
@using OSBLE.Models.Assignments.Activities.Scores;
@{
    ViewBag.Title = "Index";
}
<style type="text/css">
    .cellInput
    {
        width: 75px;
        border: none;
    }
    .gradebook
    {
        width: auto;
        border-collapse: collapse;
        border: 1px solid gray;
    }
    
    .gradebook td
    {
        padding: 3px;
        width: auto;
        height: 25px;
    }
    
    .gradebook td, .gradebook th, .gradebook tr
    {
        width: auto;
        border: 1px solid gray;
    }
    
    .gradebook th
    {
        text-align: left;
    }
    
    .header
    {
        float: left;
        left: 50%;
    }
    
    .thButton
    {
        float: right;
    }
    
    .menu
    {
        border: 1px solid gray;
    }
    
    .slidingDiv
    {
        width: 107px;
        height: 100px;
        background-color: white;
        top: 33px;
        left: 400px;
    }
    
    .dropdown
    {
        float: right;
    }
    
    #letterGrades
    {
        border: 1px solid;
        width:300px;
        height:500px;
    }
    
    #tabHeader ul
    {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    #tabHeader li a
    {
        padding: 0 1em;
    }
    
    #tableContent
    {
        clear: both;
    }
    
    #h3
    {
        margin: 0;
        padding: 0 0 1em 0;
    }
    
    #tabHeader li
    {
        float: left;
        border: 1px solid;
        background-color: #f5f5f5;
        border-bottom-width: 0;
        margin: 0 0.5em 0 0;
        background: silver;
    }
    
    #tabHeader #selected
    {
        position: relative;
        top:1px;
        border-bottom:1px solid #fff;
        background: white;
    }
    
    #newWeight 
    {
        width:500px;
        height:500px;
        border: 2px solid;
        background: #f5f5f5;
    }
    
    #newWeight li
    {
        float: left;
    }
    
    .letterGrades
	{
	    top: 30%;
	    left: 40%;
	    display: inline;
        background-color: #f5f5f5;
	}
	
	.letterGradesTable
	{
	    border-collapse: collapse;
        border: 1px solid gray;
	}
	
	.letterGradesTable th
	{
	    background-color: #074974;
	    color: White;
	}
	
	.letterGradesTable td
	{
	    padding: 3px;
	}
	
	.letterGradesTable td, .letterGradesTable th, .letterGradesTable tr
    {
        width: auto;
        border: 1px solid gray;
    }
	
	
	
</style>

<h3>Gradebook</h3>

@Html.Partial("_Tabs")

<div class="letterGrades" id="letterGradesID" style="display: none; position: absolute;">
    <table class="letterGradesTable">
        <tr>
            <th>Letter Grade</th>
            <th>Minimum % Required</th>
        </tr>
		<tr>
			<td>A</td>
			<td onclick="cellGainsFocus(this);">93</td>
		</tr>
		<tr>
			<td>A-</td>
			<td onclick="cellGainsFocus(this);">90</td>
		</tr>
		<tr>
			<td>B+</td>
			<td onclick="cellGainsFocus(this);">87</td>
		</tr>
		<tr>
			<td>B</td>
			<td onclick="cellGainsFocus(this);">83</td>
		</tr>
		<tr>
			<td>B-</td>
			<td onclick="cellGainsFocus(this);">80</td>
		</tr>
		<tr>
			<td>C+</td>
			<td onclick="cellGainsFocus(this);">77</td>
		</tr>
		<tr>
			<td>C</td>
			<td onclick="cellGainsFocus(this);">73</td>
		</tr>
		<tr>
			<td>C-</td>
			<td onclick="cellGainsFocus(this);">70</td>
		</tr>
		<tr>
			<td>D+</td>
			<td onclick="cellGainsFocus(this);">67</td>
		</tr>
		<tr>
			<td>D</td>
			<td onclick="cellGainsFocus(this);">63</td>
		</tr>
		<tr>
			<td>F</td>
			<td onclick="cellGainsFocus(this);">0</td>
		</tr>
	</table>
</div>

<div id="tableContent">
    <table id="grades" class="gradebook">
        <tr class="colHeader">
            <th></th>
            <th>Weights [+]</th>
            @{var j = 3;
                <td id="@j" class="colHeader" style="border:outset; background:silver;" onclick="selectColumn(this);"></td>
                j += 1;
                <td id="@j" class="colHeader" style="border:outset; background:silver;" onclick="selectColumn(this);"></td>
                j += 1;
                foreach (Category item in ViewBag.Categories)
                {
                    <td id="@j" class="colHeader" style="border:outset; background:silver;"onclick="selectColumn(this);"></td>
                    j += 1;
                }
            }
            
        </tr>
        <tr id="weights">
            <td id="sectionHolder"></td>
            <td id="catScheme" onclick="cellGainsFocus(this);">&nbsp  Weight1</td>
            <td id="grade"></td>
            <td id="categoryTotal">&nbsp</td>
            
            @foreach (Category item in ViewBag.Categories)
            {
                <td id="weight-@item.ID" onclick="cellGainsFocus(this)">@item.Points</td>
            }

        </tr>
        <tr id="perfectScore">
            <th></th>
            <th id="th2">Perfect Score</th>
            <td>A</td>
            <td id="perfectTotal">100%</td>
            

            @foreach (Category item in ViewBag.Categories)
            {
                <td id="@item.ID">100%</td>   
            }

        </tr>
        <tr>
            <th></th>
            <th id="th3">
                Average Score
            </th>
            <td>&nbsp</td>
            <td id="averageTotal">0</td>
            
            @foreach (Category item in ViewBag.Categories)
            {
                <td id="averageScore">
                    0
                </td>  
            }
            
        </tr>
        <tr>
            <th>Section</th>
            <th id="th4">Name</th>
            <th ondblclick="displayLetterGrades();">Grade</th>
            <th id="th5">Total [Customize...]</th>
            
            @foreach (Category item in ViewBag.Categories)
            {
                <th id="@item.ID" onclick="changeAssignmentName(this);" ondblclick="alert('double clicked');">@item.Name<div id="cntnr" class="thButton"><button class="dropdown" id="@item.ID" onclick="ShowHide(this);"></button></div></th>
            }

        </tr>

        @{
            List<Category> cats = (from cat in ViewBag.Categories as IEnumerable<Category>
                                   select cat).ToList();
            
        }
        <!--loop through all users -->
        @foreach (OSBLE.Models.Users.UserProfile student in ViewBag.Students)
        {        
            <tr id="studentGrades">

            @{  
                    
                List<CoursesUsers> courseUser = (from course in ViewBag.CoursesUser as IEnumerable<CoursesUsers>
                                                 where course.UserProfileID == student.ID
                                                 select course).ToList();
                if (courseUser.Count() > 0)
                {
                    foreach (CoursesUsers item in courseUser)
                    {
                               <td>@item.Section</td>
                    }
                }                                                   
            }

                <td id="@student.ID" >@student.LastName, @student.FirstName</td>
                <td id="grade">&nbsp</td>
                
                

                @{
                    double totalGrade = 0;
                    double totalPossible = 0;
                    List<Score> totalOfCats = (from total in ViewBag.Scores as IEnumerable<Score>
                                               where total.UserProfileID == student.ID
                                               select total).ToList();

                    if (totalOfCats.Count() > 0)
                    {
                        for (int i = 0; i < totalOfCats.Count(); i++)
                        {
                            if (totalOfCats[i].AssignmentActivity.AbstractAssignment.Category.Points == 0)
                            {
                                totalGrade += totalOfCats[i].Points;
                                
                                //We always need to divide by 100%
                                totalPossible += 100;
                            }
                            else
                            {
                                totalGrade += totalOfCats[i].Points * totalOfCats[i].AssignmentActivity.AbstractAssignment.Category.Points;
                                totalPossible += 100 * totalOfCats[i].AssignmentActivity.AbstractAssignment.Category.Points;
                            }
                        }
                    }
                    var totalPercent = (totalGrade / totalPossible)*100;
                    <td>@totalPercent.ToString(".##")%</td>
                    foreach (Category cat in ViewBag.Categories)
                    {
                        List<Score> scoreQuery = (from g in ViewBag.Scores as IEnumerable<Score>
                                                  where g.UserProfileID == student.ID 
                                                  && g.AssignmentActivity.AbstractAssignment.CategoryID == cat.ID
                                                  select g).ToList();

                        if (scoreQuery.Count() > 0)
                        {
                            <td id="categoryGrade">@scoreQuery.First().Points.ToString(".##")%</td>
                        }
                        else
                        {
                            <td id="categoryGrade">NG</td>
                        }
                    }
                }
            </tr>
        }
    </table>
    <div class="slidingDiv" id="slidingDivID" style="display: none; position: absolute;">
        <form id="columnOptionsForm" method="post" action="/Gradebook/ModifyColumn" data-ajax="true"
        data-ajax-success="" data-ajax-update="#grades">
        <input id="actionRequested" name="actionRequested" type="hidden" value="null" />
        <input id="assignmentId" name="assignmentId" type="hidden" value="null" />
        <table class="menu" id="menuID">
            <tr>
                <td>
                    <a href="#" onclick="setGradableAction('@GradebookController.ColumnAction.InsertLeft.ToString()'); $('#columnOptionsForm').submit();">
                        Insert 1 left</a>
                </td>
            </tr>
            <tr>
                <td>
                    <a href="#" onclick="setGradableAction('@GradebookController.ColumnAction.InsertRight.ToString()'); $('#columnOptionsForm').submit();">
                        Insert 1 right</a>
                </td>
            </tr>
            <tr>
                <td>
                    <a href="#" onclick="setGradableAction('@GradebookController.ColumnAction.Delete.ToString()'); $('#columnOptionsForm').submit();">
                        Delete column</a>
                </td>
            </tr>
            <tr>
                <td>
                    <a href="#" onclick="setGradableAction('@GradebookController.ColumnAction.Clear.ToString()'); $('#columnOptionsForm').submit();">
                        Clear column</a>
                </td>
            </tr>
        </table>
        </form>
        <script type="text/javascript">
            function setGradableAction(actionName) {
                $('#actionRequested').val(actionName);
            }
            $('#columnOptionsForm').submit(function () {
                $('#assignmentId').val(currentCol);
                return;
            });
        </script>
    </div>
</div>


<script type="text/jscript">
    //display if the letter grade menu is showing
    var isShowing = false;
    var lastFocusedAssignment = null;
    var lastFocusedCell = null;
    var isHighlighted = false;

    $(document).ready(function () {
        calculateRows();
        calculateCols();
    });

    $(document).click(function () {
        if (isShowing == true) {
            $("#letterGradesID").animate({ "height": "hide" }, { duration: 300 });
            isShowing = false;
            clearLastCellFocus();
        }
        else {
            isShowing = true;
        }

        if (isHighlighted == true) {
            $("#grades tr").each(function () {
                $(this).find("td").each(function () {
                    if ($(this).attr("class") == "colHeader") {
                    }
                    else {
                        $(this).css("background-color", "white");
                    }
                });
                $(this).find("th").each(function () {
                    if ($(this).attr("class") == "colHeader") {
                    }
                    else {
                        $(this).css("background-color", "white");
                    }
                });
            });
            isHighlighted = false;
        }
        else {
            isHighlighted = true;
        }
    });

    $("#grades").keydown(function (e) {
        
        //This means enter was clicked when the header was highlighted
        if (e.keyCode == 13) {

            clearLastAssignmentFocus();
            clearLastCellFocus();

        }
    });

    $("#grades td").keydown(function (e) {

        var cell = null;

        //13 means enter was pressed
        if (e.keyCode == 13) {

            clearLastAssignmentFocus();
            clearLastCellFocus();
        }

        //9 means tab was pressed
        if (e.keyCode == 9) {

            e.preventDefault();
            var row = $(this).parent("tr");
            var colIndex = $(this).prevAll().length;
            colIndex = parseInt(colIndex);
            colIndex += 1;
            row.each(function () {

                cell = $(this).find("td:eq(" + colIndex + ")");

            });

            cellGainsFocus(cell);

        }
    });

    $("#letterGradesID td").keydown(function (e) {
        var cell = null;
        //13 means entered was clicked
        if (e.keyCode == 13) {

            var row = $(this).parent("tr").next("tr");
            var colIndex = $(this).prevAll().length;
            row.each(function () {
                cell = $(this).find("td:eq(" + colIndex + ")");

            });

            cellGainsFocus(cell);

        }
    });


    $("#letterGradesID").click(function (e) {

        //The div has been clicked on for edit, therefore we don't want to hide it
        //so we set isSHowing to false
        isShowing = false;
    });

    

    function displayLetterGrades() {
        $("#letterGradesID").animate({ "height": "show" }, { duration: 300 });
        isShowing = true;
    }


    function clearLastCellFocus() {

        //if a prior cell has already received focus in the past, we need to turn it back into
        //a normal table cell
        if (lastFocusedCell != null) {

            var catId = lastFocusedCell.attr("id").split("-");
            var cellValue = lastFocusedCell.children().val();
            lastFocusedCell.html("");
            lastFocusedCell.text(cellValue);
            lastFocusedCell.attr("onclick", 'cellGainsFocus(this)');
            lastFocusedCell = null;

            $.ajax({
                type: "POST",
                url: "/Gradebook/ModifyCategoryPoints",
                data: { value: cellValue, categoryId: catId[1] }
            });

            calculateRows();
            calculateCols();
        }
    }

    function cellGainsFocus(someCell) {
        //do this once so we don't have to constantly do it later
        someCell = $(someCell);

        //clear any previous focus
        clearLastCellFocus();

        var textValue = someCell.text();
        var inputText = $('<input class="cellInput" type="text" value="' + textValue + '" />');
        someCell.removeAttr("onclick");
        someCell.html(inputText);
        inputText.focus();
        lastFocusedCell = someCell;

    }

    function clearLastAssignmentFocus() {
        if (lastFocusedAssignment != null) {

            newCategoryId = lastFocusedAssignment.attr("id");
            var cellValue = lastFocusedAssignment.children().val();
            lastFocusedAssignment.html(cellValue + '<div id="cntnr" class="thButton"><button class="dropdown" id="' + newCategoryId + '" onclick="ShowHide(this);"></button></div>');
            lastFocusedAssignment.attr("onclick", 'cellGainsFocus(this)');
            lastFocusedAssignment = null;

            $.ajax({
                type: "POST",
                url: "/Gradebook/ModifyCategoryName",
                data: { value: cellValue, categoryId: newCategoryId }
            });
            
        }
    }

    function changeAssignmentName(someAssignment) {
        //do this once so we don't have to constantly do it later
        someAssignment = $(someAssignment);

        //clear any previous focus
        clearLastAssignmentFocus();

        var textValue = someAssignment.text();
        var inputText = $('<input class="cellInput" type="text" value="' + textValue + '" />');
        someAssignment.removeAttr("onclick");
        someAssignment.html(inputText);
        inputText.focus();
        lastFocusedAssignment = someAssignment;
    }


    function calculateRows() {
        
        var totalPerfect = 0;
        var totalAverage = 0;
        var total = 0;
        var count = 0;
        var counter = 0;
        var isTrue = false;
        var a = [];

        $("#grades #weights").each(function () {
            $(this).find("td").each(function () {
                var id = $(this).attr("id").split("-");
                if (id[0] == "weight") {

                    a.push(parseFloat($(this).text()));
                    total += parseFloat($(this).text());
                    totalPerfect += 1;

                }
            });

            $(this).find("td").each(function () {
                if ($(this).attr("id") == "categoryTotal") {
                    $(this).text((total).toFixed(2));
                }
                var id = $(this).attr("id").split("-");
                if (id[0] == "weight") {
                    if (a[count] > 0) {
                        a[count] = a[count] / total;

                    }
                    else {
                        counter += 1;
                    }
                    count += 1;
                }
            });
        });


        $("#grades #studentGrades").each(function () {
            total = 0;
            count = 0;
            $(this).find("td").each(function () {
                if ($(this).attr("id") == "categoryGrade") {
                    var number = parseFloat($(this).text());
                    if (counter == a.length) {
                        total += number;
                    }
                    else {
                        total += number * a[count];
                        isTrue = true;
                    }
                    count += 1;
                }
                else {
                }

            });
            if (counter == a.length) {
                total = parseFloat((total / counter)).toFixed(2);
            }
            else {
                total = parseFloat((total)).toFixed(2);                
            }
            $(this).find("td").each(function () {
                if ($(this).attr("id") == "total") {
                    $(this).text(total + "%");
                }
            });
        });

    }


    function calculateCols() {


        //We start at 3 because rows 1 and 2 are the student names and total
        var colIndex = 2;

        //Starting in the gradebook on the student grade rows
        //This bypasses the headers so we don't look through them
        $("#grades #studentGrades").each(function () {
            $(this).find("td:nth-child(" + colIndex + ")").each(function () {
                getSum(colIndex);
            });
            colIndex += 1;
        });
    }

    function selectColumn(col) {
        
        $("#grades tr").each(function () {
            $(this).find("td").each(function () {
                if ($(this).attr("class") == "colHeader") {
                }
                else {
                    $(this).css("background-color", "white");
                }
            });
            $(this).find("th").each(function () {
                if ($(this).attr("class") == "colHeader") {
                }
                else {
                    $(this).css("background-color", "white");
                }
            });
        });

        $("#grades tr").each(function () {
            $(this).find("td:nth-child(" + $(col).attr("id") + ")").each(function () {
                if ($(this).attr("id") == $(col).attr("id")) {
                }
                else {
                    $(this).css("background-color", "DeepSkyBlue ");
                }
            });
            $(this).find("th:nth-child(" + $(col).attr("id") + ")").each(function () {
                if ($(this).attr("class") == "colHeader") {
                }
                else {
                    $(this).css("background-color", "DeepSkyBlue ");
                }
            });
        });
        isHighlighted = false;
        
    }

    function getSum(Index) {
        var colTotal = 0;
        var count = 0;
        $("#grades #studentGrades").children("td:nth-child(" + Index + ")").each(function () {
            colTotal += parseInt($(this).text());
            count += 1;
        });

        $("#grades tr").children("td:nth-child(" + Index + ")").each(function () {
            if ($(this).attr("id") == "averageTotal") {
                colTotal = parseInt(colTotal / count).toFixed(2);
                $(this).html(colTotal + "%");
            }
            if ($(this).attr("id") == "averageScore") {
                colTotal = parseInt(colTotal / count).toFixed(2);
                $(this).html(colTotal + "%");
            }
        });
    }

    function newTab() {

        $.ajax({
            type: "POST",
            url: "/Gradebook/AddCategory"
        });
    }

</script>
