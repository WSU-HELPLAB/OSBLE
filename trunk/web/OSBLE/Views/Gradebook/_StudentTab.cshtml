@using OSBLE.Controllers;
@using OSBLE.Models.Assignments;
@using OSBLE.Models.Assignments.Activities;
@using OSBLE.Models.Assignments.Activities.Scores;
@using OSBLE.Models.Users
@{
    Layout = null;
}

<style type="text/css">
    .cellInput
    {
        width: 75px;
        border: none;
    }
    .gradebook
    {
        width: auto;
        border-collapse: collapse;
        border: 1px solid #D0D0D0;
    }
    
    .gradebook td
    {
        padding: 3px;
        width: auto;
        height: 25px;
    }
    
    .gradebook td, .gradebook th, .gradebook tr
    {
        min-width: 50px;
        width: auto;
        border: 1px solid #D0D0D0;
    }
    
    .gradebook th
    {
        text-align: left;
    }
    #tabHeader ul
    {
        list-style: none;
        padding: 0;
        margin: 0;
    }
    
    #tabHeader li a
    {
        padding: 0 1em;
    }
    #tabHeader
    {
        border-bottom:1px;
    }
    #tableContent
    {
        clear: both;
    }
    
    #h3
    {
        margin: 0;
        padding: 0 0 1em 0;
    }
    
    #tabHeader li
    {
        float: left;
        border: 1px solid gray;
        border-top-left-radius: 4px 4px;
        border-top-right-radius: 4px 4px;
        background-color: #f5f5f5;
        border-bottom-width: 0;
        border-bottom: 1px;
        margin: 0 0.2em -0.1em 0;
        background: silver;
    }
    
    #tabHeader #selected
    {
        position: relative;
        border-bottom:1px solid #fff;
        background: white;
    }
</style>


@Html.Partial("_Tabs")

<div id="tableContent">
    <table id="grades" class="gradebook">

        <tr id="perfectScore">
                <td id="th2"><b>Perfect Score</b></td>
                <td id="perfectTotal">100%</td>
                @foreach (AbstractAssignmentActivity item in ViewBag.Assignments)
                {
                    <td id="pointsPossible-@item.ID">@item.PointsPossible</td>
                }
        
        </tr>
        <tr id="averageRow">
            <td id="th3">
                <b>Average Score</b>
            </td>
            @{
                //Holds the total grade
                double totalGrade = 0;

                //Holds the users total score
                double totalGradePoints = 0;

                //Holds the category weight / total of all category weights
                double totalGradePossible = 0;

                //Holds to total of all category weights
                double catPossibleWeight = 0;

                double assignPoints = 0;
                double assignPossible = 0;

                //Get the total score for the class
                foreach (AbstractAssignmentActivity assign in ViewBag.Assignments)
                {
                    foreach (Score userScore in ViewBag.TotalScores)
                    {
                        if (userScore.Points >= 0)
                        {
                            assignPoints += userScore.Points;
                            assignPossible += userScore.AssignmentActivity.PointsPossible;
                        }
                    }
                }
                totalGrade = (assignPoints / assignPossible) * 100;

                if (totalGrade > 0)
                {
                <td id="averageTotal">
                    @totalGrade.ToString(".#")%
                </td>
                }
                else
                {
                    <td id="averageTotal">NG</td>
                }
            }
            @foreach (AbstractAssignmentActivity item in ViewBag.Assignments)
            {
                var score = (from scores in ViewBag.TotalScores as IEnumerable<Score>
                             where scores.AssignmentActivityID == item.ID
                             where scores.Points >= 0
                             select scores);

                double totalAverage = 0;
                double averagePoints = 0;
                double averagePossible = 0;

                //Make sure there is at least one score in the category
                bool oneScore = false;
                foreach (Score s in score)
                {
                    oneScore = true;
                    averagePoints += s.Points;
                    averagePossible += s.AssignmentActivity.PointsPossible;
                }
                double categoryScore = averagePoints / averagePossible;
                totalAverage += categoryScore * 100;
                if (oneScore == true)
                {
                    <td id="averageScore">@totalAverage.ToString(".#")</td>  
                }
                else
                {
                    <td id="averageScore">NG</td>
                }
            }
        </tr>
        <tr>    
            <th id="th4">
                Name
            </th>
            @{
                
                if (ViewBag.NumDropped == 0)
                {
                    <th id="totalCustomize">Total [Average]</th>
                }
                else
                {
                    <th id="totalCustomize">Total [Dropped @ViewBag.NumDropped]</th>
                }

                int i = 2;
                foreach (AbstractAssignmentActivity assign in ViewBag.Assignments)
                {

                    if (assign.addedPoints > 0)
                    {   
                        <th id="header-@assign.ID">@assign.Name (Added @assign.addedPoints)</th>
                    }
                    else
                    {
                        <th id="header-@assign.ID" onclick="clearLastCellFocus();">@assign.Name </th>
                    }
                    i += 1;
                }
            }
            
        </tr>
        <tr>
        @{
            UserProfile cu = (from user in ViewBag.CurrentStudent as IEnumerable<UserProfile> select user).FirstOrDefault();
            
            <td>@cu.LastName, @cu.FirstName</td>
            
            List<Score> scoreList = (from scores in ViewBag.UserScores as IEnumerable<Score>
                                     where scores.Points >= 0
                                     select scores).ToList();

            if (scoreList.Count() > 0)
            {
                double totalPoints = 0;
                double totalPossible = 0;


                foreach (Score s in scoreList)
                {
                    totalPoints += s.Points;
                    totalPossible += s.AssignmentActivity.PointsPossible;
                }

                totalPoints = (totalPoints / totalPossible) * 100;
                if (totalPoints > 0)
                {
                    <td>@totalPoints.ToString(".#")%</td>
                }
                else
                {
                    <td>@String.Format("{0}", 0)</td>
                }
            }
            else
            {
                <td>NG</td>
            }

            foreach (AbstractAssignmentActivity assignment in ViewBag.Assignments)
            {
                var score = (from scores in ViewBag.UserScores as IEnumerable<Score>
                             where scores.AssignmentActivityID == assignment.ID &&
                             scores.Points >= 0
                             select scores);

                if (score.Count() > 0)
                {
                    if (score.First().AssignmentActivity.AbstractAssignment.Rubric != null)
                    {   
                        <td>@Html.ActionLink(String.Format("{0:0.0}", score.First().Points), "View", "Rubric", new { abstractAssignmentActivityId = score.First().AssignmentActivityID, teamUserID = score.First().TeamUserMemberID }, new { })</td>
                    }
                    else
                    {
                        if (score.First().Points > 0)
                        {
                            <td>@score.First().Points.ToString(".#")</td>
                        }
                        else
                        {
                            <td>@String.Format("{0}", 0)</td>
                        }
                    }
                }
                else
                {
                    var studentScore = (from scores in ViewBag.UserScores as IEnumerable<Score>
                                        where scores.AssignmentActivityID == assignment.ID
                                        select scores);

                    if (studentScore.Count() > 0)
                    {
                        <td id="@String.Format("{0}-{1}", cu.Identification, assignment.ID)" onclick="cellGainsFocus(this);" style="color:Red;">@studentScore.First().StudentPoints</td>
                    }
                    else
                    {
                        <td id="@String.Format("{0}-{1}", cu.Identification, assignment.ID)" onclick="cellGainsFocus(this);" style="color:Red;">NG</td>
                    }
                }

            }
        }
        </tr>

    </table>
</div>

<script type="text/javascript">

    var lastFocusedCell = null;    

    function clearLastCellFocus() {

        //if a prior cell has already received focus in the past, we need to turn it back into
        //a normal table cell
        if (lastFocusedCell != null) {

            var IDs = lastFocusedCell.attr("id").split("-");
            var cellValue = lastFocusedCell.children().val();

            lastFocusedCell.html("");
            lastFocusedCell.text(cellValue);
            lastFocusedCell.attr("onclick", 'cellGainsFocus(this)');
            lastFocusedCell.css("color", "Red");
            lastFocusedCell = null;

            $.ajax({
                type: "POST",
                url: "/Gradebook/ModifyStudentScore",
                data: { userId: IDs[0].toString(), assignmentId: IDs[1], value: parseFloat(cellValue) },
                success: alert("Succeeded")                
            });
        }
    }

    function cellGainsFocus(someCell) {
        
        //clear any previous focus
        clearLastCellFocus();

        //do this once so we don't have to constantly do it later
        someCell = $(someCell);

        var textValue = someCell.text();
        var inputText = $('<input class="cellInput" type="text" value="' + textValue + '" />');
        //someCell.removeAttr("onclick");
        someCell.html(inputText);
        inputText.focus();
        inputText.select();
        lastFocusedCell = someCell;
       // $("#lastCell").val(someCell);
        //evt.preventDefault();
    }

</script>