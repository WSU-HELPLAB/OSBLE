@model OSBLE.Models.Assignments.Activities.IssueVotingActivity
@using OSBLE.Models.Assignments.Activities
@using OSBLE.Models
@{
    ViewBag.Title = "Create Issue Voting";
}
<h2>Create Issue Voting</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/osble.assignments.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>IssueVotingActivity</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.SetGradePercentOfIssues)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(model => model.SetGradePercentOfIssues, new { id = "SetGradePercentOfIssues" })
            @Html.ValidationMessageFor(model => model.SetGradePercentOfIssues)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.SetGradePercentAgreementWModerator)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(model => model.SetGradePercentAgreementWModerator, new { id = "SetGradePercentAgreementWModerator" })
            @Html.ValidationMessageFor(model => model.SetGradePercentAgreementWModerator)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.SetGradeManually)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(model => model.SetGradeManually, new { id = "SetGradeManually" })
            @Html.ValidationMessageFor(model => model.SetGradeManually)
        </div>


        <div class="editor-label">
            @Html.LabelFor(model => model.MinutesLateWithNoPenalty)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MinutesLateWithNoPenalty)
            @Html.ValidationMessageFor(model => model.MinutesLateWithNoPenalty)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.PercentPenalty)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.PercentPenalty)
            @Html.ValidationMessageFor(model => model.PercentPenalty)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.HoursLatePerPercentPenalty)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.HoursLatePerPercentPenalty)
            @Html.ValidationMessageFor(model => model.HoursLatePerPercentPenalty)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.HoursLateUntilZero)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.HoursLateUntilZero)
            @Html.ValidationMessageFor(model => model.HoursLateUntilZero)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        @*<div class="editor-label">
            @Html.LabelFor(model => model.ReleaseDate)
       </div>
       <div class="editor-label">
            @Html.TextBox("ReleaseDate_Date", convertToMonthDayYearFormat(Model.ReleaseDate), new { @id = "ReleaseDate_Date", @class = "date_picker", size = 9 })
            @Html.TextBox("ReleaseDate_Time", convertTime(Model.ReleaseDate), new { @id = "ReleaseDate_Time", @class = "time_picker", size = 9 })
        </div>*@

        <div class="editor-label">
            @Html.LabelFor(model => model.AbstractAssignmentID, "AbstractAssignment")
        </div>
        <div class="editor-field">
            @Html.DropDownList("AbstractAssignmentID", String.Empty)
            @Html.ValidationMessageFor(model => model.AbstractAssignmentID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.PointsPossible)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.PointsPossible)
            @Html.ValidationMessageFor(model => model.PointsPossible)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ColumnOrder)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ColumnOrder)
            @Html.ValidationMessageFor(model => model.ColumnOrder)
        </div>

        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@functions
{
    public string convertToMonthDayYearFormat(DateTime date)
    {
        return addLostZeros(date.Month.ToString(), 2, true) + "/" + addLostZeros(date.Day.ToString(), 2, true) + "/" + addLostZeros(date.Year.ToString(), 4, true);
    }

    public string convertTime(DateTime time)
    {
        string timeStr;
        bool isAM = true;
        string hr;
        string min;
        if (time.Hour > 12)
        {
            isAM = false;
            hr = (time.Hour - 12).ToString();
        }
        else
        {
            hr = time.Hour.ToString();
        }
        min = time.Minute.ToString();

        hr = addLostZeros(hr, 2, true);
        min = addLostZeros(min, 2, true);

        timeStr = hr + ":" + min;
        if (isAM)
        {
            timeStr += " AM";
        }
        else
        {
            timeStr += " PM";
        }
        return timeStr;
    }

    public string addLostZeros(string s, int desiredDigits, bool addToFront)
    {
        int i = desiredDigits - s.Count();
        while (i > 0)
        {
            if (addToFront)
            {
                s = s.Insert(0, "0");
            }
            else
            {
                s += "0";
            }
            i--;
        }
        return s;
    }
}
