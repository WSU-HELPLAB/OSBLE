@model OSBLE.Models.Assignments.Activities.AuthorRebuttalActivity
@using OSBLE.Models.Assignments.Activities
@using OSBLE.Models
@{
    ViewBag.Title = "Create Author Rebuttal";
}
<h2>Create Author Rebuttal</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/osble.assignments.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(function () {
        $('#author_must_accept_or_refute_each_issue').change(function () {
            if ($(this).attr('checked')) {
                DisplayAuthorMustAcceptorRefuteEachIssueOptions();
            }
            else {
                HideAuthorMustAcceptorRefuteEachIssueOptions();
            }
        });
        $('#author_must_provide_rationale').change(function () {
            if ($(this).attr('checked')) {
                DisplayAuthorMustProvideRationaleOptions();
            }
            else {
                HideAuthorMustProvideRationaleOptions();
            }
        });

        $('#PresentAllIssuesLogged').change(function () {
            if ($(this).attr('checked')) {
                UncheckPresentIssuesXLogged();
                HidePresentIssuesXLoggedOptions();
                UncheckPresentIssuesXPercentLogged();
                UncheckPresentOnlyIssuesModeratorVoted();
            }
            else { }
        });

        $('#PresentIssuesXLogged').change(function () {
            if ($(this).attr('checked')) {
                DisplayPresentIssuesXLoggedOptions();
                UncheckPresentAllIssuesLogged();
                UncheckPresentOnlyIssuesModeratorVoted();
            }
            else {
                HidePresentIssuesXLoggedOptions();
                UncheckPresentIssuesXPercentLogged();
            }
        });

        $('#present_issues_x_percent_logged').change(function () {
            if ($(this).attr('checked')) {
                UncheckPresentAllIssuesLogged();
                UncheckPresentOnlyIssuesModeratorVoted();
            }
            else { }
        });

        $('#PresentOnlyIssuesModeratorVoted').change(function () {
            if ($(this).attr('checked')) {
                UncheckPresentAllIssuesLogged();
                UncheckPresentIssuesXLogged();
                HidePresentIssuesXLoggedOptions();
                UncheckPresentIssuesXPercentLogged();
            }
            else { }
        });

        $('#add_to_gradebook').change(function () {
            if ($('#add_to_gradebook').attr('checked')) {
                $('#grade_options').show('blind');
            } else {
                $('#grade_options').hide('blind');
            }
        });
    });

    function DisplayAuthorMustAcceptorRefuteEachIssueOptions() {
        $('#author_must_accept_or_refute_each_issue_options').show('highlight');
    }

    function HideAuthorMustAcceptorRefuteEachIssueOptions() {
        $('#author_must_accept_or_refute_each_issue_options').hide('highlight');
        $('#author_must_describe_how_addressed').removeAttr('checked');
    }

    function DisplayAuthorMustProvideRationaleOptions() {
        $('#author_must_provide_rationale_options').show('highlight');
    }

    function HideAuthorMustProvideRationaleOptions() {
        $('#author_must_provide_rationale_options').hide('highlight');
        $('#author_must_say_if_issue_was_addressed').removeAttr('checked');
    }
    function DisplayPresentIssuesXLoggedOptions(){
        $('#PresentIssuesXLogged_options').show('hightlight');
    }
    
    function HidePresentIssuesXLoggedOptions(){
        $('#PresentIssuesXLogged_options').hide('hightlight');
    }

    function UncheckPresentAllIssuesLogged(){
        $('#PresentAllIssuesLogged').removeAttr('checked');
    }

    function UncheckPresentIssuesXLogged(){
        $('#PresentIssuesXLogged').removeAttr('checked');
    }

    function UncheckPresentIssuesXPercentLogged(){
        $('#present_issues_x_percent_logged').removeAttr('checked');
    }

    function UncheckPresentOnlyIssuesModeratorVoted(){
        $('#PresentOnlyIssuesModeratorVoted').removeAttr('checked');
    }

</script>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>AuthorRebuttalActivity</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AbstractAssignmentID, "Abstract Assignment")
        </div>
        <div class="editor-field">
            @Html.DropDownList("AbstractAssignmentID", String.Empty)
            @Html.ValidationMessageFor(model => model.AbstractAssignmentID)
        </div>

        <h2>Settings</h2>

        <h4>Issue Presentation</h4>

        <div class="editor-field">
            @Html.RadioButtonFor(model => model.PresentAllIssuesLogged, new { name = "presentation" })
            @Html.LabelFor(model => model.PresentAllIssuesLogged)
            @Html.ValidationMessageFor(model => model.PresentAllIssuesLogged)
        </div>

        <div class="editor-field">
            <p>
                @Html.RadioButtonFor(model => model.PresentIssuesXLogged, new { name = "presentation" })
                Present only issues that recieved @Html.TextBoxFor(model => model.xlogged, new { size = 3 }) number of votes
            </p>
            @Html.ValidationMessageFor(model => model.PresentIssuesXLogged)
        </div>
        <div id="PresentIssuesXLogged_options" class="indented_options" style="display: none">
            <div class="editor-field">
                <p>
                    @Html.CheckBoxFor(model => model.PresentIssuesXPercentLogged, new { id = "present_issues_x_percent_logged" })
                    Present only issues for which @Html.TextBoxFor(model => model.xpercent, new { size = 3 }) percent of team members voted.
                </p>
                @Html.ValidationMessageFor(model => model.PresentIssuesXPercentLogged)
            </div>
        </div>

       @*Need to check whether team moderators are enabled*@

        <div class="editor-field">
            @Html.RadioButtonFor(model => model.PresentOnlyIssuesModeratorVoted, new { name = "presentation" })
            @Html.LabelFor(model => model.PresentOnlyIssuesModeratorVoted)
            @Html.ValidationMessageFor(model => model.PresentOnlyIssuesModeratorVoted)
        </div>


        <h4>Author Response</h4>

        <div class="editor-field">
            @Html.CheckBoxFor(model => model.AuthorMustAcceptorRefuteEachIssue, new { id = "author_must_accept_or_refute_each_issue" })
            @Html.LabelFor(model => model.AuthorMustAcceptorRefuteEachIssue)
            @Html.ValidationMessageFor(model => model.AuthorMustAcceptorRefuteEachIssue)
        </div>
        <div id="author_must_accept_or_refute_each_issue_options" class="indented_options" style="display: none">
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.AuthorMustDescribeHowAddressed, new { id = "author_must_describe_how_addressed" })
                @Html.LabelFor(model => model.AuthorMustDescribeHowAddressed)
                @Html.ValidationMessageFor(model => model.AuthorMustDescribeHowAddressed)
            </div>
        </div>

        <div class="editor-field">
            @Html.CheckBoxFor(model => model.AuthorMustProvideRationale, new { id = "author_must_provide_rationale" })
            @Html.LabelFor(model => model.AuthorMustProvideRationale)
            @Html.ValidationMessageFor(model => model.AuthorMustProvideRationale)
        </div>
        <div id="author_must_provide_rationale_options" class="indented_options" style="display: none">
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.AuthorMustSayIfIssueWasAddressed, new { id = "author_must_say_if_issue_was_addressed" })
                @Html.LabelFor(model => model.AuthorMustSayIfIssueWasAddressed)
                @Html.ValidationMessageFor(model => model.AuthorMustSayIfIssueWasAddressed)
            </div>
        </div>

        <h4>Grades</h4>

        <div class="editor-label">
            Add to Gradebook
        </div>
        <div class="editor-field">
            <input type="checkbox" id="add_to_gradebook" checked="checked" />
        </div>
    
        <div id="grade_options" class="indented_options" >
            <div class="editor-field">
                Worth
                @Html.TextBoxFor(model => model.PointsPossible, new { id = "points_possible", size = 3 })
                Points in Category <span id="grade_category_label"></span>

                @Html.ValidationMessageFor(model => model.PointsPossible)
            </div>
        

            <h4>Late Policy</h4>
    
            <p>
                Students may submit assignments up to @Html.TextBoxFor(model => model.MinutesLateWithNoPenalty, new { size = 3 })
                minutes late at no penalty, after which a penalty of @Html.TextBoxFor(model => model.PercentPenalty, new { size = 3 })
                percent per @Html.TextBoxFor(model => model.HoursLatePerPercentPenalty, new { size = 3 })
                hours late will be applied.<br />
                @Html.ValidationMessageFor(model => model.MinutesLateWithNoPenalty)
                @Html.ValidationMessageFor(model => model.PercentPenalty)
                @Html.ValidationMessageFor(model => model.HoursLatePerPercentPenalty)
            </p>
    
    
            <p>
                Assignments that are submitted more than @Html.TextBoxFor(model => model.HoursLateUntilZero, new { size = 3 })
                hours after the due date and time will receive an automatic 0.<br />
                @Html.ValidationMessageFor(model => model.HoursLateUntilZero)
            </p>

        </div>

         <div class="editor-label">
            @Html.LabelFor(model => model.ColumnOrder)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ColumnOrder)
            @Html.ValidationMessageFor(model => model.ColumnOrder)
        </div>

        <p>
            <input type="submit" value="Create Author Rebuttal" id="submitButton"/>
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

