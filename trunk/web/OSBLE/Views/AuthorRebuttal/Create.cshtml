@model OSBLE.Models.Assignments.Activities.AuthorRebuttalActivity
@using OSBLE.Models.Assignments.Activities
@using OSBLE.Models
@{
    ViewBag.Title = "Create Author Rebuttal";
}
<h2>Create Author Rebuttal</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/osble.assignments.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(function () {
        $('#AuthorMustAcceptorRefuteEachIssue').change(function () {
            if ($(this).attr('checked')) {

                DisplayAuthorMustAcceptorRefuteEachIssueOptions();
            }
            else {

                HideAuthorMustAcceptorRefuteEachIssueOptions();
            }
        });
        $('#AuthorMustProvideRationale').change(function () {
            if ($(this).attr('checked')) {

                DisplayAuthorMustProvideRationaleOptions();
            }
            else {

                HideAuthorMustProvideRationaleOptions();
            }
        });
    });

    function DisplayAuthorMustAcceptorRefuteEachIssueOptions() {
        $('#AuthorMustAcceptorRefuteEachIssue_options').show('highlight');
    }

    function HideAuthorMustAcceptorRefuteEachIssueOptions() {
        $('#AuthorMustAcceptorRefuteEachIssue_options').hide('highlight');
        $('#AuthorMustDescribeHowAddressed').removeAttr('checked');
    }

    function DisplayAuthorMustProvideRationaleOptions() {
        $('#AuthorMustProvideRationale_options').show('highlight');
    }

    function HideAuthorMustProvideRationaleOptions() {
        $('#AuthorMustProvideRationale_options').hide('highlight');
        $('#AuthorMustSayIfIssueWasAddressed').removeAttr('checked');
    }
</script>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>AuthorRebuttalActivity</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AbstractAssignmentID, "AbstractAssignment")
        </div>
        <div class="editor-field">
            @Html.DropDownList("AbstractAssignmentID", String.Empty)
            @Html.ValidationMessageFor(model => model.AbstractAssignmentID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AuthorMustAcceptorRefuteEachIssue)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(model => model.AuthorMustAcceptorRefuteEachIssue, new { id = "AuthorMustAcceptorRefuteEachIssue" })
            @Html.ValidationMessageFor(model => model.AuthorMustAcceptorRefuteEachIssue)
        </div>
        <div id="AuthorMustAcceptorRefuteEachIssue_options" class="indented_options" style="display: none">
            <div class="editor-label">
                @Html.LabelFor(model => model.AuthorMustDescribeHowAddressed)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.AuthorMustDescribeHowAddressed, new { id = "AuthorMustDescribeHowAddressed" })
                @Html.ValidationMessageFor(model => model.AuthorMustDescribeHowAddressed)
            </div>
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AuthorMustProvideRationale)
        </div>
        <div class="editor-field">
            @Html.CheckBoxFor(model => model.AuthorMustProvideRationale, new { id = "AuthorMustProvideRationale" })
            @Html.ValidationMessageFor(model => model.AuthorMustProvideRationale)
        </div>
        <div id="AuthorMustProvideRationale_options" class="indented_options" style="display: none">
            <div class="editor-label">
                @Html.LabelFor(model => model.AuthorMustSayIfIssueWasAddressed)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.AuthorMustSayIfIssueWasAddressed, new { id = "AuthorMustSayIfIssueWasAddressed" })
                @Html.ValidationMessageFor(model => model.AuthorMustSayIfIssueWasAddressed)
            </div>
        </div>

        <div class="editor-label">
            Add to Gradebook
        </div>
        <div class="editor-field">
            <input type="checkbox" id="add_to_gradebook" checked="checked" />
        </div>
    
        <div id="grade_options" class="indented_options">
            <div class="editor-field">
                Worth
                @Html.TextBoxFor(model => model.PointsPossible, new { id = "points_possible", size = 3 })
                Points in Category <span id="grade_category_label"></span>

                @Html.ValidationMessageFor(model => model.PointsPossible)
            </div>
        

            <h3>Late Policy</h3>
    
            <p>
                Students may submit assignments up to @Html.TextBoxFor(model => model.MinutesLateWithNoPenalty, new { size = 3 })
                minutes late at no penalty, after which a penalty of @Html.TextBoxFor(model => model.PercentPenalty, new { size = 3 })
                percent per @Html.TextBoxFor(model => model.HoursLatePerPercentPenalty, new { size = 3 })
                hours late will be applied.<br />
                @Html.ValidationMessageFor(model => model.MinutesLateWithNoPenalty)
                @Html.ValidationMessageFor(model => model.PercentPenalty)
                @Html.ValidationMessageFor(model => model.HoursLatePerPercentPenalty)
            </p>
    
    
            <p>
                Assignments that are submitted more than @Html.TextBoxFor(model => model.HoursLateUntilZero, new { size = 3 })
                hours after the due date and time will receive an automatic 0.<br />
                @Html.ValidationMessageFor(model => model.HoursLateUntilZero)
            </p>

        </div>

         <div class="editor-label">
            @Html.LabelFor(model => model.ColumnOrder)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.ColumnOrder)
            @Html.ValidationMessageFor(model => model.ColumnOrder)
        </div>

        <p>
            <input type="submit" value="Create Author Rebuttal" id="submitButton"/>
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

