@model OSBLE.Models.Assignments.Activities.AsyncIssueVotingActivity
@using OSBLE.Models.Assignments.Activities
@using OSBLE.Models
@{
    ViewBag.Title = "Create Async Issue Voting";
}

<h2>Create</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<script type="text/javascript">
    //set up event listener
    $(function () {
        $('#Submit').change(function () {
            if ($(this).attr('checked')) {
                updateIssueVoting_Async();
            }
            else {
                updateIssueVoting();
            }
        });

        $('#UseIssueVotingAsync').change(function () {
            if ($(this).attr('checked')) {
                DisplayAsyncVotingOptions();
            }
            else {
                HideAsyncVotingOptions();
                $('#UseOnlyStudentsWhoCompletedPeerReview').removeAttr('checked');
                $('#EnableIssueVotingDiscussion').removeAttr('checked');
                $('#ReviewerMustCompleteIssueVoting').removeAttr('checked');
            }
        });

        $('#UseIssueVotingAsync').removeAttr('checked');
    }); 

    function DisplayAsyncVotingOptions() {
        $('#AsyncVoting_options').show('blind');
    }
    function HideAsyncVotingOptions() {
        $('#AsyncVoting_options').hide('blind');
    }

    function updateIssueVoting_Async(){
    $('#UseOnlyStudentsWhoCompletedPeerReview_Async').val($('#UseOnlyStudentsWhoCompletedPeerReview'));
    $('#EnableIssueVotingDiscussion_Async').val($('#EnableIssueVotingDiscussion'));
    $('#ReviewerMustCompleteIssueVoting_Async').val($('#ReviewerMustCompleteIssueVoting'));
    $('#SetGradePercentOfIssues_Async').val($('#SetGradePercentOfIssues'));
    $('#SetGradePercentAgreementWModerator_Async').val($('#SetGradePercentAgreementWModerator'));
    $('#SetGradeManually_Async').val($('#SetGradeManually'));
    }

    function updateIssueVoting(){
    $('#SetGradePercentOfIssues_').val($('#SetGradePercentOfIssues'));
    $('#SetGradePercentAgreementWModerator_').val($('#SetGradePercentAgreementWModerator'));
    $('#SetGradeManually_').val($('#SetGradeManually'));
    }

</script>
@{
    AsyncIssueVotingActivity asyncIssueVoting = Model;
    IssueVotingActivity issueVoting = Model;

    using (Html.BeginForm())
    {
   
        @Html.ValidationSummary(true)
        <fieldset>
            <legend>AsyncIssueVotingActivity</legend>

            @Html.HiddenFor(model => asyncIssueVoting.UseOnlyStudentsWhoCompletedPeerReview, new { @id = "UseOnlyStudentsWhoCompletedPeerReview_Async" })
            @Html.HiddenFor(model => asyncIssueVoting.EnableIssueVotingDiscussion, new { @id = "EnableIssueVotingDiscussion_Async" })
            @Html.HiddenFor(model => asyncIssueVoting.ReviewerMustCompleteIssueVoting, new { @id = "ReviewerMustCompleteIssueVoting_Async" })
            @Html.HiddenFor(model => asyncIssueVoting.SetGradePercentOfIssues, new { @id = "SetGradePercentOfIssues_Async" })
            @Html.HiddenFor(model => asyncIssueVoting.SetGradePercentAgreementWModerator, new { @id = "SetGradePercentAgreementWModerator_Async" })
            @Html.HiddenFor(model => asyncIssueVoting.SetGradeManually, new { @id = "SetGradeManually_Async" })

            @Html.HiddenFor(model => issueVoting.SetGradePercentOfIssues, new { @id = "SetGradePercentOfIssues_" })
            @Html.HiddenFor(model => issueVoting.SetGradePercentAgreementWModerator, new { @id = "SetGradePercentAgreementWModerator_" })
            @Html.HiddenFor(model => issueVoting.SetGradeManually, new { @id = "SetGradeManually_" })

            
            <div class="editor-label">
                @Html.LabelFor(model => model.Name)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Name)
                @Html.ValidationMessageFor(model => model.Name)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.AbstractAssignmentID, "AbstractAssignment")
            </div>
            <div class="editor-field">
                @Html.DropDownList("AbstractAssignmentID", String.Empty)
                @Html.ValidationMessageFor(model => model.AbstractAssignmentID)
            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.UseIssueVotingAsync)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.UseIssueVotingAsync, new { id = "UseIssueVotingAsync" })
                @Html.ValidationMessageFor(model => model.UseIssueVotingAsync)
            </div>
            <div id="AsyncVoting_options" class="indented_options"  style="display: none">
                <div class="editor-label">
                    @Html.LabelFor(model => model.UseOnlyStudentsWhoCompletedPeerReview)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.UseOnlyStudentsWhoCompletedPeerReview, new { id = "UseOnlyStudentsWhoCompletedPeerReview" })
                    @Html.ValidationMessageFor(model => model.UseOnlyStudentsWhoCompletedPeerReview)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.EnableIssueVotingDiscussion)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.EnableIssueVotingDiscussion, new { id = "EnableIssueVotingDiscussion" })
                    @Html.ValidationMessageFor(model => model.EnableIssueVotingDiscussion)
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.ReviewerMustCompleteIssueVoting)
                </div>
                <div class="editor-field">
                    @Html.CheckBoxFor(model => model.ReviewerMustCompleteIssueVoting, new { id = "ReviewerMustCompleteIssueVoting" })
                    @Html.ValidationMessageFor(model => model.ReviewerMustCompleteIssueVoting)
                </div>
            </div>

           <div class="editor-label">
                @Html.LabelFor(model => model.SetGradePercentOfIssues)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.SetGradePercentOfIssues, new { id = "SetGradePercentOfIssues" })
                @Html.ValidationMessageFor(model => model.SetGradePercentOfIssues)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.SetGradePercentAgreementWModerator)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.SetGradePercentAgreementWModerator, new { id = "SetGradePercentAgreementWModerator" })
                @Html.ValidationMessageFor(model => model.SetGradePercentAgreementWModerator)
            </div>
            <div class="editor-label">
                @Html.LabelFor(model => model.SetGradeManually)
            </div>
            <div class="editor-field">
                @Html.CheckBoxFor(model => model.SetGradeManually, new { id = "SetGradeManually" })
                @Html.ValidationMessageFor(model => model.SetGradeManually)
            </div>


           <div class="editor-label">
                Add to Gradebook
            </div>
            <div class="editor-field">
                <input type="checkbox" id="add_to_gradebook" checked="checked" />
            </div>
    
            <div id="grade_options" class="indented_options">
                <div class="editor-field">
                    Worth
                    @Html.TextBoxFor(model => model.PointsPossible, new { id = "points_possible", size = 3 })
                    Points in Category <span id="grade_category_label"></span>

                    @Html.ValidationMessageFor(model => model.PointsPossible)
                </div>
        

                <h3>Late Policy</h3>
    
                <p>
                    Students may submit assignments up to @Html.TextBoxFor(model => model.MinutesLateWithNoPenalty, new { size = 3 })
                    minutes late at no penalty, after which a penalty of @Html.TextBoxFor(model => model.PercentPenalty, new { size = 3 })
                    percent per @Html.TextBoxFor(model => model.HoursLatePerPercentPenalty, new { size = 3 })
                    hours late will be applied.<br />
                    @Html.ValidationMessageFor(model => model.MinutesLateWithNoPenalty)
                    @Html.ValidationMessageFor(model => model.PercentPenalty)
                    @Html.ValidationMessageFor(model => model.HoursLatePerPercentPenalty)
                </p>
    
    
                <p>
                    Assignments that are submitted more than @Html.TextBoxFor(model => model.HoursLateUntilZero, new { size = 3 })
                    hours after the due date and time will receive an automatic 0.<br />
                    @Html.ValidationMessageFor(model => model.HoursLateUntilZero)
                </p>

            </div>

            <div class="editor-label">
                @Html.LabelFor(model => model.ColumnOrder)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.ColumnOrder)
                @Html.ValidationMessageFor(model => model.ColumnOrder)
            </div>

            <p>
                <input type="submit" value="Create Async Issue Voting" />
            </p>
        </fieldset>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
    
}
