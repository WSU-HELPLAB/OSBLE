@using OSBLE.Controllers;
@using OSBLE.Models.Assignments;
@using OSBLE.Models.Assignments;
@using OSBLE.Models.Courses;

@{
    ViewBag.Title = "_ObserverTab";
}

 @Html.Partial("_Tabs")

@{
    Layout = null;
    var index = 0;

    int numDropped = ViewBag.Dropped;
    <input type="hidden" id="numDropped" value="@numDropped" />
    var customize_option = (Category.GradeOptions)ViewBag.Customize;
    <input type="hidden" id="customize_option" value="@customize_option" />
}

<div id="tableContent" >
    <table id="grades" class="gradebook">
        <tr class="colHeader">
            @{var j = 1;
                <td id="_row-@index" class="rowHeader" style="background:#DCDCDC; border:outset 2px; border-color: #E8E8E8; width: 25px;" onmouseover="showButton(this);" onmouseout="hideButton(this);" onclick="selectRow(event, this);"></td>
                index++;
                j += 1;
                <td id="@j" class="colHeader" style="background:#DCDCDC; border:outset 2px; border-color:#E8E8E8"  onclick="selectColumn(event, this);"></td>
                j += 1;
                <td id="@j" class="colHeader" style="background:#DCDCDC; border:outset 2px; border-color:#E8E8E8" onclick="selectColumn(event, this);"></td>
                j += 1;
                foreach (Assignment item in ViewBag.Assignments)
                {
                    <td id="@j" class="colHeader" style="background:#DCDCDC; border:outset 2px; border-color:#E8E8E8; text-align:center; min-width: 45px;" onclick="selectColumn(event, this);">  
                
                    </td>
                    j += 1;
                }
            }
        </tr>
        <tr id="perfectScore">
            <td id="_row-@index" class="rowHeader" style="background:#DCDCDC; border:outset 2px; border-color:#E8E8E8; width:25px;" onclick="selectRow(event, this);"></td>
            @{index++;}
            <td id="th2"><b>Perfect Score</b></td>
            <td id="perfectTotal">100%</td>
            @foreach (Assignment item in ViewBag.Assignments)
            {
                <td id="pointsPossible-@item.ID" >@item.PointsPossible</td>
            }
        
        </tr>
        <tr id="averageRow">
            <td id="_row-@index" class="rowHeader" style="background:#DCDCDC; border:outset 2px; border-color:#E8E8E8; width:5px;" onclick="selectRow(event, this);"></td>
            @{index++;}
            <td id="th3">
                <b>Average Score</b>
            </td>
            @{       //Holds the total grade
                double totalGrade = 0;

                //Holds the users total score
                double totalGradePoints = 0;

                //Holds the category weight / total of all category weights
                double totalGradePossible = 0;

                //Holds to total of all category weights
                double catPossibleWeight = 0;

                double assignPoints = 0;
                double assignPossible = 0;

                //Get the total score for the class
                foreach (Assignment assign in ViewBag.Assignments)
                {
                    foreach (Score userScore in ViewBag.Grades)
                    {
                        if (userScore.isDropped == false)
                        {
                            assignPoints += userScore.Points;
                            assignPossible += userScore.Assignment.PointsPossible;
                        }
                    }
                }
                totalGrade = (assignPoints / assignPossible) * 100;

                if (totalGrade.ToString() == "NaN")
                {
                        <td id="averageTotal">
                            NG
                        </td>
                }
                else
                {
                        <td id="averageTotal">
                            @string.Format("{0:0.##}", totalGrade)%
                        </td>
                }
                }
                @foreach (Assignment item in ViewBag.Assignments)
                {
                    var score = (from scores in ViewBag.Grades as IEnumerable<Score>
                                 where scores.AssignmentID == item.ID
                                 select scores);

                    double totalAverage = 0;
                    double averagePoints = 0;
                    int numStudents = 0;

                    //Make sure there is at least one score in the category
                    bool oneScore = false;
                    foreach (Score s in score)
                    {
                        oneScore = true;
                        averagePoints += s.Points;
                        numStudents++;
                    }
                    double categoryScore = averagePoints / numStudents;
                    totalAverage += categoryScore;
                    if (oneScore == true)
                    {
                        if (totalAverage > 0)
                        {
                            <td id="averageScore">@totalAverage.ToString(".##")</td>  
                        }
                        else
                        {
                            <td id="averageScore">0</td>
                        }
                    }
                    else
                    {
                        <td id="averageScore">NG</td>
                    }
                }
        </tr>
        <tr>
            <td id="_row-@index" class="rowHeader" style="background:#DCDCDC; border:outset 2px; border-color:#E8E8E8; width:25px;" onclick="selectRow(event, this);"></td>
            @{index++;}
            @{
                <th id="th4" >
                    Name
                </th>
        
                if (customize_option == Category.GradeOptions.XtoDrop && numDropped != 0)
                {
                    <th id="totalCustomize">Total <input id="dropLowestButton" type="button" value="Average [Drop @numDropped lowest]" /> </th>
                }
                else if (customize_option == Category.GradeOptions.XtoTake)
                {
                    <th id="totalCustomize">Total <input id="dropLowestButton" type="button" value="Average [Keep @numDropped highest]" /> </th>
                }
                else
                {
                    <th id="totalCustomize">Total <input id="dropLowestButton" type="button" value="Average" /></th>
                }

                int i = 2;
                foreach (Assignment a in ViewBag.Assignments)
                {
                    //COMMENTED OUT FOR TESTING PURPOSES
                    if (a.addedPoints > 0)
                    {                   
                        <th id="header-@a.ID" >@a.AssignmentName (Added @a.addedPoints)</th>
                    }
                    else
                    {                    
                        <th id="header-@a.ID" >@a.AssignmentName </th>
                    }
                    i += 1;
                }
            }
        </tr>
        <!--loop through all users -->
        @foreach (CourseUser user in ViewBag.Users)
        {        
            <tr id="studentGrades">
                <td id="_row-@index" class="rowHeader" style="background:#DCDCDC; border:outset 2px; border-color:#E8E8E8; width:25px;" onclick="selectRow(event, this);"></td>
                @{index++;}
                <td id="@user.ID" >@user.DisplayName(ViewBag.ActiveCourse.AbstractRole)</td>
            
                    
                @{
                  List<Score> percent = (from p in ViewBag.Percents as IEnumerable<Score>
                                         where p.CourseUserID == user.ID
                                         select p).ToList();
                  if (percent.Count() > 0)
                  {
                      if (percent.First().Points > 0)
                      {
                          <td id="total">@percent.First().Points.ToString(".##")%</td>
                      }
                      else
                      {
                          <td id="total">@String.Format("{0}", 0)%</td>
                      }
                  }
                  else
                  {
                        <td id="total">NG</td>
                  }
                }
                
                @foreach (Assignment gradeAssignment in ViewBag.Assignments)
                {

                    var gradableQuery = from g in gradeAssignment.Scores as IEnumerable<Score>
                                        where g.AssignmentID == gradeAssignment.ID
                                        && g.CourseUser.UserProfileID == user.UserProfile.ID
                                        && g.Points >= 0
                                        select g;
                    //use the stored score if possible.  Otherwise, just use a "0"
                    if (gradableQuery.Count() > 0)
                    {

                        if (gradeAssignment.Rubric != null)
                        {
                            if (gradableQuery.First().LatePenaltyPercent > 0)
                            {                          
                                <td id="@String.Format("{0}-{1}", user.ID, gradeAssignment.ID)" style="font-style:italic;">@Html.ActionLink(String.Format("{0:0.##}", gradableQuery.First().Points), "View", "Rubric", new { assignmentId = gradableQuery.First().AssignmentID, cuId = user.ID }, new { @class = "rubric", @style = "color:Red;" })</td>
                            }
                            else
                            {                                                    
                                <td id="@String.Format("{0}-{1}", user.ID, gradeAssignment.ID)" style="font-style:italic;">@Html.ActionLink(String.Format("{0:0.##}", gradableQuery.First().Points), "View", "Rubric", new { assignmentId = gradableQuery.First().AssignmentID, cuId = user.ID }, new { @class = "rubric" })</td>
                            }
                        }
                        else
                        {
                            if (gradableQuery.First().LatePenaltyPercent > 0)
                            { 
                                <td id="@String.Format("{0}-{1}", user.ID, gradeAssignment.ID)" style="font-style:italic; color:Red;" >@string.Format("{0:0.##}", @gradableQuery.First().Points)</td>
                            }
                            else
                            {
                                <td id="@String.Format("{0}-{1}", user.ID, gradeAssignment.ID)" >@string.Format("{0:0.##}", @gradableQuery.First().Points)</td>
                            }
                        }
                    }
                    else
                    {
                        if (gradeAssignment.Rubric != null)
                        {                       
                            <td id="@String.Format("{0}-{1}", user.ID, gradeAssignment.ID)" style="font-style:italic;">@Html.ActionLink("NG", "View", "Rubric", new { assignmentId = gradeAssignment.ID, cuId = user.ID }, new { @class = "rubric" })</td>
                        }
                        else
                        {
                            <td id="@String.Format("{0}-{1}", user.ID, gradeAssignment.ID)">NG</td>
                        }
                    }
                }
            </tr>
        }
    </table>
</div>
@foreach (Assignment assignment in ViewBag.Assignments)
{
    <input id="addedPoints-@assignment.ID" type="hidden" value="@assignment.addedPoints" />    
}

<script type="text/javascript">

    $(document).ready(function () {
        keyControls();
    });

    function selectRow(evt, row) {
        evt.cancelBubble = true;
        if (row.id == null) {
            var container = row.attr("id").split("-");
        }
        else {
            var container = row.id.split("-");
        }
        var count = 0;

        if (header == true) {
            clearLastHeaderFocus();
        }

        resetTableColors();

        function clearLastHeaderFocus() {
            //if a header already had focus then we need to change it back and display text
            if (lastFocusedCell != null) {
                clearRowColumnHeader();

                var cellValue = lastFocusedCell.children().val();
                var cellID = lastFocusedCell.attr("id").split("-");
                lastFocusedCell.html(cellValue);
                lastFocusedCell = null;

            }
        }

        $('#grades tr').each(function () {
            if (count == container[1] && container[1] != 0) {
                $(this).find("td").each(function () {
                    if ($(this).attr("class") == "rowHeader") {
                        $(this).css("background-color", "#AAAAAA");
                    } else if ($(this).attr("class") != "colHeader") {
                        $(this).css("background-color", "DeepSkyBlue");
                    }
                });
                $(this).find("th").each(function () {
                    $(this).css("background-color", "DeepSkyBlue");
                });
            }
            count++;
        });
    }

    function clearLastHeaderFocus() {
        //if a header already had focus then we need to change it back and display text
        if (lastFocusedCell != null) {
            clearRowColumnHeader();

            var cellValue = lastFocusedCell.children().val();
            var cellID = lastFocusedCell.attr("id").split("-");
            lastFocusedCell.html(cellValue);
            lastFocusedCell.attr("onclick", 'changeHeaderName(event, this)');
            lastFocusedCell = null;

            $.ajax({
                type: "POST",
                url: "/Gradebook/ModifyAssignmentName",
                data: { value: cellValue, assignmentId: cellID[1] }
            });
        }
    }

    function clearRowColumnHeader() {
        $("#grades tr").each(function () {
            $(this).find("td").each(function () {
                if ($(this).attr("class") == "colHeader" || $(this).attr("class") == "rowHeader") {
                    $(this).css("background-color", "#DCDCDC");
                    $(this).find("div").css("background-color", "#DCDCDC");
                    $(this).attr("onmouseout", "hideButton(this);");
                }
            });
        });
    }

    function selectColumn(evt, col) {
        evt.cancelBubble = true;

        if (header == true) {
            clearLastHeaderFocus();
        }
        else 

        resetTableColors();

        currentHeader = col.id.split("-");

        if (currentHeader[1] == null) {
            $("#" + currentHeader).css("background-color", "#AAAAAA");
            $("#div-" + currentHeader).css("background-color", "#AAAAAA");

            $("#grades tr").each(function () {

                $(this).find("td:nth-child(" + currentHeader + ")").each(function () {
                    if ($(this).attr("class") != "colHeader" && $(this).attr("class") != "rowHeader") {
                        $(this).css("background-color", "DeepSkyBlue");
                    }
                });

                $(this).find("th:nth-child(" + currentHeader + ")").each(function () {
                    $(this).css("background-color", "DeepSkyBlue ");
                });
            });
        }
    }
    function resetTableColors() {
        $("#grades tr").each(function () {
            $(this).find("td").each(function () {
                if ($(this).attr("class") == "colHeader" || $(this).attr("class") == "rowHeader") {
                    $(this).css("background-color", "#DCDCDC");
                    $(this).find("div").css("background-color", "#DCDCDC");
                }
                else {
                    $(this).css("background-color", "white");
                }
            });
            $(this).find("th").each(function () {
                if ($(this).attr("class") != "colHeader") {
                    $(this).css("background-color", "white");
                }
            });
        });
    }

</script>


