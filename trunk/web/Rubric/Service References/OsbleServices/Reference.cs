//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace OsbleRubric.OsbleServices {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CellDescription", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Courses.Rubrics")]
    public partial class CellDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private OsbleRubric.OsbleServices.Criterion CriterionField;
        
        private int CriterionIDField;
        
        private string DescriptionField;
        
        private OsbleRubric.OsbleServices.Level LevelField;
        
        private int LevelIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsbleRubric.OsbleServices.Criterion Criterion {
            get {
                return this.CriterionField;
            }
            set {
                if ((object.ReferenceEquals(this.CriterionField, value) != true)) {
                    this.CriterionField = value;
                    this.RaisePropertyChanged("Criterion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CriterionID {
            get {
                return this.CriterionIDField;
            }
            set {
                if ((this.CriterionIDField.Equals(value) != true)) {
                    this.CriterionIDField = value;
                    this.RaisePropertyChanged("CriterionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsbleRubric.OsbleServices.Level Level {
            get {
                return this.LevelField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelField, value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LevelID {
            get {
                return this.LevelIDField;
            }
            set {
                if ((this.LevelIDField.Equals(value) != true)) {
                    this.LevelIDField = value;
                    this.RaisePropertyChanged("LevelID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Criterion", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Courses.Rubrics")]
    public partial class Criterion : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CriterionTitleField;
        
        private int IDField;
        
        private OsbleRubric.OsbleServices.Rubric RubricField;
        
        private int RubricIDField;
        
        private double WeightField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CriterionTitle {
            get {
                return this.CriterionTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.CriterionTitleField, value) != true)) {
                    this.CriterionTitleField = value;
                    this.RaisePropertyChanged("CriterionTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsbleRubric.OsbleServices.Rubric Rubric {
            get {
                return this.RubricField;
            }
            set {
                if ((object.ReferenceEquals(this.RubricField, value) != true)) {
                    this.RubricField = value;
                    this.RaisePropertyChanged("Rubric");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RubricID {
            get {
                return this.RubricIDField;
            }
            set {
                if ((this.RubricIDField.Equals(value) != true)) {
                    this.RubricIDField = value;
                    this.RaisePropertyChanged("RubricID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Weight {
            get {
                return this.WeightField;
            }
            set {
                if ((this.WeightField.Equals(value) != true)) {
                    this.WeightField = value;
                    this.RaisePropertyChanged("Weight");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Level", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Courses.Rubrics")]
    public partial class Level : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IDField;
        
        private string LevelTitleField;
        
        private int RangeEndField;
        
        private int RangeStartField;
        
        private OsbleRubric.OsbleServices.Rubric RubricField;
        
        private int RubricIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LevelTitle {
            get {
                return this.LevelTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelTitleField, value) != true)) {
                    this.LevelTitleField = value;
                    this.RaisePropertyChanged("LevelTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RangeEnd {
            get {
                return this.RangeEndField;
            }
            set {
                if ((this.RangeEndField.Equals(value) != true)) {
                    this.RangeEndField = value;
                    this.RaisePropertyChanged("RangeEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RangeStart {
            get {
                return this.RangeStartField;
            }
            set {
                if ((this.RangeStartField.Equals(value) != true)) {
                    this.RangeStartField = value;
                    this.RaisePropertyChanged("RangeStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OsbleRubric.OsbleServices.Rubric Rubric {
            get {
                return this.RubricField;
            }
            set {
                if ((object.ReferenceEquals(this.RubricField, value) != true)) {
                    this.RubricField = value;
                    this.RaisePropertyChanged("Rubric");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RubricID {
            get {
                return this.RubricIDField;
            }
            set {
                if ((this.RubricIDField.Equals(value) != true)) {
                    this.RubricIDField = value;
                    this.RaisePropertyChanged("RubricID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rubric", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Courses.Rubrics")]
    public partial class Rubric : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Criterion> CriteriaField;
        
        private string DescriptionField;
        
        private bool HasCriteriaCommentsField;
        
        private bool HasGlobalCommentsField;
        
        private int IDField;
        
        private System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Level> LevelsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Criterion> Criteria {
            get {
                return this.CriteriaField;
            }
            set {
                if ((object.ReferenceEquals(this.CriteriaField, value) != true)) {
                    this.CriteriaField = value;
                    this.RaisePropertyChanged("Criteria");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasCriteriaComments {
            get {
                return this.HasCriteriaCommentsField;
            }
            set {
                if ((this.HasCriteriaCommentsField.Equals(value) != true)) {
                    this.HasCriteriaCommentsField = value;
                    this.RaisePropertyChanged("HasCriteriaComments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasGlobalComments {
            get {
                return this.HasGlobalCommentsField;
            }
            set {
                if ((this.HasGlobalCommentsField.Equals(value) != true)) {
                    this.HasGlobalCommentsField = value;
                    this.RaisePropertyChanged("HasGlobalComments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Level> Levels {
            get {
                return this.LevelsField;
            }
            set {
                if ((object.ReferenceEquals(this.LevelsField, value) != true)) {
                    this.LevelsField = value;
                    this.RaisePropertyChanged("Levels");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="OsbleServices.RubricService")]
    public interface RubricService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:RubricService/DoWork", ReplyAction="urn:RubricService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:RubricService/GetFakeCellDescription", ReplyAction="urn:RubricService/GetFakeCellDescriptionResponse")]
        System.IAsyncResult BeginGetFakeCellDescription(System.AsyncCallback callback, object asyncState);
        
        OsbleRubric.OsbleServices.CellDescription EndGetFakeCellDescription(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:RubricService/GetFakeCriterion", ReplyAction="urn:RubricService/GetFakeCriterionResponse")]
        System.IAsyncResult BeginGetFakeCriterion(System.AsyncCallback callback, object asyncState);
        
        OsbleRubric.OsbleServices.Criterion EndGetFakeCriterion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:RubricService/GetFakeLevel", ReplyAction="urn:RubricService/GetFakeLevelResponse")]
        System.IAsyncResult BeginGetFakeLevel(System.AsyncCallback callback, object asyncState);
        
        OsbleRubric.OsbleServices.Level EndGetFakeLevel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:RubricService/GetFakeRubric", ReplyAction="urn:RubricService/GetFakeRubricResponse")]
        System.IAsyncResult BeginGetFakeRubric(System.AsyncCallback callback, object asyncState);
        
        OsbleRubric.OsbleServices.Rubric EndGetFakeRubric(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:RubricService/GetRubricList", ReplyAction="urn:RubricService/GetRubricListResponse")]
        System.IAsyncResult BeginGetRubricList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Rubric> EndGetRubricList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface RubricServiceChannel : OsbleRubric.OsbleServices.RubricService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFakeCellDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFakeCellDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public OsbleRubric.OsbleServices.CellDescription Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((OsbleRubric.OsbleServices.CellDescription)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFakeCriterionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFakeCriterionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public OsbleRubric.OsbleServices.Criterion Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((OsbleRubric.OsbleServices.Criterion)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFakeLevelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFakeLevelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public OsbleRubric.OsbleServices.Level Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((OsbleRubric.OsbleServices.Level)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFakeRubricCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFakeRubricCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public OsbleRubric.OsbleServices.Rubric Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((OsbleRubric.OsbleServices.Rubric)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRubricListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRubricListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Rubric> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Rubric>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RubricServiceClient : System.ServiceModel.ClientBase<OsbleRubric.OsbleServices.RubricService>, OsbleRubric.OsbleServices.RubricService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFakeCellDescriptionDelegate;
        
        private EndOperationDelegate onEndGetFakeCellDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onGetFakeCellDescriptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFakeCriterionDelegate;
        
        private EndOperationDelegate onEndGetFakeCriterionDelegate;
        
        private System.Threading.SendOrPostCallback onGetFakeCriterionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFakeLevelDelegate;
        
        private EndOperationDelegate onEndGetFakeLevelDelegate;
        
        private System.Threading.SendOrPostCallback onGetFakeLevelCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFakeRubricDelegate;
        
        private EndOperationDelegate onEndGetFakeRubricDelegate;
        
        private System.Threading.SendOrPostCallback onGetFakeRubricCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRubricListDelegate;
        
        private EndOperationDelegate onEndGetRubricListDelegate;
        
        private System.Threading.SendOrPostCallback onGetRubricListCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public RubricServiceClient() {
        }
        
        public RubricServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RubricServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RubricServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RubricServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetFakeCellDescriptionCompletedEventArgs> GetFakeCellDescriptionCompleted;
        
        public event System.EventHandler<GetFakeCriterionCompletedEventArgs> GetFakeCriterionCompleted;
        
        public event System.EventHandler<GetFakeLevelCompletedEventArgs> GetFakeLevelCompleted;
        
        public event System.EventHandler<GetFakeRubricCompletedEventArgs> GetFakeRubricCompleted;
        
        public event System.EventHandler<GetRubricListCompletedEventArgs> GetRubricListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult OsbleRubric.OsbleServices.RubricService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void OsbleRubric.OsbleServices.RubricService.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((OsbleRubric.OsbleServices.RubricService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((OsbleRubric.OsbleServices.RubricService)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult OsbleRubric.OsbleServices.RubricService.BeginGetFakeCellDescription(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFakeCellDescription(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        OsbleRubric.OsbleServices.CellDescription OsbleRubric.OsbleServices.RubricService.EndGetFakeCellDescription(System.IAsyncResult result) {
            return base.Channel.EndGetFakeCellDescription(result);
        }
        
        private System.IAsyncResult OnBeginGetFakeCellDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((OsbleRubric.OsbleServices.RubricService)(this)).BeginGetFakeCellDescription(callback, asyncState);
        }
        
        private object[] OnEndGetFakeCellDescription(System.IAsyncResult result) {
            OsbleRubric.OsbleServices.CellDescription retVal = ((OsbleRubric.OsbleServices.RubricService)(this)).EndGetFakeCellDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFakeCellDescriptionCompleted(object state) {
            if ((this.GetFakeCellDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFakeCellDescriptionCompleted(this, new GetFakeCellDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFakeCellDescriptionAsync() {
            this.GetFakeCellDescriptionAsync(null);
        }
        
        public void GetFakeCellDescriptionAsync(object userState) {
            if ((this.onBeginGetFakeCellDescriptionDelegate == null)) {
                this.onBeginGetFakeCellDescriptionDelegate = new BeginOperationDelegate(this.OnBeginGetFakeCellDescription);
            }
            if ((this.onEndGetFakeCellDescriptionDelegate == null)) {
                this.onEndGetFakeCellDescriptionDelegate = new EndOperationDelegate(this.OnEndGetFakeCellDescription);
            }
            if ((this.onGetFakeCellDescriptionCompletedDelegate == null)) {
                this.onGetFakeCellDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFakeCellDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginGetFakeCellDescriptionDelegate, null, this.onEndGetFakeCellDescriptionDelegate, this.onGetFakeCellDescriptionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult OsbleRubric.OsbleServices.RubricService.BeginGetFakeCriterion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFakeCriterion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        OsbleRubric.OsbleServices.Criterion OsbleRubric.OsbleServices.RubricService.EndGetFakeCriterion(System.IAsyncResult result) {
            return base.Channel.EndGetFakeCriterion(result);
        }
        
        private System.IAsyncResult OnBeginGetFakeCriterion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((OsbleRubric.OsbleServices.RubricService)(this)).BeginGetFakeCriterion(callback, asyncState);
        }
        
        private object[] OnEndGetFakeCriterion(System.IAsyncResult result) {
            OsbleRubric.OsbleServices.Criterion retVal = ((OsbleRubric.OsbleServices.RubricService)(this)).EndGetFakeCriterion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFakeCriterionCompleted(object state) {
            if ((this.GetFakeCriterionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFakeCriterionCompleted(this, new GetFakeCriterionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFakeCriterionAsync() {
            this.GetFakeCriterionAsync(null);
        }
        
        public void GetFakeCriterionAsync(object userState) {
            if ((this.onBeginGetFakeCriterionDelegate == null)) {
                this.onBeginGetFakeCriterionDelegate = new BeginOperationDelegate(this.OnBeginGetFakeCriterion);
            }
            if ((this.onEndGetFakeCriterionDelegate == null)) {
                this.onEndGetFakeCriterionDelegate = new EndOperationDelegate(this.OnEndGetFakeCriterion);
            }
            if ((this.onGetFakeCriterionCompletedDelegate == null)) {
                this.onGetFakeCriterionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFakeCriterionCompleted);
            }
            base.InvokeAsync(this.onBeginGetFakeCriterionDelegate, null, this.onEndGetFakeCriterionDelegate, this.onGetFakeCriterionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult OsbleRubric.OsbleServices.RubricService.BeginGetFakeLevel(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFakeLevel(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        OsbleRubric.OsbleServices.Level OsbleRubric.OsbleServices.RubricService.EndGetFakeLevel(System.IAsyncResult result) {
            return base.Channel.EndGetFakeLevel(result);
        }
        
        private System.IAsyncResult OnBeginGetFakeLevel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((OsbleRubric.OsbleServices.RubricService)(this)).BeginGetFakeLevel(callback, asyncState);
        }
        
        private object[] OnEndGetFakeLevel(System.IAsyncResult result) {
            OsbleRubric.OsbleServices.Level retVal = ((OsbleRubric.OsbleServices.RubricService)(this)).EndGetFakeLevel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFakeLevelCompleted(object state) {
            if ((this.GetFakeLevelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFakeLevelCompleted(this, new GetFakeLevelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFakeLevelAsync() {
            this.GetFakeLevelAsync(null);
        }
        
        public void GetFakeLevelAsync(object userState) {
            if ((this.onBeginGetFakeLevelDelegate == null)) {
                this.onBeginGetFakeLevelDelegate = new BeginOperationDelegate(this.OnBeginGetFakeLevel);
            }
            if ((this.onEndGetFakeLevelDelegate == null)) {
                this.onEndGetFakeLevelDelegate = new EndOperationDelegate(this.OnEndGetFakeLevel);
            }
            if ((this.onGetFakeLevelCompletedDelegate == null)) {
                this.onGetFakeLevelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFakeLevelCompleted);
            }
            base.InvokeAsync(this.onBeginGetFakeLevelDelegate, null, this.onEndGetFakeLevelDelegate, this.onGetFakeLevelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult OsbleRubric.OsbleServices.RubricService.BeginGetFakeRubric(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFakeRubric(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        OsbleRubric.OsbleServices.Rubric OsbleRubric.OsbleServices.RubricService.EndGetFakeRubric(System.IAsyncResult result) {
            return base.Channel.EndGetFakeRubric(result);
        }
        
        private System.IAsyncResult OnBeginGetFakeRubric(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((OsbleRubric.OsbleServices.RubricService)(this)).BeginGetFakeRubric(callback, asyncState);
        }
        
        private object[] OnEndGetFakeRubric(System.IAsyncResult result) {
            OsbleRubric.OsbleServices.Rubric retVal = ((OsbleRubric.OsbleServices.RubricService)(this)).EndGetFakeRubric(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFakeRubricCompleted(object state) {
            if ((this.GetFakeRubricCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFakeRubricCompleted(this, new GetFakeRubricCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFakeRubricAsync() {
            this.GetFakeRubricAsync(null);
        }
        
        public void GetFakeRubricAsync(object userState) {
            if ((this.onBeginGetFakeRubricDelegate == null)) {
                this.onBeginGetFakeRubricDelegate = new BeginOperationDelegate(this.OnBeginGetFakeRubric);
            }
            if ((this.onEndGetFakeRubricDelegate == null)) {
                this.onEndGetFakeRubricDelegate = new EndOperationDelegate(this.OnEndGetFakeRubric);
            }
            if ((this.onGetFakeRubricCompletedDelegate == null)) {
                this.onGetFakeRubricCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFakeRubricCompleted);
            }
            base.InvokeAsync(this.onBeginGetFakeRubricDelegate, null, this.onEndGetFakeRubricDelegate, this.onGetFakeRubricCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult OsbleRubric.OsbleServices.RubricService.BeginGetRubricList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRubricList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Rubric> OsbleRubric.OsbleServices.RubricService.EndGetRubricList(System.IAsyncResult result) {
            return base.Channel.EndGetRubricList(result);
        }
        
        private System.IAsyncResult OnBeginGetRubricList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((OsbleRubric.OsbleServices.RubricService)(this)).BeginGetRubricList(callback, asyncState);
        }
        
        private object[] OnEndGetRubricList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Rubric> retVal = ((OsbleRubric.OsbleServices.RubricService)(this)).EndGetRubricList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRubricListCompleted(object state) {
            if ((this.GetRubricListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRubricListCompleted(this, new GetRubricListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRubricListAsync() {
            this.GetRubricListAsync(null);
        }
        
        public void GetRubricListAsync(object userState) {
            if ((this.onBeginGetRubricListDelegate == null)) {
                this.onBeginGetRubricListDelegate = new BeginOperationDelegate(this.OnBeginGetRubricList);
            }
            if ((this.onEndGetRubricListDelegate == null)) {
                this.onEndGetRubricListDelegate = new EndOperationDelegate(this.OnEndGetRubricList);
            }
            if ((this.onGetRubricListCompletedDelegate == null)) {
                this.onGetRubricListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRubricListCompleted);
            }
            base.InvokeAsync(this.onBeginGetRubricListDelegate, null, this.onEndGetRubricListDelegate, this.onGetRubricListCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override OsbleRubric.OsbleServices.RubricService CreateChannel() {
            return new RubricServiceClientChannel(this);
        }
        
        private class RubricServiceClientChannel : ChannelBase<OsbleRubric.OsbleServices.RubricService>, OsbleRubric.OsbleServices.RubricService {
            
            public RubricServiceClientChannel(System.ServiceModel.ClientBase<OsbleRubric.OsbleServices.RubricService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetFakeCellDescription(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFakeCellDescription", _args, callback, asyncState);
                return _result;
            }
            
            public OsbleRubric.OsbleServices.CellDescription EndGetFakeCellDescription(System.IAsyncResult result) {
                object[] _args = new object[0];
                OsbleRubric.OsbleServices.CellDescription _result = ((OsbleRubric.OsbleServices.CellDescription)(base.EndInvoke("GetFakeCellDescription", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFakeCriterion(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFakeCriterion", _args, callback, asyncState);
                return _result;
            }
            
            public OsbleRubric.OsbleServices.Criterion EndGetFakeCriterion(System.IAsyncResult result) {
                object[] _args = new object[0];
                OsbleRubric.OsbleServices.Criterion _result = ((OsbleRubric.OsbleServices.Criterion)(base.EndInvoke("GetFakeCriterion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFakeLevel(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFakeLevel", _args, callback, asyncState);
                return _result;
            }
            
            public OsbleRubric.OsbleServices.Level EndGetFakeLevel(System.IAsyncResult result) {
                object[] _args = new object[0];
                OsbleRubric.OsbleServices.Level _result = ((OsbleRubric.OsbleServices.Level)(base.EndInvoke("GetFakeLevel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFakeRubric(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFakeRubric", _args, callback, asyncState);
                return _result;
            }
            
            public OsbleRubric.OsbleServices.Rubric EndGetFakeRubric(System.IAsyncResult result) {
                object[] _args = new object[0];
                OsbleRubric.OsbleServices.Rubric _result = ((OsbleRubric.OsbleServices.Rubric)(base.EndInvoke("GetFakeRubric", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRubricList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetRubricList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Rubric> EndGetRubricList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Rubric> _result = ((System.Collections.ObjectModel.ObservableCollection<OsbleRubric.OsbleServices.Rubric>)(base.EndInvoke("GetRubricList", _args, result)));
                return _result;
            }
        }
    }
}
