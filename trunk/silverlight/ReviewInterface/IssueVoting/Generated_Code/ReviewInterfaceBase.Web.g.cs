//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IssueVoting
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace ReviewInterfaceBase.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    public enum AuthorClassification
    {
        
        Student = 0,
        
        Moderator = 1,
        
        Anonymous = 2,
    }
    
    /// <summary>
    /// The 'Category' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ReviewInterfaceBase.Web")]
    public sealed partial class Category : Entity
    {
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        public Category()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'DocumentLocation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ReviewInterfaceBase.Web")]
    public sealed partial class DocumentLocation : Entity
    {
        
        private string _author;
        
        private int _id;
        
        private string _location;
        
        private AuthorClassification _role;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAuthorChanging(string value);
        partial void OnAuthorChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnRoleChanging(AuthorClassification value);
        partial void OnRoleChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentLocation"/> class.
        /// </summary>
        public DocumentLocation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Author' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string Author
        {
            get
            {
                return this._author;
            }
            set
            {
                if ((this._author != value))
                {
                    this.OnAuthorChanging(value);
                    this.ValidateProperty("Author", value);
                    this._author = value;
                    this.RaisePropertyChanged("Author");
                    this.OnAuthorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [ReadOnly(true)]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaisePropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Role' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        [ReadOnly(true)]
        public AuthorClassification Role
        {
            get
            {
                return this._role;
            }
            set
            {
                if ((this._role != value))
                {
                    this.OnRoleChanging(value);
                    this.ValidateProperty("Role", value);
                    this._role = value;
                    this.RaisePropertyChanged("Role");
                    this.OnRoleChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'FakeDomainService' DomainService.
    /// </summary>
    public sealed partial class FakeDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FakeDomainContext"/> class.
        /// </summary>
        public FakeDomainContext() : 
                this(new WebDomainClient<IFakeDomainServiceContract>(new Uri("ReviewInterfaceBase-Web-FakeDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FakeDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FakeDomainService service URI.</param>
        public FakeDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IFakeDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FakeDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FakeDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Category"/> entity instances that have been loaded into this <see cref="FakeDomainContext"/> instance.
        /// </summary>
        public EntitySet<Category> Categories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Category>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="DocumentLocation"/> entity instances that have been loaded into this <see cref="FakeDomainContext"/> instance.
        /// </summary>
        public EntitySet<DocumentLocation> DocumentLocations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<DocumentLocation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Tag"/> entity instances that have been loaded into this <see cref="FakeDomainContext"/> instance.
        /// </summary>
        public EntitySet<Tag> Tags
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Tag>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Category"/> entity instances using the 'GetCategories' query.
        /// </summary>
        /// <param name="DocumentID">The value for the 'DocumentID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entity instances.</returns>
        public EntityQuery<Category> GetCategoriesQuery(int DocumentID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("DocumentID", DocumentID);
            this.ValidateMethod("GetCategoriesQuery", parameters);
            return base.CreateQuery<Category>("GetCategories", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DocumentLocation"/> entity instances using the 'GetDocumentLocations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DocumentLocation"/> entity instances.</returns>
        public EntityQuery<DocumentLocation> GetDocumentLocationsQuery()
        {
            this.ValidateMethod("GetDocumentLocationsQuery", null);
            return base.CreateQuery<DocumentLocation>("GetDocumentLocations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Category"/> entity instances using the 'GetIssueVotingCategories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entity instances.</returns>
        public EntityQuery<Category> GetIssueVotingCategoriesQuery()
        {
            this.ValidateMethod("GetIssueVotingCategoriesQuery", null);
            return base.CreateQuery<Category>("GetIssueVotingCategories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="DocumentLocation"/> entity instances using the 'GetPeerReviewLocations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="DocumentLocation"/> entity instances.</returns>
        public EntityQuery<DocumentLocation> GetPeerReviewLocationsQuery()
        {
            this.ValidateMethod("GetPeerReviewLocationsQuery", null);
            return base.CreateQuery<DocumentLocation>("GetPeerReviewLocations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Tag"/> entity instances using the 'GetTags' query.
        /// </summary>
        /// <param name="CategoryID">The value for the 'CategoryID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Tag"/> entity instances.</returns>
        public EntityQuery<Tag> GetTagsQuery(int CategoryID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("CategoryID", CategoryID);
            this.ValidateMethod("GetTagsQuery", parameters);
            return base.CreateQuery<Tag>("GetTags", parameters, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionID' method of the DomainService.
        /// </summary>
        /// <param name="sessionID">The value for the 'sessionID' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionID(string sessionID, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionID", sessionID);
            this.ValidateMethod("SetSessionID", parameters);
            return this.InvokeOperation("SetSessionID", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'SetSessionID' method of the DomainService.
        /// </summary>
        /// <param name="sessionID">The value for the 'sessionID' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation SetSessionID(string sessionID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("sessionID", sessionID);
            this.ValidateMethod("SetSessionID", parameters);
            return this.InvokeOperation("SetSessionID", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadFile' method of the DomainService.
        /// </summary>
        /// <param name="str">The value for the 'str' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation UploadFile(string str, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("str", str);
            this.ValidateMethod("UploadFile", parameters);
            return this.InvokeOperation("UploadFile", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadFile' method of the DomainService.
        /// </summary>
        /// <param name="str">The value for the 'str' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation UploadFile(string str)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("str", str);
            this.ValidateMethod("UploadFile", parameters);
            return this.InvokeOperation("UploadFile", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FakeDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FakeDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFakeDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCategories' operation.
            /// </summary>
            /// <param name="DocumentID">The value for the 'DocumentID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FakeDomainService/GetCategoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FakeDomainService/GetCategories", ReplyAction="http://tempuri.org/FakeDomainService/GetCategoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCategories(int DocumentID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCategories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCategories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCategories' operation.</returns>
            QueryResult<Category> EndGetCategories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDocumentLocations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FakeDomainService/GetDocumentLocationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FakeDomainService/GetDocumentLocations", ReplyAction="http://tempuri.org/FakeDomainService/GetDocumentLocationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetDocumentLocations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDocumentLocations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDocumentLocations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDocumentLocations' operation.</returns>
            QueryResult<DocumentLocation> EndGetDocumentLocations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIssueVotingCategories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FakeDomainService/GetIssueVotingCategoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FakeDomainService/GetIssueVotingCategories", ReplyAction="http://tempuri.org/FakeDomainService/GetIssueVotingCategoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetIssueVotingCategories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIssueVotingCategories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIssueVotingCategories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIssueVotingCategories' operation.</returns>
            QueryResult<Category> EndGetIssueVotingCategories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPeerReviewLocations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FakeDomainService/GetPeerReviewLocationsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FakeDomainService/GetPeerReviewLocations", ReplyAction="http://tempuri.org/FakeDomainService/GetPeerReviewLocationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPeerReviewLocations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPeerReviewLocations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPeerReviewLocations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPeerReviewLocations' operation.</returns>
            QueryResult<DocumentLocation> EndGetPeerReviewLocations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTags' operation.
            /// </summary>
            /// <param name="CategoryID">The value for the 'CategoryID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FakeDomainService/GetTagsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FakeDomainService/GetTags", ReplyAction="http://tempuri.org/FakeDomainService/GetTagsResponse")]
            [WebGet()]
            IAsyncResult BeginGetTags(int CategoryID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTags'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTags'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTags' operation.</returns>
            QueryResult<Tag> EndGetTags(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SetSessionID' operation.
            /// </summary>
            /// <param name="sessionID">The value for the 'sessionID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FakeDomainService/SetSessionIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FakeDomainService/SetSessionID", ReplyAction="http://tempuri.org/FakeDomainService/SetSessionIDResponse")]
            IAsyncResult BeginSetSessionID(string sessionID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSetSessionID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSetSessionID'.</param>
            void EndSetSessionID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UploadFile' operation.
            /// </summary>
            /// <param name="str">The value for the 'str' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FakeDomainService/UploadFileDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FakeDomainService/UploadFile", ReplyAction="http://tempuri.org/FakeDomainService/UploadFileResponse")]
            IAsyncResult BeginUploadFile(string str, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUploadFile'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUploadFile'.</param>
            void EndUploadFile(IAsyncResult result);
        }
        
        internal sealed class FakeDomainContextEntityContainer : EntityContainer
        {
            
            public FakeDomainContextEntityContainer()
            {
                this.CreateEntitySet<Category>(EntitySetOperations.None);
                this.CreateEntitySet<DocumentLocation>(EntitySetOperations.None);
                this.CreateEntitySet<Tag>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'Tag' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ReviewInterfaceBase.Web")]
    public sealed partial class Tag : Entity
    {
        
        private int _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Tag"/> class.
        /// </summary>
        public Tag()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
