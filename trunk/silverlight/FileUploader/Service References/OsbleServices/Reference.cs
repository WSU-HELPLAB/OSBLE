//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace FileUploader.OsbleServices {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractListing", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Services.Uploader")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FileUploader.OsbleServices.DirectoryListing))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FileUploader.OsbleServices.ParentDirectoryListing))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FileUploader.OsbleServices.FileListing))]
    public partial class AbstractListing : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime LastModifiedField;
        
        private string NameField;
        
        private int SortOrderField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastModified {
            get {
                return this.LastModifiedField;
            }
            set {
                if ((this.LastModifiedField.Equals(value) != true)) {
                    this.LastModifiedField = value;
                    this.RaisePropertyChanged("LastModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DirectoryListing", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Services.Uploader")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FileUploader.OsbleServices.ParentDirectoryListing))]
    public partial class DirectoryListing : FileUploader.OsbleServices.AbstractListing {
        
        private System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.DirectoryListing> DirectoriesField;
        
        private System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.FileListing> FilesField;
        
        private FileUploader.OsbleServices.DirectoryListing ParentDirectoryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.DirectoryListing> Directories {
            get {
                return this.DirectoriesField;
            }
            set {
                if ((object.ReferenceEquals(this.DirectoriesField, value) != true)) {
                    this.DirectoriesField = value;
                    this.RaisePropertyChanged("Directories");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<FileUploader.OsbleServices.FileListing> Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FileUploader.OsbleServices.DirectoryListing ParentDirectory {
            get {
                return this.ParentDirectoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentDirectoryField, value) != true)) {
                    this.ParentDirectoryField = value;
                    this.RaisePropertyChanged("ParentDirectory");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ParentDirectoryListing", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Services.Uploader")]
    public partial class ParentDirectoryListing : FileUploader.OsbleServices.DirectoryListing {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileListing", Namespace="http://schemas.datacontract.org/2004/07/OSBLE.Models.Services.Uploader")]
    public partial class FileListing : FileUploader.OsbleServices.AbstractListing {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="OsbleServices.UploaderWebService")]
    public interface UploaderWebService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UploaderWebService/GetFakeFileListing", ReplyAction="urn:UploaderWebService/GetFakeFileListingResponse")]
        System.IAsyncResult BeginGetFakeFileListing(System.AsyncCallback callback, object asyncState);
        
        FileUploader.OsbleServices.FileListing EndGetFakeFileListing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UploaderWebService/GetFakeDirectoryListing", ReplyAction="urn:UploaderWebService/GetFakeDirectoryListingResponse")]
        System.IAsyncResult BeginGetFakeDirectoryListing(System.AsyncCallback callback, object asyncState);
        
        FileUploader.OsbleServices.DirectoryListing EndGetFakeDirectoryListing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UploaderWebService/GetFakeParentDirectoryListing", ReplyAction="urn:UploaderWebService/GetFakeParentDirectoryListingResponse")]
        System.IAsyncResult BeginGetFakeParentDirectoryListing(System.AsyncCallback callback, object asyncState);
        
        FileUploader.OsbleServices.ParentDirectoryListing EndGetFakeParentDirectoryListing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UploaderWebService/GetFileList", ReplyAction="urn:UploaderWebService/GetFileListResponse")]
        System.IAsyncResult BeginGetFileList(int courseId, string authKey, System.AsyncCallback callback, object asyncState);
        
        FileUploader.OsbleServices.DirectoryListing EndGetFileList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UploaderWebService/GetFileUrl", ReplyAction="urn:UploaderWebService/GetFileUrlResponse")]
        System.IAsyncResult BeginGetFileUrl(string fileName, System.AsyncCallback callback, object asyncState);
        
        string EndGetFileUrl(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UploaderWebService/GetValidUploadLocations", ReplyAction="urn:UploaderWebService/GetValidUploadLocationsResponse")]
        System.IAsyncResult BeginGetValidUploadLocations(string authKey, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<int, string> EndGetValidUploadLocations(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UploaderWebService/SyncFile", ReplyAction="urn:UploaderWebService/SyncFileResponse")]
        System.IAsyncResult BeginSyncFile(string fileName, byte[] data, int count, System.Collections.Generic.KeyValuePair<int, string> course, string authToken, System.AsyncCallback callback, object asyncState);
        
        int EndSyncFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UploaderWebService/PrepCurrentPath", ReplyAction="urn:UploaderWebService/PrepCurrentPathResponse")]
        System.IAsyncResult BeginPrepCurrentPath(FileUploader.OsbleServices.DirectoryListing dirList, System.Collections.Generic.KeyValuePair<int, string> course, string authToken, System.AsyncCallback callback, object asyncState);
        
        bool EndPrepCurrentPath(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:UploaderWebService/ValidateUser", ReplyAction="urn:UploaderWebService/ValidateUserResponse")]
        System.IAsyncResult BeginValidateUser(string userName, string password, System.AsyncCallback callback, object asyncState);
        
        string EndValidateUser(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UploaderWebServiceChannel : FileUploader.OsbleServices.UploaderWebService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFakeFileListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFakeFileListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FileUploader.OsbleServices.FileListing Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FileUploader.OsbleServices.FileListing)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFakeDirectoryListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFakeDirectoryListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FileUploader.OsbleServices.DirectoryListing Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FileUploader.OsbleServices.DirectoryListing)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFakeParentDirectoryListingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFakeParentDirectoryListingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FileUploader.OsbleServices.ParentDirectoryListing Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FileUploader.OsbleServices.ParentDirectoryListing)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public FileUploader.OsbleServices.DirectoryListing Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((FileUploader.OsbleServices.DirectoryListing)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetValidUploadLocationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetValidUploadLocationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SyncFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SyncFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PrepCurrentPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PrepCurrentPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploaderWebServiceClient : System.ServiceModel.ClientBase<FileUploader.OsbleServices.UploaderWebService>, FileUploader.OsbleServices.UploaderWebService {
        
        private BeginOperationDelegate onBeginGetFakeFileListingDelegate;
        
        private EndOperationDelegate onEndGetFakeFileListingDelegate;
        
        private System.Threading.SendOrPostCallback onGetFakeFileListingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFakeDirectoryListingDelegate;
        
        private EndOperationDelegate onEndGetFakeDirectoryListingDelegate;
        
        private System.Threading.SendOrPostCallback onGetFakeDirectoryListingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFakeParentDirectoryListingDelegate;
        
        private EndOperationDelegate onEndGetFakeParentDirectoryListingDelegate;
        
        private System.Threading.SendOrPostCallback onGetFakeParentDirectoryListingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileListDelegate;
        
        private EndOperationDelegate onEndGetFileListDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileUrlDelegate;
        
        private EndOperationDelegate onEndGetFileUrlDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileUrlCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetValidUploadLocationsDelegate;
        
        private EndOperationDelegate onEndGetValidUploadLocationsDelegate;
        
        private System.Threading.SendOrPostCallback onGetValidUploadLocationsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSyncFileDelegate;
        
        private EndOperationDelegate onEndSyncFileDelegate;
        
        private System.Threading.SendOrPostCallback onSyncFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginPrepCurrentPathDelegate;
        
        private EndOperationDelegate onEndPrepCurrentPathDelegate;
        
        private System.Threading.SendOrPostCallback onPrepCurrentPathCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateUserDelegate;
        
        private EndOperationDelegate onEndValidateUserDelegate;
        
        private System.Threading.SendOrPostCallback onValidateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public UploaderWebServiceClient() {
        }
        
        public UploaderWebServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploaderWebServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploaderWebServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploaderWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetFakeFileListingCompletedEventArgs> GetFakeFileListingCompleted;
        
        public event System.EventHandler<GetFakeDirectoryListingCompletedEventArgs> GetFakeDirectoryListingCompleted;
        
        public event System.EventHandler<GetFakeParentDirectoryListingCompletedEventArgs> GetFakeParentDirectoryListingCompleted;
        
        public event System.EventHandler<GetFileListCompletedEventArgs> GetFileListCompleted;
        
        public event System.EventHandler<GetFileUrlCompletedEventArgs> GetFileUrlCompleted;
        
        public event System.EventHandler<GetValidUploadLocationsCompletedEventArgs> GetValidUploadLocationsCompleted;
        
        public event System.EventHandler<SyncFileCompletedEventArgs> SyncFileCompleted;
        
        public event System.EventHandler<PrepCurrentPathCompletedEventArgs> PrepCurrentPathCompleted;
        
        public event System.EventHandler<ValidateUserCompletedEventArgs> ValidateUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.UploaderWebService.BeginGetFakeFileListing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFakeFileListing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileUploader.OsbleServices.FileListing FileUploader.OsbleServices.UploaderWebService.EndGetFakeFileListing(System.IAsyncResult result) {
            return base.Channel.EndGetFakeFileListing(result);
        }
        
        private System.IAsyncResult OnBeginGetFakeFileListing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((FileUploader.OsbleServices.UploaderWebService)(this)).BeginGetFakeFileListing(callback, asyncState);
        }
        
        private object[] OnEndGetFakeFileListing(System.IAsyncResult result) {
            FileUploader.OsbleServices.FileListing retVal = ((FileUploader.OsbleServices.UploaderWebService)(this)).EndGetFakeFileListing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFakeFileListingCompleted(object state) {
            if ((this.GetFakeFileListingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFakeFileListingCompleted(this, new GetFakeFileListingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFakeFileListingAsync() {
            this.GetFakeFileListingAsync(null);
        }
        
        public void GetFakeFileListingAsync(object userState) {
            if ((this.onBeginGetFakeFileListingDelegate == null)) {
                this.onBeginGetFakeFileListingDelegate = new BeginOperationDelegate(this.OnBeginGetFakeFileListing);
            }
            if ((this.onEndGetFakeFileListingDelegate == null)) {
                this.onEndGetFakeFileListingDelegate = new EndOperationDelegate(this.OnEndGetFakeFileListing);
            }
            if ((this.onGetFakeFileListingCompletedDelegate == null)) {
                this.onGetFakeFileListingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFakeFileListingCompleted);
            }
            base.InvokeAsync(this.onBeginGetFakeFileListingDelegate, null, this.onEndGetFakeFileListingDelegate, this.onGetFakeFileListingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.UploaderWebService.BeginGetFakeDirectoryListing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFakeDirectoryListing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileUploader.OsbleServices.DirectoryListing FileUploader.OsbleServices.UploaderWebService.EndGetFakeDirectoryListing(System.IAsyncResult result) {
            return base.Channel.EndGetFakeDirectoryListing(result);
        }
        
        private System.IAsyncResult OnBeginGetFakeDirectoryListing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((FileUploader.OsbleServices.UploaderWebService)(this)).BeginGetFakeDirectoryListing(callback, asyncState);
        }
        
        private object[] OnEndGetFakeDirectoryListing(System.IAsyncResult result) {
            FileUploader.OsbleServices.DirectoryListing retVal = ((FileUploader.OsbleServices.UploaderWebService)(this)).EndGetFakeDirectoryListing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFakeDirectoryListingCompleted(object state) {
            if ((this.GetFakeDirectoryListingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFakeDirectoryListingCompleted(this, new GetFakeDirectoryListingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFakeDirectoryListingAsync() {
            this.GetFakeDirectoryListingAsync(null);
        }
        
        public void GetFakeDirectoryListingAsync(object userState) {
            if ((this.onBeginGetFakeDirectoryListingDelegate == null)) {
                this.onBeginGetFakeDirectoryListingDelegate = new BeginOperationDelegate(this.OnBeginGetFakeDirectoryListing);
            }
            if ((this.onEndGetFakeDirectoryListingDelegate == null)) {
                this.onEndGetFakeDirectoryListingDelegate = new EndOperationDelegate(this.OnEndGetFakeDirectoryListing);
            }
            if ((this.onGetFakeDirectoryListingCompletedDelegate == null)) {
                this.onGetFakeDirectoryListingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFakeDirectoryListingCompleted);
            }
            base.InvokeAsync(this.onBeginGetFakeDirectoryListingDelegate, null, this.onEndGetFakeDirectoryListingDelegate, this.onGetFakeDirectoryListingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.UploaderWebService.BeginGetFakeParentDirectoryListing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFakeParentDirectoryListing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileUploader.OsbleServices.ParentDirectoryListing FileUploader.OsbleServices.UploaderWebService.EndGetFakeParentDirectoryListing(System.IAsyncResult result) {
            return base.Channel.EndGetFakeParentDirectoryListing(result);
        }
        
        private System.IAsyncResult OnBeginGetFakeParentDirectoryListing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((FileUploader.OsbleServices.UploaderWebService)(this)).BeginGetFakeParentDirectoryListing(callback, asyncState);
        }
        
        private object[] OnEndGetFakeParentDirectoryListing(System.IAsyncResult result) {
            FileUploader.OsbleServices.ParentDirectoryListing retVal = ((FileUploader.OsbleServices.UploaderWebService)(this)).EndGetFakeParentDirectoryListing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFakeParentDirectoryListingCompleted(object state) {
            if ((this.GetFakeParentDirectoryListingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFakeParentDirectoryListingCompleted(this, new GetFakeParentDirectoryListingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFakeParentDirectoryListingAsync() {
            this.GetFakeParentDirectoryListingAsync(null);
        }
        
        public void GetFakeParentDirectoryListingAsync(object userState) {
            if ((this.onBeginGetFakeParentDirectoryListingDelegate == null)) {
                this.onBeginGetFakeParentDirectoryListingDelegate = new BeginOperationDelegate(this.OnBeginGetFakeParentDirectoryListing);
            }
            if ((this.onEndGetFakeParentDirectoryListingDelegate == null)) {
                this.onEndGetFakeParentDirectoryListingDelegate = new EndOperationDelegate(this.OnEndGetFakeParentDirectoryListing);
            }
            if ((this.onGetFakeParentDirectoryListingCompletedDelegate == null)) {
                this.onGetFakeParentDirectoryListingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFakeParentDirectoryListingCompleted);
            }
            base.InvokeAsync(this.onBeginGetFakeParentDirectoryListingDelegate, null, this.onEndGetFakeParentDirectoryListingDelegate, this.onGetFakeParentDirectoryListingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.UploaderWebService.BeginGetFileList(int courseId, string authKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileList(courseId, authKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileUploader.OsbleServices.DirectoryListing FileUploader.OsbleServices.UploaderWebService.EndGetFileList(System.IAsyncResult result) {
            return base.Channel.EndGetFileList(result);
        }
        
        private System.IAsyncResult OnBeginGetFileList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int courseId = ((int)(inValues[0]));
            string authKey = ((string)(inValues[1]));
            return ((FileUploader.OsbleServices.UploaderWebService)(this)).BeginGetFileList(courseId, authKey, callback, asyncState);
        }
        
        private object[] OnEndGetFileList(System.IAsyncResult result) {
            FileUploader.OsbleServices.DirectoryListing retVal = ((FileUploader.OsbleServices.UploaderWebService)(this)).EndGetFileList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileListCompleted(object state) {
            if ((this.GetFileListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileListCompleted(this, new GetFileListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileListAsync(int courseId, string authKey) {
            this.GetFileListAsync(courseId, authKey, null);
        }
        
        public void GetFileListAsync(int courseId, string authKey, object userState) {
            if ((this.onBeginGetFileListDelegate == null)) {
                this.onBeginGetFileListDelegate = new BeginOperationDelegate(this.OnBeginGetFileList);
            }
            if ((this.onEndGetFileListDelegate == null)) {
                this.onEndGetFileListDelegate = new EndOperationDelegate(this.OnEndGetFileList);
            }
            if ((this.onGetFileListCompletedDelegate == null)) {
                this.onGetFileListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileListCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileListDelegate, new object[] {
                        courseId,
                        authKey}, this.onEndGetFileListDelegate, this.onGetFileListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.UploaderWebService.BeginGetFileUrl(string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileUrl(fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string FileUploader.OsbleServices.UploaderWebService.EndGetFileUrl(System.IAsyncResult result) {
            return base.Channel.EndGetFileUrl(result);
        }
        
        private System.IAsyncResult OnBeginGetFileUrl(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            return ((FileUploader.OsbleServices.UploaderWebService)(this)).BeginGetFileUrl(fileName, callback, asyncState);
        }
        
        private object[] OnEndGetFileUrl(System.IAsyncResult result) {
            string retVal = ((FileUploader.OsbleServices.UploaderWebService)(this)).EndGetFileUrl(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileUrlCompleted(object state) {
            if ((this.GetFileUrlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileUrlCompleted(this, new GetFileUrlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileUrlAsync(string fileName) {
            this.GetFileUrlAsync(fileName, null);
        }
        
        public void GetFileUrlAsync(string fileName, object userState) {
            if ((this.onBeginGetFileUrlDelegate == null)) {
                this.onBeginGetFileUrlDelegate = new BeginOperationDelegate(this.OnBeginGetFileUrl);
            }
            if ((this.onEndGetFileUrlDelegate == null)) {
                this.onEndGetFileUrlDelegate = new EndOperationDelegate(this.OnEndGetFileUrl);
            }
            if ((this.onGetFileUrlCompletedDelegate == null)) {
                this.onGetFileUrlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileUrlCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileUrlDelegate, new object[] {
                        fileName}, this.onEndGetFileUrlDelegate, this.onGetFileUrlCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.UploaderWebService.BeginGetValidUploadLocations(string authKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetValidUploadLocations(authKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<int, string> FileUploader.OsbleServices.UploaderWebService.EndGetValidUploadLocations(System.IAsyncResult result) {
            return base.Channel.EndGetValidUploadLocations(result);
        }
        
        private System.IAsyncResult OnBeginGetValidUploadLocations(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string authKey = ((string)(inValues[0]));
            return ((FileUploader.OsbleServices.UploaderWebService)(this)).BeginGetValidUploadLocations(authKey, callback, asyncState);
        }
        
        private object[] OnEndGetValidUploadLocations(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> retVal = ((FileUploader.OsbleServices.UploaderWebService)(this)).EndGetValidUploadLocations(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetValidUploadLocationsCompleted(object state) {
            if ((this.GetValidUploadLocationsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetValidUploadLocationsCompleted(this, new GetValidUploadLocationsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetValidUploadLocationsAsync(string authKey) {
            this.GetValidUploadLocationsAsync(authKey, null);
        }
        
        public void GetValidUploadLocationsAsync(string authKey, object userState) {
            if ((this.onBeginGetValidUploadLocationsDelegate == null)) {
                this.onBeginGetValidUploadLocationsDelegate = new BeginOperationDelegate(this.OnBeginGetValidUploadLocations);
            }
            if ((this.onEndGetValidUploadLocationsDelegate == null)) {
                this.onEndGetValidUploadLocationsDelegate = new EndOperationDelegate(this.OnEndGetValidUploadLocations);
            }
            if ((this.onGetValidUploadLocationsCompletedDelegate == null)) {
                this.onGetValidUploadLocationsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetValidUploadLocationsCompleted);
            }
            base.InvokeAsync(this.onBeginGetValidUploadLocationsDelegate, new object[] {
                        authKey}, this.onEndGetValidUploadLocationsDelegate, this.onGetValidUploadLocationsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.UploaderWebService.BeginSyncFile(string fileName, byte[] data, int count, System.Collections.Generic.KeyValuePair<int, string> course, string authToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSyncFile(fileName, data, count, course, authToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int FileUploader.OsbleServices.UploaderWebService.EndSyncFile(System.IAsyncResult result) {
            return base.Channel.EndSyncFile(result);
        }
        
        private System.IAsyncResult OnBeginSyncFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            byte[] data = ((byte[])(inValues[1]));
            int count = ((int)(inValues[2]));
            System.Collections.Generic.KeyValuePair<int, string> course = ((System.Collections.Generic.KeyValuePair<int, string>)(inValues[3]));
            string authToken = ((string)(inValues[4]));
            return ((FileUploader.OsbleServices.UploaderWebService)(this)).BeginSyncFile(fileName, data, count, course, authToken, callback, asyncState);
        }
        
        private object[] OnEndSyncFile(System.IAsyncResult result) {
            int retVal = ((FileUploader.OsbleServices.UploaderWebService)(this)).EndSyncFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSyncFileCompleted(object state) {
            if ((this.SyncFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SyncFileCompleted(this, new SyncFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SyncFileAsync(string fileName, byte[] data, int count, System.Collections.Generic.KeyValuePair<int, string> course, string authToken) {
            this.SyncFileAsync(fileName, data, count, course, authToken, null);
        }
        
        public void SyncFileAsync(string fileName, byte[] data, int count, System.Collections.Generic.KeyValuePair<int, string> course, string authToken, object userState) {
            if ((this.onBeginSyncFileDelegate == null)) {
                this.onBeginSyncFileDelegate = new BeginOperationDelegate(this.OnBeginSyncFile);
            }
            if ((this.onEndSyncFileDelegate == null)) {
                this.onEndSyncFileDelegate = new EndOperationDelegate(this.OnEndSyncFile);
            }
            if ((this.onSyncFileCompletedDelegate == null)) {
                this.onSyncFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSyncFileCompleted);
            }
            base.InvokeAsync(this.onBeginSyncFileDelegate, new object[] {
                        fileName,
                        data,
                        count,
                        course,
                        authToken}, this.onEndSyncFileDelegate, this.onSyncFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.UploaderWebService.BeginPrepCurrentPath(FileUploader.OsbleServices.DirectoryListing dirList, System.Collections.Generic.KeyValuePair<int, string> course, string authToken, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPrepCurrentPath(dirList, course, authToken, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool FileUploader.OsbleServices.UploaderWebService.EndPrepCurrentPath(System.IAsyncResult result) {
            return base.Channel.EndPrepCurrentPath(result);
        }
        
        private System.IAsyncResult OnBeginPrepCurrentPath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            FileUploader.OsbleServices.DirectoryListing dirList = ((FileUploader.OsbleServices.DirectoryListing)(inValues[0]));
            System.Collections.Generic.KeyValuePair<int, string> course = ((System.Collections.Generic.KeyValuePair<int, string>)(inValues[1]));
            string authToken = ((string)(inValues[2]));
            return ((FileUploader.OsbleServices.UploaderWebService)(this)).BeginPrepCurrentPath(dirList, course, authToken, callback, asyncState);
        }
        
        private object[] OnEndPrepCurrentPath(System.IAsyncResult result) {
            bool retVal = ((FileUploader.OsbleServices.UploaderWebService)(this)).EndPrepCurrentPath(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPrepCurrentPathCompleted(object state) {
            if ((this.PrepCurrentPathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PrepCurrentPathCompleted(this, new PrepCurrentPathCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PrepCurrentPathAsync(FileUploader.OsbleServices.DirectoryListing dirList, System.Collections.Generic.KeyValuePair<int, string> course, string authToken) {
            this.PrepCurrentPathAsync(dirList, course, authToken, null);
        }
        
        public void PrepCurrentPathAsync(FileUploader.OsbleServices.DirectoryListing dirList, System.Collections.Generic.KeyValuePair<int, string> course, string authToken, object userState) {
            if ((this.onBeginPrepCurrentPathDelegate == null)) {
                this.onBeginPrepCurrentPathDelegate = new BeginOperationDelegate(this.OnBeginPrepCurrentPath);
            }
            if ((this.onEndPrepCurrentPathDelegate == null)) {
                this.onEndPrepCurrentPathDelegate = new EndOperationDelegate(this.OnEndPrepCurrentPath);
            }
            if ((this.onPrepCurrentPathCompletedDelegate == null)) {
                this.onPrepCurrentPathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPrepCurrentPathCompleted);
            }
            base.InvokeAsync(this.onBeginPrepCurrentPathDelegate, new object[] {
                        dirList,
                        course,
                        authToken}, this.onEndPrepCurrentPathDelegate, this.onPrepCurrentPathCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileUploader.OsbleServices.UploaderWebService.BeginValidateUser(string userName, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidateUser(userName, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string FileUploader.OsbleServices.UploaderWebService.EndValidateUser(System.IAsyncResult result) {
            return base.Channel.EndValidateUser(result);
        }
        
        private System.IAsyncResult OnBeginValidateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userName = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((FileUploader.OsbleServices.UploaderWebService)(this)).BeginValidateUser(userName, password, callback, asyncState);
        }
        
        private object[] OnEndValidateUser(System.IAsyncResult result) {
            string retVal = ((FileUploader.OsbleServices.UploaderWebService)(this)).EndValidateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateUserCompleted(object state) {
            if ((this.ValidateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateUserCompleted(this, new ValidateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateUserAsync(string userName, string password) {
            this.ValidateUserAsync(userName, password, null);
        }
        
        public void ValidateUserAsync(string userName, string password, object userState) {
            if ((this.onBeginValidateUserDelegate == null)) {
                this.onBeginValidateUserDelegate = new BeginOperationDelegate(this.OnBeginValidateUser);
            }
            if ((this.onEndValidateUserDelegate == null)) {
                this.onEndValidateUserDelegate = new EndOperationDelegate(this.OnEndValidateUser);
            }
            if ((this.onValidateUserCompletedDelegate == null)) {
                this.onValidateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateUserCompleted);
            }
            base.InvokeAsync(this.onBeginValidateUserDelegate, new object[] {
                        userName,
                        password}, this.onEndValidateUserDelegate, this.onValidateUserCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override FileUploader.OsbleServices.UploaderWebService CreateChannel() {
            return new UploaderWebServiceClientChannel(this);
        }
        
        private class UploaderWebServiceClientChannel : ChannelBase<FileUploader.OsbleServices.UploaderWebService>, FileUploader.OsbleServices.UploaderWebService {
            
            public UploaderWebServiceClientChannel(System.ServiceModel.ClientBase<FileUploader.OsbleServices.UploaderWebService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetFakeFileListing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFakeFileListing", _args, callback, asyncState);
                return _result;
            }
            
            public FileUploader.OsbleServices.FileListing EndGetFakeFileListing(System.IAsyncResult result) {
                object[] _args = new object[0];
                FileUploader.OsbleServices.FileListing _result = ((FileUploader.OsbleServices.FileListing)(base.EndInvoke("GetFakeFileListing", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFakeDirectoryListing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFakeDirectoryListing", _args, callback, asyncState);
                return _result;
            }
            
            public FileUploader.OsbleServices.DirectoryListing EndGetFakeDirectoryListing(System.IAsyncResult result) {
                object[] _args = new object[0];
                FileUploader.OsbleServices.DirectoryListing _result = ((FileUploader.OsbleServices.DirectoryListing)(base.EndInvoke("GetFakeDirectoryListing", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFakeParentDirectoryListing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFakeParentDirectoryListing", _args, callback, asyncState);
                return _result;
            }
            
            public FileUploader.OsbleServices.ParentDirectoryListing EndGetFakeParentDirectoryListing(System.IAsyncResult result) {
                object[] _args = new object[0];
                FileUploader.OsbleServices.ParentDirectoryListing _result = ((FileUploader.OsbleServices.ParentDirectoryListing)(base.EndInvoke("GetFakeParentDirectoryListing", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileList(int courseId, string authKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = courseId;
                _args[1] = authKey;
                System.IAsyncResult _result = base.BeginInvoke("GetFileList", _args, callback, asyncState);
                return _result;
            }
            
            public FileUploader.OsbleServices.DirectoryListing EndGetFileList(System.IAsyncResult result) {
                object[] _args = new object[0];
                FileUploader.OsbleServices.DirectoryListing _result = ((FileUploader.OsbleServices.DirectoryListing)(base.EndInvoke("GetFileList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileUrl(string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("GetFileUrl", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetFileUrl(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetFileUrl", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetValidUploadLocations(string authKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = authKey;
                System.IAsyncResult _result = base.BeginInvoke("GetValidUploadLocations", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<int, string> EndGetValidUploadLocations(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<int, string> _result = ((System.Collections.Generic.Dictionary<int, string>)(base.EndInvoke("GetValidUploadLocations", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSyncFile(string fileName, byte[] data, int count, System.Collections.Generic.KeyValuePair<int, string> course, string authToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = fileName;
                _args[1] = data;
                _args[2] = count;
                _args[3] = course;
                _args[4] = authToken;
                System.IAsyncResult _result = base.BeginInvoke("SyncFile", _args, callback, asyncState);
                return _result;
            }
            
            public int EndSyncFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("SyncFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPrepCurrentPath(FileUploader.OsbleServices.DirectoryListing dirList, System.Collections.Generic.KeyValuePair<int, string> course, string authToken, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = dirList;
                _args[1] = course;
                _args[2] = authToken;
                System.IAsyncResult _result = base.BeginInvoke("PrepCurrentPath", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPrepCurrentPath(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PrepCurrentPath", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginValidateUser(string userName, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userName;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("ValidateUser", _args, callback, asyncState);
                return _result;
            }
            
            public string EndValidateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ValidateUser", _args, result)));
                return _result;
            }
        }
    }
}
