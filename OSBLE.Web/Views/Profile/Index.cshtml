@using System.Diagnostics
@using System.Text
@using OSBLE.Models.Users
@using OSBLE.Models.Queries
@using OSBLEPlus.Logic.DomainObjects.ActivityFeeds
@using OSBLEPlus.Logic.DomainObjects.Interface
@using OSBLEPlus.Logic.Utility.Lookups
@using OSBLEPlus.Services.Models
@using OSBLE.Models.ViewModels
@using OSBLE.Utility;
@model ProfileViewModel
@{
    ViewBag.Title = Model.User.FullName;
    UserProfile currentUser = ViewBag.CurrentUser;
    bool pointsEnabled = ViewBag.PointsEnabled ?? false;
    List<AggregateFeedItem> marksHelpful = new List<AggregateFeedItem>();
    string osbleImagesUrlBase = OSBLEPlus.Logic.Utility.StringConstants.WebClientRoot + "Content/OSBLEImages/" + currentUser.ID + "/";
    bool displayImageUpload = ViewBag.IsInstructor != null ? (ViewBag.IsSelf != null ? ViewBag.IsInstructor && ViewBag.IsSelf : false) : false;
}

<style type="text/css">
    .url input {
        width: 100%;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
    }

    .yesAndNoDiv {
        text-align: right;
        margin-top: 10px;
    }

    #image-table td {
        padding: 5px;
        border-top-style: inset;
    }

    #image-table th {
        text-align: center;
    }

    .delete-button {
        cursor: pointer;
    }
</style>

<section data-tab="Profile">
    <div class="jumbotron" id="profile-page-jumbotron">
        <div class="left-col">
            <img src="@Url.Action("Picture", "User", new { id = Model.User.ID, size = 110, area = "" })" title="profile image" alt="profile image" />
        </div>
        <div class="right-col">
            <h1>@Model.User.DisplayName(ViewBag.ActiveCourseUser)</h1>
            <table>
                @if (pointsEnabled)
                {
                    <tr>
                        <td><strong>@* @Model.Score *@</strong> points</td>
                    </tr>
                }
                <tr>
                    <td><strong>@Model.NumberOfPosts</strong> post(s)</td>
                </tr>
                <tr>
                    <td><strong>@Model.NumberOfComments</strong> comment(s)</td>
                </tr>
            </table>
            @if (currentUser.ID == Model.User.ID)
            {
                <a href="@Url.Action("Profile", "Account")" class="btn btn-default">Edit <span class="glyphicon glyphicon-pencil"></span></a>
            }
        </div>
        <div class="clearfix" />
    </div>
</section>
@if (Model.User.ID == currentUser.ID)
{
    int rowCounter = 0;
    @*<section id="subscriptions" class="profile-content">
            <h1>My Subscriptions</h1>
            @if (Model.EventLogSubscriptions.Count() == 0)
            {
                @:You don't have any subscriptions.
            }
            else
            {
                <table id="subscriptions-table">
                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>Author</th>
                            <th>Event Type</th>
                            <th>Last Activity Date</th>
                            <th># Comments</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (AggregateFeedItem item in Model.EventLogSubscriptions)
                        {
                            rowCounter++;
                            string rowClass = "normal-row";
                            if (rowCounter % 2 == 0)
                            {
                                rowClass = "alt-row";
                            }
                            var lastComment = (from comment in item.Comments
                                               orderby comment.EventDate descending
                                               select comment).FirstOrDefault();
                            string lastCommentText = "not available";
                            if (lastComment != null)
                            {
                                lastCommentText = lastComment.EventDate.ToString("MM/dd @ hh:mmtt");
                            }

                            <tr class="@rowClass">
                                <td>
                                    <img src="@Url.Action("Picture", "Profile", new { id = item.Creator.ID, size = 24 })" height="24" width="24" title="profile image" alt="profile image" />
                                </td>
                                <td>
                                    @Html.ActionLink(item.Creator.FullName, "Index", "Profile", new { id = item.Creator.ID }, new { })
                                </td>
                                <td>@item.PrettyName</td>
                                <td>@lastCommentText</td>
                                <td>@item.Comments.Count</td>
                                <td>
                                    @Html.ActionLink("View", "Details", "Feed", new { id = item.Items.FirstOrDefault().Event.EventLogId }, new { })
                                    <a style="padding-left:10px;" href="@Url.Action("UnfollowPost", "Feed", new { id = item.Items.FirstOrDefault().Event.EventLogId, returnUrl = Request.Url.AbsoluteUri })">
                                        <img src="~/Content/icons/unfollow.png" title="unfollow" alt="unfollow" />
                                    </a>

                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </section>*@
}

@if (displayImageUpload)
{
    <div style="margin-left: 15px;">
        <div>
            <h1>OSBLE Hosted Images</h1>
            <h5>Accepted image extensions: .jpg, .jpeg, .png, .gif, .gifv, .bmp</h5>
            <div>
                @using (Html.BeginForm("UploadImages", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <div id="multiple">
                        <input type="file" class="multiple" name="files" multiple accept=".jpg,.jpeg,.png,.gif,.gifv,.bmp" />
                        <button class="btn btn-primary" style="margin-top: 10px;">Upload</button>
                    </div>
                }
            </div>
        </div>
        @if (ViewBag.UploadedImages != null && ViewBag.UploadedImages.Count > 0)
        {
            <div>
                <table id="image-table" style="text-align: center;">
                    <tr>
                        <th></th>
                        <th>
                            Image
                        </th>
                        <th>
                            URL
                        </th>
                        <th>
                            Delete
                        </th>
                    </tr>
                    @foreach (var file in ViewBag.UploadedImages)
                    {
                        string url = osbleImagesUrlBase + file;
                        <tr>
                            <td>
                                <img src="@url" style="width:30px;height:30px;" />
                            </td>
                            <td>
                                <a href="@url" target="_blank">@file</a>
                            </td>
                            <td>
                                <input type="text" class="url" value="@url" />
                            </td>
                            <td>
                                <a title="Click to Delete" class="delete-button" onclick="openConfirmDeleteWindow('@file')">@Helpers.DeleteButton()</a>
                            </td>
                        </tr>
                    }
                </table>
            </div>
        }
    </div>
}

<section id="recent-comments" class="profile-content">
    <h1>Recent Social Activity</h1>
    @if (Model.SocialActivity.TopLevelLogCount == 0 && Model.Feed.Feed.Count == 0)
    {
        @:No recent activity.
    }
    else
    {
        HashSet<DateTime> dates = new HashSet<DateTime>();

        foreach (AggregateFeedItem item in Model.Feed.Feed)
        {
            dates.Add(item.MostRecentOccurance.Date);
        }
        foreach (DateTime dt in Model.SocialActivity.ActivityDates)
        {
            dates.Add(dt.Date);
        }

        foreach (DateTime date in dates.OrderByDescending(l => l.Date))
        {
            List<int> eventIds;
            try
            {
                eventIds = Model.SocialActivity.GetEventIds(date);
            }
            catch
            {
                eventIds = new List<int>();
            }

            IEnumerable<AggregateFeedItem> items = Model.Feed.Feed.Where(m => m.MostRecentOccurance.Date == date);

            <div>
                <h2 class="date-header">@date.ToLongDateString()</h2>

                @if (items.Count() > 0)
                {
                    <p class="posts-heading"><strong><em>Posts</em></strong></p>
                }

                <ul class="posts-list">
                    @foreach (AggregateFeedItem afi in items.Reverse())
                    {
                        string content = "";

                        if (afi.FeedItemType == "Helpful Mark Given Event")
                        {
                            //content = afi.Creator.FullName + " marked a comment as helpful";
                            marksHelpful.Add(afi);
                        }
                        else if (afi.FeedItemType == "Feed Post Event" && (!afi.IsAnonymous && !afi.Items.First().Event.IsAnonymous))
                        {
                            content = string.Format("{0} made a {1}",
                            afi.Creator.FullName,
                            Html.ActionLink("post", "Details", "Feed", new { id = afi.Items[0].Event.EventLogId }, new { }));
                            if (content != "")
                            {
                                DateTime maxDate = afi.MostRecentOccurance;
                                <li>
                                    @Html.Raw(content)
                                    <span class="comments-table-date">
                                        (
                                        <time class="utc-time"
                                              datetime="@Helpers.DateAsUnixTime(maxDate)"
                                              data-original-date="@Helpers.RawDate(maxDate)"
                                              data-date-format="hh:mm A">
                                            @maxDate.ToString("hh:mmtt") (UTC)
                                        </time>
                                        )
                                    </span>
                                </li>
                            }
                        }
                    }
                </ul>

                @if (eventIds.Count() > 0)
                {
                    <p class="comments-heading"><strong><em>Comments</em></strong></p>
                }

                <ul class="comments-list">
                    @foreach (int logId in eventIds)
                    {
                        List<CommentActivityLog> socialLogs = Model.SocialActivity.GetLogs(date, logId);
                        DateTime maxDate = socialLogs.Select(s => s.LogCommentEvent.EventDate).Max();
                        string content = "";

                        //is the user commenting on an anymous event?
                        var ideEvents = ActivityFeedQuery.GetIdeEvents();
                        IActivityEvent sourceEvent = socialLogs[0].LogCommentEvent.SourceEvent;

                        if (sourceEvent.Sender == null)
                        {
                            sourceEvent.Sender = DBHelper.GetUserProfile(sourceEvent.SenderId);
                        }

                        if (ideEvents.Contains(sourceEvent.EventType))
                        {
                            //Is the user the target of an IDE event?  For example, did someone comment on this user's build event?
                            //If so, we don't want to show this as it would ruin the anonymity
                            if (sourceEvent.SenderId == Model.User.ID)
                            {
                                //skip this record
                                continue;
                            }

                            //otherwise, anonymize the source
                            sourceEvent.Sender.FirstName = "A student";
                            sourceEvent.Sender.LastName = "";
                        }

                        bool isAnonymousPost = socialLogs.First().LogCommentEvent.SourceEvent.IsAnonymous;
                        bool isAnonymousComment = socialLogs.First().LogCommentEvent.IsAnonymous;

                        if (!isAnonymousComment)
                        {
                            switch (socialLogs.Count)
                            {
                                case 1:
                                    content = string.Format("{0} commented on a {1} by {2}",
                                    socialLogs[0].LogCommentEvent.IsAnonymous ? "Anonymous User" : socialLogs[0].LogCommentEvent.Sender.FullName,
                                    Html.ActionLink("post", "Details", "Feed", new { id = logId }, new { }),
                                    isAnonymousPost ? "Anonymous User" : sourceEvent.Sender.FullName);
                                    break;

                                case 2:
                                    content = string.Format("{0} and {1} commented on a {2} by {3}",
                                    socialLogs[0].LogCommentEvent.IsAnonymous ? "Anonymous User" : socialLogs[0].LogCommentEvent.Sender.FullName,
                                    socialLogs[1].LogCommentEvent.IsAnonymous ? "Anonymous User" : socialLogs[1].LogCommentEvent.Sender.FullName,
                                    Html.ActionLink("post", "Details", "Feed", new { id = logId }, new { }),
                                    isAnonymousPost ? "Anonymous User" : sourceEvent.Sender.FullName);
                                    break;

                                case 3:
                                    content = string.Format("{0}, {1}, and {2} commented on a {3} by {4}",
                                    socialLogs[0].LogCommentEvent.IsAnonymous ? "Anonymous User" : socialLogs[0].LogCommentEvent.Sender.FullName,
                                    socialLogs[1].LogCommentEvent.IsAnonymous ? "Anonymous User" : socialLogs[1].LogCommentEvent.Sender.FullName,
                                    socialLogs[2].LogCommentEvent.IsAnonymous ? "Anonymous User" : socialLogs[1].LogCommentEvent.Sender.FullName,
                                    Html.ActionLink("post", "Details", "Feed", new { id = logId }, new { }),
                                    isAnonymousPost ? "Anonymous User" : sourceEvent.Sender.FullName);
                                    break;

                                default:
                                    content = string.Format("{0}, {1}, and {2} other(s) commented on a {3} by {4}",
                                    socialLogs[0].LogCommentEvent.IsAnonymous ? "Anonymous User" : socialLogs[0].LogCommentEvent.Sender.FullName,
                                    socialLogs[1].LogCommentEvent.IsAnonymous ? "Anonymous User" : socialLogs[1].LogCommentEvent.Sender.FullName,
                                    socialLogs.Count - 2,
                                    Html.ActionLink("post", "Details", "Feed", new { id = logId }, new { }),
                                    isAnonymousPost ? "Anonymous User" : sourceEvent.Sender.FullName);
                                    break;
                            }
                            <li>
                                @Html.Raw(content)
                                <span class="comments-table-date">
                                    (
                                    <time class="utc-time"
                                          datetime="@Helpers.DateAsUnixTime(maxDate)"
                                          data-original-date="@Helpers.RawDate(maxDate)"
                                          data-date-format="hh:mm A">
                                        @maxDate.ToString("hh:mmtt") (UTC)
                                    </time>
                                    )
                                </span>
                            </li>
                        }

                    }
                </ul>

                @if (marksHelpful.Count() > 0)
                {
                    <p class="marks-helpful-heading"><strong><em>Comments Marked Helpful</em></strong></p>
                }

                <ul class="marks-helpful-list">
                    @foreach (var afi in marksHelpful)
                    {
                        string content = afi.Creator.FullName + " marked a comment as helpful";
                        DateTime maxDate = afi.MostRecentOccurance;
                        <li>
                            @Html.Raw(content)
                            <span class="comments-table-date">
                                (
                                <time class="utc-time"
                                      datetime="@Helpers.DateAsUnixTime(maxDate)"
                                      data-original-date="@Helpers.RawDate(maxDate)"
                                      data-date-format="hh:mm A">
                                    @maxDate.ToString("hh:mmtt") (UTC)
                                </time>
                                )
                            </span>
                        </li>
                    }
                </ul>
            </div>
        }
    }
</section>
<section class="profile-content">
    @*<h1>All Activity</h1>*@
    @*Html.Partial("Feed/_Feed", Model.Feed)*@

</section>


<style type="text/css">
    #recent-comments li {
        padding-left: 20px;
    }

    #recent-comments p {
        padding-left: 10px;
    }
</style>

<script type="text/javascript">
    $("input[type='text']").on("click", function () {
        $(this).select();
    });

    function openConfirmDeleteWindow(filename) {
        event.preventDefault();
        $("#delete-file-name-display").text(filename);
        $("#delete-file-name").val(filename);
        $("#confirmDeleteWindow").dialog({
            modal: true,
            resizable: false,
            width: 500,
            height: 180,
            closeOnEscape: false
        });
        return false;
    }

    function hideConfirmDeleteWindow() {
        $("#confirmDeleteWindow").dialog('close');
    }
</script>

<!--Element for modal confirmation box-->
<div id="confirmDeleteWindow" style="display: none;" title="Delete Image">
    <div id="confirmForm">
        Are you sure you want to delete this image?
        <br />
        <br />
        <strong><span id="delete-file-name-display"></span></strong>

        @using (Html.BeginForm("DeleteImage", "Profile", new { }, FormMethod.Post))
        {
            <div class="yesAndNoDiv">
                <input value="Delete" type="submit" />
                <input value="Cancel" type="button" onclick="hideConfirmDeleteWindow()" />
            </div>
            <input id="delete-file-name" name="fileName" type="hidden" value="" />
        }
    </div>
</div>